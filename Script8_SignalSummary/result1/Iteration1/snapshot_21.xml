<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="21">
  <HTTPTask id="23" hostname="10.100.22.24:8181" path="/signal/validatedSignal/details?id=1219650" url="http://10.100.22.24:8181/signal/validatedSignal/details?id=1219650" ip="10.100.22.24" port="8181" client_ip="10.202.2.239" client_port="16559" connectionId="2232" origin="Primary" encodingType="ANSI" startDateTime="2020-02-07T19:42:23.811+05:30" startTime="7714" endTime="11960" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="315" waitTime="515" receiveTime="3372" sslNegotiateTime="-1" responseBodySize="522694">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>aWQ9MTIxOTY1MA==</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="id" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>MTIxOTY1MA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Referer" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvaW5kZXg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Upgrade-Insecure-Requests" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc5LjAuMzk0NS4xMzAgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj03MzU3YmY5OS1hZWNhLTQ3YjctYmEzNi1mOTYzZjc1NjUxOWM7IGR0Q29va2llPXZfNF9zcnZfMV9zbl9CNzhFRDQ4RkNBNEFGODJGRUUwM0M5RkQwRTYyQjMzNF9wZXJjXzEwMDAwMF9vbF8wX211bF8xOyByeHZ0PTE1ODA4ODcwNzM1MDV8MTU4MDg4NTE4MjkwMTsgZHRQQz0yJDQ4NTI2OTI0N183MDdoLXZHSFRDSkFDQ0FKS1RVQ0xXSVBJQUFWQ01OTkhFQUNKUDsgZHRTYT10cnVlJTdDQyU3Qy0xJTdDUGVyZlNpZ25hbCU3Qy0lN0MxNTgwODg1Mjk3MjQ4JTdDNDg1MjY5MjQ3XzcwNyU3Q2h0dHAlM0ElMkYlMkYxMC4xMDAuMjIuMjQlM0E4MTgxJTJGc2lnbmFsJTJGdmFsaWRhdGVkU2lnbmFsJTJGaW5kZXglN0NWYWxpZGF0ZWQlMjBTaWduYWxzJTdDMTU4MDg4NTI3MzUwMyU3QyU3Qw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2RldGFpbHM/aWQ9MTIxOTY1MCBIVFRQLzEuMQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvaW5kZXgNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OS4wLjM5NDUuMTMwIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45DQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQpIb3N0OiAxMC4xMDAuMjIuMjQ6ODE4MQ0KQ29va2llOiBTRVNTSU9OPTczNTdiZjk5LWFlY2EtNDdiNy1iYTM2LWY5NjNmNzU2NTE5YzsgZHRDb29raWU9dl80X3Nydl8xX3NuX0I3OEVENDhGQ0E0QUY4MkZFRTAzQzlGRDBFNjJCMzM0X3BlcmNfMTAwMDAwX29sXzBfbXVsXzE7IHJ4dnQ9MTU4MDg4NzA3MzUwNXwxNTgwODg1MTgyOTAxOyBkdFBDPTIkNDg1MjY5MjQ3XzcwN2gtdkdIVENKQUNDQUpLVFVDTFdJUElBQVZDTU5OSEVBQ0pQOyBkdFNhPXRydWUlN0NDJTdDLTElN0NQZXJmU2lnbmFsJTdDLSU3QzE1ODA4ODUyOTcyNDglN0M0ODUyNjkyNDdfNzA3JTdDaHR0cCUzQSUyRiUyRjEwLjEwMC4yMi4yNCUzQTgxODElMkZzaWduYWwlMkZ2YWxpZGF0ZWRTaWduYWwlMkZpbmRleCU3Q1ZhbGlkYXRlZCUyMFNpZ25hbHMlN0MxNTgwODg1MjczNTAzJTdDJTdDDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NzM1N2JmOTktYWVjYS00N2I3LWJhMzYtZjk2M2Y3NTY1MTlj</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtCookie" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dl80X3Nydl8xX3NuX0I3OEVENDhGQ0E0QUY4MkZFRTAzQzlGRDBFNjJCMzM0X3BlcmNfMTAwMDAwX29sXzBfbXVsXzE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="rxvt" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTU4MDg4NzA3MzUwNXwxNTgwODg1MTgyOTAx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtPC" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MiQ0ODUyNjkyNDdfNzA3aC12R0hUQ0pBQ0NBSktUVUNMV0lQSUFBVkNNTk5IRUFDSlA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtSa" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dHJ1ZSU3Q0MlN0MtMSU3Q1BlcmZTaWduYWwlN0MtJTdDMTU4MDg4NTI5NzI0OCU3QzQ4NTI2OTI0N183MDclN0NodHRwJTNBJTJGJTJGMTAuMTAwLjIyLjI0JTNBODE4MSUyRnNpZ25hbCUyRnZhbGlkYXRlZFNpZ25hbCUyRmluZGV4JTdDVmFsaWRhdGVkJTIwU2lnbmFscyU3QzE1ODA4ODUyNzM1MDMlN0MlN0M=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>0</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-OneAgent-JS-Injection" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dHJ1ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZHRDb29raWU9dl80X3Nydl8yX3NuX0I3OEVENDhGQ0E0QUY4MkZFRTAzQzlGRDBFNjJCMzM0X3BlcmNfMTAwMDAwX29sXzBfbXVsXzE7IFBhdGg9Lw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Frame-Options" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>REVOWQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Application-Context" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb246cHJvZHVjdGlvbjo3MTcx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsIG5vLXN0b3Jl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Language" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAwNyBGZWIgMjAyMCAxNDoxMjoyNCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KWC1PbmVBZ2VudC1KUy1JbmplY3Rpb246IHRydWUNClNldC1Db29raWU6IGR0Q29va2llPXZfNF9zcnZfMl9zbl9CNzhFRDQ4RkNBNEFGODJGRUUwM0M5RkQwRTYyQjMzNF9wZXJjXzEwMDAwMF9vbF8wX211bF8xOyBQYXRoPS8NClgtRnJhbWUtT3B0aW9uczogREVOWQ0KWC1BcHBsaWNhdGlvbi1Db250ZXh0OiBhcHBsaWNhdGlvbjpwcm9kdWN0aW9uOjcxNzENCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZQ0KUHJhZ21hOiBuby1jYWNoZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MYW5ndWFnZTogZW4tVVMNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpEYXRlOiBGcmksIDA3IEZlYiAyMDIwIDE0OjEyOjI0IEdNVA0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>PCFkb2N0eXBlIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIAoKPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiPgo8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UsY2hyb21lPTEiPgo8dGl0bGU+VmFsaWRhdGVkIFNpZ25hbHM8L3RpdGxlPgo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvcnV4aXRhZ2VudGpzX0lDQTJTVmZxcnVfMTAxODMyMDAxMTQxMjA4NTIuanMiIGRhdGEtZHRjb25maWc9ImFwcD1lYTdjNGI1OWYyN2Q0M2VifHNybXM9MSwxLCwsfHV4cmdjbT0xMDAsMjUsMzAwLDM7MTAwLDI1LDMwMCwzfGZlYXR1cmVIYXNoPUlDQTJTVmZxcnV8ZHB2Yz0xfGxhc3RNb2RpZmljYXRpb249MTU4MDI4NzQ0NzQ5N3xkdFZlcnNpb249MTAxODMyMDAxMTQxMjA4NTJ8dHA9NTAwLDUwLDAsMXxyZG50PTF8dXhyZ2NlPTF8dXhkY3c9MTUwMHxicD0yfGFnZW50VXJpPS9zaWduYWwvcnV4aXRhZ2VudGpzX0lDQTJTVmZxcnVfMTAxODMyMDAxMTQxMjA4NTIuanN8cmVwb3J0VXJsPS9zaWduYWwvcmJfYmY3MTAzMXhyYXxyaWQ9UklEXzE5ODU2MDM3NjZ8cnBpZD0tMzAzMDg2NDI1Ij48L3NjcmlwdD48bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9zaWduYWwvYXNzZXRzL2Zhdmljb24tMmJhMDBmZDQwZmFjYTNhYzNjMmU4MTBhNzQxMmJjZWIuaWNvIiB0eXBlPSJpbWFnZS94LWljb24iPgo8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii9zaWduYWwvYXNzZXRzL2FwcGxlLXRvdWNoLWljb24ucG5nIj4KPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTE0eDExNCIgaHJlZj0iL3NpZ25hbC9hc3NldHMvYXBwbGUtdG91Y2gtaWNvbi1yZXRpbmEucG5nIj4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy9hcHBsaWNhdGlvbi1iM2Y0OGI4M2Y5YjdjMmQzY2JmMDFlYzJhNDY2NDU1MS5jc3MiLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy90aGVtZV9ncmFkaWVudF9ibHVlLTgyYjg2NjNkZWY3MmM5Y2VmZjMyZDYxZTBiNGE1MjUzLmNzcyIvPgo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvcHZzX2FwcF9jc3MtMWIxMmFiZWE2NjAxMDg1YzNlZDk5OGM4YzFkMTMzMDQuY3NzIi8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9wdnNfNTA4Yy1mZDRhMzAxMjM1ZGZlZmY0MTdkOTZiZWQ2NGU4NDI5ZC5jc3MiLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy9tZGktZm9udHMvY3NzL21hdGVyaWFsZGVzaWduaWNvbnMtMmYyNTRjZmRiMmIyM2JjZjU5NmFiNzY2NTc0YjM2NzUuY3NzIi8+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9tb2Rlcm5penIubWluLTIzZmEyOGNlMjc1ODgwNzQ2OTQ1YTIzMDUwNzdlZWJjLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2pxdWVyeS9qcXVlcnktMi4yLjQtOTg2YjdhZjgxM2FkZWFmOWU1ODllZjIwYmNjOTdiYjAuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvanF1ZXJ5LmkxOG4tNjE0MDY5MjJlMDU4MDRlNGFiZThjODM2MGVjODYyZmEuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvdW5kZXJzY29yZS91bmRlcnNjb3JlLm1pbi1lNmQ0MWNkNzE0NjczMDM1YTdmOGE2NWMzMGYzZGNiMS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9qcXVlcnktdWkvanF1ZXJ5LXVpLm1pbi1iMDU4MmYyZDI3ZmRjNjc2YzM0NjgxZTBjOTZhYWMwYy5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9ib290c3RyYXAvYm9vdHN0cmFwLm1pbi0zZjZhYTc3ZjQ3NjhkZTI2N2MzNWE5NjAyODU5OWNlMy5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9tb21lbnQvbW9tZW50LTQzNGFhYTE3MDQ4OTA3NjYxMjUxMDhjOTRlZmJiNTBjLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL21vbWVudC9tb21lbnRsb2NhbGVzLWJkMDQwN2ZhYWRmMDE1YjBjMGIwZDQ5YjgzMWFlYjdiLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL21vbWVudC9tb21lbnRUaW1lem9uZXMtd2l0aC1kYXRhLWMxNWVjM2UyN2EzMjYzNTU2ZmRiYjk2YjYxZjkyMDZmLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL3BvcG92ZXIvcG9wb3Zlci5taW4tYTQ4ZDI4ZTI4OWM2OTMyMDQyZmZhMGFiMDVlN2JmNjguanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvZnVlbHV4L2Z1ZWx1eC5taW4tZDMwZmIxMzNhMjQ5M2ZhZGMzOGZhYWJmM2YyMjZiYzQuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvc2VsZWN0Mi9zZWxlY3QyLTkxMTgzMmRmZmRmZmI5ZTdiYWZiMzg0MTJhNjhmNDQ1LmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2RhdGF0YWJsZXMvanF1ZXJ5LmRhdGFUYWJsZXNfY3VzdG9tLThkYWQ4MmY3OTA4N2JjN2MyOGVlYjliNDAzZTc1NmI4LmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2RhdGF0YWJsZXMvZGF0YVRhYmxlcy5ib290c3RyYXAtOTNlMGIyZjM1NzY0ODRiNDIyZjZlNGEyOWIzZTYwMzcuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvZGF0YXRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcFBhZ2luYXRpb24tZDEzM2RhM2YzNTcwMDM2Zjg1MzIyMDdhZmZhNzhiZDkuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvZGF0YXRhYmxlcy9kYXRldGltZS1tb21lbnQtM2ZhM2ZjOGVhZjYwYWJlM2ZhZTJiYWUyZmI0MzI4YjAuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvZGF0YXRhYmxlcy9kYXRhVGFibGVzLmZpeGVkQ29sdW1ucy5taW4tYWNjOTBhNzAwYjY5MTUwMzgwNzU5NTY3MTg4YThjZDAuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvc3Bpbm5lci9zcGlubmVyLm1pbi02ZjZlYWI3MmZkMjUzMWJlYTc1MTRjYzBkOTgzMDY2NS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9tdWx0aXNlbGVjdC9qcXVlcnkubXVsdGktc2VsZWN0Mi4wLWMyNjQ5YTUxOGQwOTRkYWM4ZDNlNjZhYWJhMWU0NTAxLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL3dvdy93b3cubWluLTIzN2U2NmQ3MjA4NjFmM2NjOTllZTQ0NDg4N2I3YzMyLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL21vYmlsZS9mYXN0Y2xpY2stYzc0NjA2ODA5NDY0MTE2ZjM0MTMwNjRiMGUyMDAwMjMuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvbW9iaWxlL2RldGVjdC1mZDU2MTczYjlmMTU3NDYxMjAyNmNhNGJkMGY5Y2UyMC5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9qcXVlcnkvanF1ZXJ5Lm5pY2VzY3JvbGwtMDllM2NhOTg4OTQ5OWNmYjE1MjcxYWQ4ZGM1MWY4NDIuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvanF1ZXJ5L2pxdWVyeS5zbGltc2Nyb2xsLTZhMzE0YjVmMDM0NGJmN2VmOGUxZTBjOTQ4YmI3NWY5LmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2pxdWVyeS9qcXVlcnkuYmxvY2tVSS03YWE5YWM4ZTM0ZDk3YTk0NWRiZjQ2N2Q5OWZkYTgzNC5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9qcXVlcnkvanF1ZXJ5LnNjcm9sbFRvLm1pbi0yNDBiOGQ1NDY2MWM1ZTA1MDBiOTZiOTU5NGQ2MGI2Mi5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9ub3RpZnlqcy9kaXN0L25vdGlmeS5taW4tMWRiYTYxZmVjMTVhNWQ3MTgxNGIyYzJjYjY5ZjY1YmYuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvbm90aWZpY2F0aW9ucy9ub3RpZnktbWV0cm8tOWExY2YyNWE5NTZiNjAxYWVkZDQ4NmM3Nzk5ODZkZjcuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvc3dlZXQtYWxlcnQvc3dlZXQtYWxlcnQubWluLTc5MjU5OGYxZTZiYWM5YjRmN2NjNmYwNjBhZTZiNDU0LmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL3N3ZWV0LWFsZXJ0L3J4LW5vdGlmeS1kYjA1MjgyNzQxMzA1MTZjMjcxMzg5Y2NjYWM2NWUxNy5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9ib290c3RyYXBVcGxvYWRlci9ib290c3RyYXAtdXBsb2FkZXItMjY1ZTM4N2EzZWM1ODk3M2FiZGZhZTA0YTc5ODYyYjIuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvd2F5cG9pbnRzL2xpYi9qcXVlcnkud2F5cG9pbnRzLm1pbi00NDcxOTk5ZWYxYjgzYTk0ZDQxZDNjZWJiODg3YzM0OS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9jb3VudGVydXAvanF1ZXJ5LmNvdW50ZXJ1cC5taW4tODZmNTJmNDdkNGMzMjUyNjFiZjdkMzZiMDlkY2YyMTYuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvaGFuZGxlYmFyL2hhbmRsZWJhcnMtdjQuMC41LThhZDQyNjNmODFjNzE0YWRhNDk4NWFmZmI2ODdmMTJiLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2Jvb3RzdHJhcC1zd2l0Y2gvYm9vdHN0cmFwLXN3aXRjaC03MzJkMTQ5OTBkYmE3ZjRmZmY2YjViNDQxMTc3YzkwNS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9qcXVlcnkuYmEtdGhyb3R0bGUtZGVib3VuY2UtODc2ZjY5ODhmMGEyNDBmZDljNDlmMDljNWQ3MWI5OTQuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvY29tbW9uL2pxdWVyeS5jb3JlLTJmNjNlYTJjZTIxOTczMDMxYjk2ODVlMzZlYmEwNzMxLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcGxpY2F0aW9uLTQxZTg1YjhiMDlhM2ZkZjY0MmM0OWE4NWE0MDljNjcxLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2Jvd2VyX2NvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3dlYmNvbXBvbmVudHMtbGl0ZS1jODA2NDcwYWMzMTgyZWVkYmI5ZGU2NzdmZGU5MjJkZS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9ib290c3RyYXAtbXVsdGlzZWxlY3QvYm9vdHN0cmFwLW11bHRpc2VsZWN0LTdiNTAwOTY2Nzk0NDc4ZTI3OTJlZWEwNjU5ZTBhYTk2LmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2RhdGF0YWJsZS9kYXRhVGFibGVzLmJ1dHRvbnMubWluLTk5ZWYyYTI5ZmM1YjUxYTZmOGYzOTI5NzdjMmUzNGIxLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2RhdGF0YWJsZXMvYnV0dG9ucy5ib290c3RyYXAtYWNhYzUxZDVjZjE2MmJkMTRmNDRhZDY2YTZmMjc1ZjUuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvd2F2ZXMvd2F2ZXMtMmQyMGVmZThiNzIyOGJiYzk2Mzk0NGFjMjJjOTY2N2MuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9yeFRpdGxlT3B0aW9ucy0xMjc5MTQ2ZjY2MTczNWQ5ZTk0Y2RlMjc0MzQyYjI1Yy5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL21lbnUtZTlmOWM3OWRlMTFlODljZmIwZDJmN2FlMWNkODA1NTQuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9wdnNfYXBwX3dpZGdldC0xZjdiYjIzYWZlY2JlMGI1ZmE5NWViMjM5ODRkZjc5Yi5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL3VzZXJHcm91cFNlbGVjdC01NTNiNWFlN2VmMTAzY2E1ZjhiN2Y1YmVhOTQ4ZWViYi5qcyIgPjwvc2NyaXB0PgoKPHNjcmlwdD4KICAgIAogICAgdXNlckxvY2FsZSA9ICJlbiI7CiAgICBtb21lbnQubG9jYWxlKHVzZXJMb2NhbGUpOwogICAgdXNlclRpbWVab25lID0gIlVUQyI7CiAgICB2YXIgbG9nZ2VkSW5Vc2VyID0gICJiaGFneWEiOwogICAgbWF4VXBsb2FkTGltaXQgPSAiNTAwMDAwMDAiOwogICAgdXNlcklkID0gIjY5NzkiCiAgICAKPC9zY3JpcHQ+CgogICAgPG1ldGEgbmFtZT0iX2NzcmYiIGNvbnRlbnQ9IjM4Nzg4YTc1LTY5YmEtNDQzOC1iNzJkLTk2ZGU5NGViNDYxMyIvPgogICAgPCEtLSBkZWZhdWx0IGhlYWRlciBuYW1lIGlzIFgtQ1NSRi1UT0tFTiAtLT4KICAgIDxtZXRhIG5hbWU9Il9jc3JmX2hlYWRlciIgY29udGVudD0iWC1DU1JGLVRPS0VOIi8+CiAgICA8bWV0YSBuYW1lPSJfY3NyZl9wYXJhbWV0ZXIiIGNvbnRlbnQ9Il9jc3JmIi8+CgogICAgCiAgICA8bWV0YSBuYW1lPSJsYXlvdXQiIGNvbnRlbnQ9Im1haW4iLz4KICAgIAogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy92YWxpZGF0ZWRfc2lnbmFsL2Fzc2Vzc21lbnRfZGljdGlvbmFyeS03MzI0ZTdlZTlhZTBmNTFmMDRhZmE2OGJjZGI5NWFiNC5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KCiAgICAgICAgdmFyIHNpbmdsZUNhc2VVcGRhdGVKdXN0aWZpY2F0aW9uVXJsID0gIi9zaWduYWwvY2FzZUhpc3RvcnkvdXBkYXRlSnVzdGlmaWNhdGlvbiI7CiAgICAgICAgdmFyIGFnZ1VwZGF0ZUp1c3RpZmljYXRpb25VcmwgPSAiL3NpZ25hbC9wcm9kdWN0RXZlbnRIaXN0b3J5L3VwZGF0ZUp1c3RpZmljYXRpb24iOwoKICAgICAgICB2YXIgVkFMSURBVEVEID0gewogICAgICAgICAgICBzY2FMaXN0VXJsOiAiL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvc2luZ2xlQ2FzZUFsZXJ0TGlzdCIsCiAgICAgICAgICAgIGFjYUxpc3RVcmw6ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9hZ2dyZWdhdGVDYXNlQWxlcnRMaXN0IiwKICAgICAgICAgICAgbGl0ZXJhdHVyZUFsZXJ0TGlzdFVybDogIi9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2xpdGVyYXR1cmVBbGVydExpc3QiLAogICAgICAgICAgICBhZEhvY0xpc3RVcmw6ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9hZEhvY0FsZXJ0TGlzdCIsCiAgICAgICAgICAgIGFzc2Vzc21lbnRGaWx0ZXJVcmw6ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9hZ2dyZWdhdGVDYXNlQWxlcnRQcm9kdWN0QW5kRXZlbnRMaXN0IgogICAgICAgIH07CiAgICAgICAgdmFyIGlzQ29tbWVudEFkZGVkID0gdHJ1ZTsKICAgICAgICB2YXIgdGVtcGxhdGVfbGlzdF91cmwgPSAiL3NpZ25hbC90ZW1wbGF0ZS9pbmRleCI7CiAgICAgICAgdmFyIGdlbmVyYXRlQ2FzZVNlcmllc1VybCA9ICIvc2lnbmFsL2FnZ3JlZ2F0ZUNhc2VBbGVydC9nZW5lcmF0ZUNhc2VTZXJpZXMiOwogICAgICAgIHZhciBjYXNlRGV0YWlsVXJsID0gIi9zaWduYWwvY2FzZUluZm8vY2FzZURldGFpbCI7CiAgICAgICAgdmFyIGdldFdvcmtmbG93VXJsID0gIi9zaWduYWwvd29ya2Zsb3cvZ2V0V29ya2Zsb3dTdGF0ZSI7CiAgICAgICAgdmFyIHF1YW50aXRhdGl2ZVNjb3Jlc1VybCA9ICIvc2lnbmFsL3Byb2R1Y3RFdmVudEhpc3RvcnkvbGlzdFNpbmdsZVBFSGlzdHByeSI7CiAgICAgICAgdmFyIGNhc2VIaXN0b3J5VXJsID0gIi9zaWduYWwvY2FzZUhpc3RvcnkvbGlzdENhc2VIaXN0b3J5IjsKICAgICAgICB2YXIgY2FzZUhpc3RvcnlTdXNwZWN0VXJsID0gIi9zaWduYWwvY2FzZUhpc3RvcnkvbGlzdFN1c3BlY3RQcm9kQ2FzZUhpc3RvcnkiOwogICAgICAgIHZhciBwcm9kdWN0RXZlbnRIaXN0b3J5VXJsID0gIi9zaWduYWwvcHJvZHVjdEV2ZW50SGlzdG9yeS9saXN0UHJvZHVjdEV2ZW50SGlzdG9yeSI7CiAgICAgICAgdmFyIGdldFByaW9yaXR5VXJsID0gIi9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2dldFByaW9yaXRpZXMiOwogICAgICAgIHZhciBhY3Rpdml0eVVybCA9ICIvc2lnbmFsL2FjdGl2aXR5L2FjdGl2aXRpZXNCeVNpZ25hbC8xMjE5NjUwIjsKICAgICAgICB2YXIgcHJldmlvdXNBc3Nlc3NtZW50VXJsID0gIi9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2xpc3RQcmV2aW91c1NpZ25hbHMvMTIxOTY1MCI7CiAgICAgICAgdmFyIGdyYXBoUmVwb3J0UmVzdFVybCA9ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9ncmFwaFJlcG9ydCI7CiAgICAgICAgdmFyIHNhdmVBc3Nlc3NtZW50Tm90ZXNVcmwgPSAiL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvc2F2ZUFzc2Vzc21lbnROb3RlcyI7CiAgICAgICAgdmFyIGZldGNoQXNzZXNzbWVudE5vdGVzVXJsID0gIi9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2ZldGNoQXNzZXNzbWVudE5vdGVzIjsKICAgICAgICB2YXIgeEF4aXMgPSBbIkphbi0yMDE3IiwiRmViLTIwMTciLCJNYXItMjAxNyIsIkFwci0yMDE3IiwiTWF5LTIwMTciLCJKdW4tMjAxNyIsIkp1bC0yMDE3Il07CiAgICAgICAgdmFyIHlBeGlzID0gWyJCbG9vZCBhbmQgbHltcGhhdGljIHN5c3RlbSBkaXNvcmRlcnMiLCJDYXJkaWFjIGRpc29yZGVycyIsIkNvbmdlbml0YWwsIGZhbWlsaWFsIGFuZCBnZW5ldGljIGRpc29yZGVycyIsIkVhciBhbmQgbGFieXJpbnRoIGRpc29yZGVycyIsIkVuZG9jcmluZSBkaXNvcmRlcnMiLCJFeWUgZGlzb3JkZXJzIiwiR2FzdHJvaW50ZXN0aW5hbCBkaXNvcmRlcnMiLCJHZW5lcmFsIGRpc29yZGVycyBhbmQgYWRtaW5pc3RyYXRpb24gc2l0ZSBjb25kaXRpb25zIiwiSGVwYXRvYmlsaWFyeSBkaXNvcmRlcnMiLCJJbW11bmUgc3lzdGVtIGRpc29yZGVycyIsIkluZmVjdGlvbnMgYW5kIGluZmVzdGF0aW9ucyIsIkluanVyeSwgcG9pc29uaW5nIGFuZCBwcm9jZWR1cmFsIGNvbXBsaWNhdGlvbnMiLCJJbnZlc3RpZ2F0aW9ucyIsIk1ldGFib2xpc20gYW5kIG51dHJpdGlvbiBkaXNvcmRlcnMiLCJNdXNjdWxvc2tlbGV0YWwgYW5kIGNvbm5lY3RpdmUgdGlzc3VlIGRpc29yZGVycyIsIk5lb3BsYXNtcyBiZW5pZ24sIG1hbGlnbmFudCBhbmQgdW5zcGVjaWZpZWQgKGluY2wgY3lzdHMgYW5kIHBvbHlwcykiLCJOZXJ2b3VzIHN5c3RlbSBkaXNvcmRlcnMiLCJQcmVnbmFuY3ksIHB1ZXJwZXJpdW0gYW5kIHBlcmluYXRhbCBjb25kaXRpb25zIiwiUHJvZHVjdCBpc3N1ZXMiLCJQc3ljaGlhdHJpYyBkaXNvcmRlcnMiLCJSZW5hbCBhbmQgdXJpbmFyeSBkaXNvcmRlcnMiLCJSZXByb2R1Y3RpdmUgc3lzdGVtIGFuZCBicmVhc3QgZGlzb3JkZXJzIiwiUmVzcGlyYXRvcnksIHRob3JhY2ljIGFuZCBtZWRpYXN0aW5hbCBkaXNvcmRlcnMiLCJTa2luIGFuZCBzdWJjdXRhbmVvdXMgdGlzc3VlIGRpc29yZGVycyIsIlNvY2lhbCBjaXJjdW1zdGFuY2VzIiwiU3VyZ2ljYWwgYW5kIG1lZGljYWwgcHJvY2VkdXJlcyIsIlZhc2N1bGFyIGRpc29yZGVycyJdOwogICAgICAgIHZhciBjaGFydERhdGEgPSBbWzAsMCw5XSxbMCwxLDE2XSxbMCwyLDE4XSxbMCwzLDE5XSxbMCw0LDE4XSxbMCw1LDEzXSxbMCw2LDRdLFswLDcsMTBdLFswLDgsMTldLFswLDksMTJdLFswLDEwLDQ0XSxbMCwxMSw2Ml0sWzAsMTIsMTJdLFswLDEzLDcyXSxbMCwxNCw4XSxbMCwxNSwxNV0sWzAsMTYsNDNdLFswLDE3LDE4XSxbMCwxOCwxNF0sWzAsMTksNF0sWzAsMjAsMTRdLFswLDIxLDY0XSxbMCwyMiwzXSxbMCwyMywzNV0sWzAsMjQsMjVdLFswLDI1LDUyXSxbMSwwLDI1XSxbMSwxLDJdLFsxLDIsNTBdLFsxLDMsMjddLFsxLDQsNTJdLFsxLDUsOV0sWzEsNiwxM10sWzEsNywxOF0sWzEsOCwxOF0sWzEsOSw4XSxbMSwxMCwxXSxbMSwxMSwxN10sWzEsMTIsMTRdLFsxLDEzLDMwXSxbMSwxNCwyMF0sWzEsMTUsMzRdLFsxLDE2LDE0XSxbMSwxNywxNl0sWzEsMTgsMTJdLFsxLDE5LDQ0XSxbMSwyMCwyMl0sWzEsMjEsNF0sWzEsMjIsMzJdLFsxLDIzLDY5XSxbMSwyNCwxOF0sWzEsMjUsMTJdLFsyLDAsMzRdLFsyLDEsMTVdLFsyLDIsNDRdLFsyLDMsMTRdLFsyLDQsMzhdLFsyLDUsMTldLFsyLDYsMThdLFsyLDcsMTJdLFsyLDgsMjJdLFsyLDksMzddLFsyLDEwLDIyXSxbMiwxMSwzMV0sWzIsMTIsMTNdLFsyLDEzLDIzXSxbMiwxNCw3MF0sWzIsMTUsMTJdLFsyLDE2LDI0XSxbMiwxNywzNl0sWzIsMTgsMzJdLFsyLDE5LDcwXSxbMiwyMCwxN10sWzIsMjEsMTddLFsyLDIyLDE0XSxbMiwyMywzNl0sWzIsMjQsOF0sWzIsMjUsNTBdLFszLDAsMTBdLFszLDEsMzldLFszLDIsMzddLFszLDMsNDFdLFszLDQsMjNdLFszLDUsMTZdLFszLDYsMTddLFszLDcsMThdLFszLDgsMTldLFszLDksNl0sWzMsMTAsMjRdLFszLDExLDE3XSxbMywxMiwyNl0sWzMsMTMsNl0sWzMsMTQsMzJdLFszLDE1LDI2XSxbMywxNiwxNV0sWzMsMTcsN10sWzMsMTgsMTFdLFszLDE5LDQwXSxbMywyMCw2Ml0sWzMsMjEsMzJdLFszLDIyLDI1XSxbMywyMyw3XSxbMywyNCwzNF0sWzMsMjUsMThdLFs0LDAsMjRdLFs0LDEsMzhdLFs0LDIsN10sWzQsMywzOF0sWzQsNCwxNF0sWzQsNSw3XSxbNCw2LDRdLFs0LDcsNDJdLFs0LDgsMTFdLFs0LDksMzBdLFs0LDEwLDE2XSxbNCwxMSw0OV0sWzQsMTIsMjddLFs0LDEzLDExXSxbNCwxNCwxOV0sWzQsMTUsNDFdLFs0LDE2LDI0XSxbNCwxNyw3NF0sWzQsMTgsMjldLFs0LDE5LDYwXSxbNCwyMCwxM10sWzQsMjEsMTVdLFs0LDIyLDI1XSxbNCwyMywyNV0sWzQsMjQsMTBdLFs0LDI1LDE0XSxbNSwwLDE4XSxbNSwxLDE3XSxbNSwyLDM3XSxbNSwzLDE3XSxbNSw0LDhdLFs1LDUsMTJdLFs1LDYsNTVdLFs1LDcsMzNdLFs1LDgsMTldLFs1LDksMzFdLFs1LDEwLDM0XSxbNSwxMSw2XSxbNSwxMiwyMl0sWzUsMTMsMTddLFs1LDE0LDE4XSxbNSwxNSw0Ml0sWzUsMTYsOF0sWzUsMTcsMTRdLFs1LDE4LDM0XSxbNSwxOSw3XSxbNSwyMCwxMl0sWzUsMjEsNV0sWzUsMjIsOF0sWzUsMjMsMThdLFs1LDI0LDIxXSxbNSwyNSwxMF0sWzYsMCwzNl0sWzYsMSwzNV0sWzYsMiwyNV0sWzYsMyw3XSxbNiw0LDUyXSxbNiw1LDM2XSxbNiw2LDYwXSxbNiw3LDczXSxbNiw4LDI5XSxbNiw5LDEyXSxbNiwxMCwyOF0sWzYsMTEsM10sWzYsMTIsOV0sWzYsMTMsNF0sWzYsMTQsMTBdLFs2LDE1LDM3XSxbNiwxNiw0M10sWzYsMTcsOF0sWzYsMTgsNF0sWzYsMTksMTBdLFs2LDIwLDZdLFs2LDIxLDddLFs2LDIyLDVdLFs2LDIzLDE0XSxbNiwyNCwzOF0sWzYsMjUsNTBdXTsKICAgICAgICB2YXIgcmVxdWlyZWQgPSBbIkNhc2VzIGFuZCBQRUMgSW5mb3JtYXRpb24iLCAiQ29tbWVudHMiLCAiQWN0aW9ucyBUYWtlbiIsICJNZWV0aW5nIE1pbnV0ZXMiLCAiQXR0YWNoZWQgRG9jdW1lbnRzIiwgIkFwcGVuZGl4Il07CiAgICAgICAgdmFyIGlnbm9yZWQgPSBbXTsKICAgICAgICB2YXIgZG1zRm9sZGVyc1VybCA9ICIvc2lnbmFsL2NvbnRyb2xQYW5lbC9nZXREbXNGb2xkZXJzIjsKICAgICAgICB2YXIgZmV0Y2hTaWduYWxTdGF0dXNVcmwgPSAiL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvZmV0Y2hTaWduYWxTdGF0dXMvMTIxOTY1MCI7CiAgICAgICAgdmFyIGNyZWF0ZVNpbmdsZUNhc2VBbGVydCA9ICIvc2lnbmFsL3NpbmdsZUNhc2VBbGVydC9jcmVhdGUiOwogICAgICAgIHZhciBwdnJJbnRlZ3JhdGUgPSAidHJ1ZSI7CiAgICAgICAgdmFyIHVwZGF0ZVNpZ25hbFVybCA9ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC91cGRhdGUiOwogICAgICAgIHZhciBzaW5nbGVDYXNlRGV0YWlsc1VybCA9ICIvc2lnbmFsL3NpbmdsZUNhc2VBbGVydC9kZXRhaWxzIjsKICAgICAgICB2YXIgc2luZ2xlQ2FzZU9uRGVtYW5kRGV0YWlsc1VybCA9ICIvc2lnbmFsL3NpbmdsZUNhc2VBbGVydC9hZGhvY0RldGFpbHMiOwogICAgICAgIHZhciBhZ2dyZWdhdGVDYXNlRGV0YWlsc1VybCA9ICIvc2lnbmFsL2FnZ3JlZ2F0ZUNhc2VBbGVydC9kZXRhaWxzIjsKICAgICAgICB2YXIgYWdncmVnYXRlQ2FzZU9uRGVtYW5kRGV0YWlsc1VybCA9ICIvc2lnbmFsL2FnZ3JlZ2F0ZUNhc2VBbGVydC9hZGhvY0RldGFpbHMiOwogICAgICAgIHZhciB0YWdEZXRhaWxzVXJsID0gIi9zaWduYWwvYWdncmVnYXRlQ2FzZUFsZXJ0L2RldGFpbHMiOwogICAgICAgIHZhciBldmRhc0RldGFpbHNVcmwgPSAiL3NpZ25hbC9ldmRhc0FsZXJ0L2RldGFpbHMiOwogICAgICAgIHZhciBldmRhc09uRGVtYW5kRGV0YWlsc1VybCA9ICIvc2lnbmFsL2V2ZGFzQWxlcnQvYWRob2NEZXRhaWxzIjsKICAgICAgICB2YXIgZGV0YWlsc1VybCA9ICIvc2lnbmFsL2FnZ3JlZ2F0ZUNhc2VBbGVydC9kZXRhaWxzIjsKICAgICAgICB2YXIgbGlua2VkQ29uZmlndXJhdGlvblVybCA9ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9mZXRjaExpbmtlZENvbmZpZ3VyYXRpb24vMTIxOTY1MCI7CiAgICAgICAgdmFyIGNoYW5nZVByaW9yaXR5VXJsID0gIi9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2NoYW5nZVByaW9yaXR5T2ZTaWduYWwiOwogICAgICAgIHZhciBjaGFuZ2VEaXNwb3NpdGlvblVybCA9ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9jaGFuZ2VEaXNwb3NpdGlvbiI7CiAgICAgICAgdmFyIGRpc3Bvc2l0aW9uSW5jb21pbmdPdXRnb2luZ01hcCA9IEpTT04ucGFyc2UoJ3siTmV3IjpbeyJkaXNwbGF5TmFtZSI6IlJldmlldyBSZXF1aXJlZCIsImFiYnJldmlhdGlvbiI6IlJSIiwiY29sb3JDb2RlIjoiIzVjYjg1YyIsImlkIjoxMywidmFsaWRhdGVkQ29uZmlybWVkIjpmYWxzZSwiaXNBcHByb3ZhbFJlcXVpcmVkIjpmYWxzZSwiZGlzcG9zaXRpb25DbG9zZWRTdGF0dXMiOmZhbHNlLCJpc1Jldmlld2VkIjpmYWxzZX0seyJkaXNwbGF5TmFtZSI6IlZhbGlkYXRlZCBPYnNlcnZhdGlvbiIsImFiYnJldmlhdGlvbiI6IlZPIiwiY29sb3JDb2RlIjoiI2Q5NTM0ZiIsImlkIjoyNSwidmFsaWRhdGVkQ29uZmlybWVkIjp0cnVlLCJpc0FwcHJvdmFsUmVxdWlyZWQiOmZhbHNlLCJkaXNwb3NpdGlvbkNsb3NlZFN0YXR1cyI6ZmFsc2UsImlzUmV2aWV3ZWQiOmZhbHNlfSx7ImRpc3BsYXlOYW1lIjoiTm9uLVZhbGlkYXRlZCBPYnNlcnZhdGlvbiIsImFiYnJldmlhdGlvbiI6Ik5WTyIsImNvbG9yQ29kZSI6IiM1Y2I4NWMiLCJpZCI6MzcsInZhbGlkYXRlZENvbmZpcm1lZCI6ZmFsc2UsImlzQXBwcm92YWxSZXF1aXJlZCI6ZmFsc2UsImRpc3Bvc2l0aW9uQ2xvc2VkU3RhdHVzIjp0cnVlLCJpc1Jldmlld2VkIjpmYWxzZX1dLCJSZXZpZXcgUmVxdWlyZWQiOlt7ImRpc3BsYXlOYW1lIjoiVmFsaWRhdGVkIE9ic2VydmF0aW9uIiwiYWJicmV2aWF0aW9uIjoiVk8iLCJjb2xvckNvZGUiOiIjZDk1MzRmIiwiaWQiOjI1LCJ2YWxpZGF0ZWRDb25maXJtZWQiOnRydWUsImlzQXBwcm92YWxSZXF1aXJlZCI6ZmFsc2UsImRpc3Bvc2l0aW9uQ2xvc2VkU3RhdHVzIjpmYWxzZSwiaXNSZXZpZXdlZCI6ZmFsc2V9LHsiZGlzcGxheU5hbWUiOiJOb24tVmFsaWRhdGVkIE9ic2VydmF0aW9uIiwiYWJicmV2aWF0aW9uIjoiTlZPIiwiY29sb3JDb2RlIjoiIzVjYjg1YyIsImlkIjozNywidmFsaWRhdGVkQ29uZmlybWVkIjpmYWxzZSwiaXNBcHByb3ZhbFJlcXVpcmVkIjpmYWxzZSwiZGlzcG9zaXRpb25DbG9zZWRTdGF0dXMiOnRydWUsImlzUmV2aWV3ZWQiOmZhbHNlfV0sIlZhbGlkYXRlZCBPYnNlcnZhdGlvbiI6W3siZGlzcGxheU5hbWUiOiJDb25maXJtZWQgU2lnbmFsIiwiYWJicmV2aWF0aW9uIjoiQ1MiLCJjb2xvckNvZGUiOiIjZDk1MzRmIiwiaWQiOjQ5LCJ2YWxpZGF0ZWRDb25maXJtZWQiOmZhbHNlLCJpc0FwcHJvdmFsUmVxdWlyZWQiOmZhbHNlLCJkaXNwb3NpdGlvbkNsb3NlZFN0YXR1cyI6ZmFsc2UsImlzUmV2aWV3ZWQiOmZhbHNlfSx7ImRpc3BsYXlOYW1lIjoiUmVmdXRlZCBTaWduYWwiLCJhYmJyZXZpYXRpb24iOiJSUyIsImNvbG9yQ29kZSI6IiM1Y2I4NWMiLCJpZCI6NjEsInZhbGlkYXRlZENvbmZpcm1lZCI6ZmFsc2UsImlzQXBwcm92YWxSZXF1aXJlZCI6ZmFsc2UsImRpc3Bvc2l0aW9uQ2xvc2VkU3RhdHVzIjpmYWxzZSwiaXNSZXZpZXdlZCI6ZmFsc2V9LHsiZGlzcGxheU5hbWUiOiJDb250aW51ZWQgTW9uaXRvcmluZyIsImFiYnJldmlhdGlvbiI6IkNNIiwiY29sb3JDb2RlIjoiIzMzN2FiNyIsImlkIjo3MywidmFsaWRhdGVkQ29uZmlybWVkIjpmYWxzZSwiaXNBcHByb3ZhbFJlcXVpcmVkIjpmYWxzZSwiZGlzcG9zaXRpb25DbG9zZWRTdGF0dXMiOmZhbHNlLCJpc1Jldmlld2VkIjpmYWxzZX1dLCJDb250aW51ZWQgTW9uaXRvcmluZyI6W3siZGlzcGxheU5hbWUiOiJDb25maXJtZWQgU2lnbmFsIiwiYWJicmV2aWF0aW9uIjoiQ1MiLCJjb2xvckNvZGUiOiIjZDk1MzRmIiwiaWQiOjQ5LCJ2YWxpZGF0ZWRDb25maXJtZWQiOmZhbHNlLCJpc0FwcHJvdmFsUmVxdWlyZWQiOmZhbHNlLCJkaXNwb3NpdGlvbkNsb3NlZFN0YXR1cyI6ZmFsc2UsImlzUmV2aWV3ZWQiOmZhbHNlfSx7ImRpc3BsYXlOYW1lIjoiUmVmdXRlZCBTaWduYWwiLCJhYmJyZXZpYXRpb24iOiJSUyIsImNvbG9yQ29kZSI6IiM1Y2I4NWMiLCJpZCI6NjEsInZhbGlkYXRlZENvbmZpcm1lZCI6ZmFsc2UsImlzQXBwcm92YWxSZXF1aXJlZCI6ZmFsc2UsImRpc3Bvc2l0aW9uQ2xvc2VkU3RhdHVzIjpmYWxzZSwiaXNSZXZpZXdlZCI6ZmFsc2V9XSwiQ29uZmlybWVkIFNpZ25hbCI6W3siZGlzcGxheU5hbWUiOiJDb21tdW5pY2F0ZWQgUG90ZW50aWFsIFJpc2socykgYW5kIFJpc2sgTWluaW1pemF0aW9uIEFjdGlvbnMiLCJhYmJyZXZpYXRpb24iOiJDUFIiLCJjb2xvckNvZGUiOiIjMzM3YWI3IiwiaWQiOjg1LCJ2YWxpZGF0ZWRDb25maXJtZWQiOmZhbHNlLCJpc0FwcHJvdmFsUmVxdWlyZWQiOmZhbHNlLCJkaXNwb3NpdGlvbkNsb3NlZFN0YXR1cyI6ZmFsc2UsImlzUmV2aWV3ZWQiOmZhbHNlfV0sIlJlZnV0ZWQgU2lnbmFsIjpbeyJkaXNwbGF5TmFtZSI6IkNsb3NlZCAtIFJlZnV0ZWQgU2lnbmFsIiwiYWJicmV2aWF0aW9uIjoiQ1JTIiwiY29sb3JDb2RlIjoiIzdiN2Y4ZSIsImlkIjo5NywidmFsaWRhdGVkQ29uZmlybWVkIjpmYWxzZSwiaXNBcHByb3ZhbFJlcXVpcmVkIjpmYWxzZSwiZGlzcG9zaXRpb25DbG9zZWRTdGF0dXMiOnRydWUsImlzUmV2aWV3ZWQiOmZhbHNlfV0sIkNvbW11bmljYXRlZCBQb3RlbnRpYWwgUmlzayhzKSBhbmQgUmlzayBNaW5pbWl6YXRpb24gQWN0aW9ucyI6W3siZGlzcGxheU5hbWUiOiJDbG9zZWQgLSBDb25maXJtZWQgU2lnbmFsIiwiYWJicmV2aWF0aW9uIjoiQ0NTIiwiY29sb3JDb2RlIjoiIzdiN2Y4ZSIsImlkIjoxMDksInZhbGlkYXRlZENvbmZpcm1lZCI6ZmFsc2UsImlzQXBwcm92YWxSZXF1aXJlZCI6ZmFsc2UsImRpc3Bvc2l0aW9uQ2xvc2VkU3RhdHVzIjp0cnVlLCJpc1Jldmlld2VkIjpmYWxzZX1dfScpOwogICAgICAgIHZhciBmb3JjZUp1c3RpZmljYXRpb24gPSB0cnVlOwogICAgICAgIHZhciBldmRhc0Nhc2VEZXRhaWxVcmwgPSAiL3NpZ25hbC9jYXNlSW5mby9ldmRhc0Nhc2VEZXRhaWwiOwogICAgICAgIHZhciBmZXRjaERyaWxsRG93bkRhdGFVcmwgPSAiL3NpZ25hbC9ldmRhc0FsZXJ0L2ZldGNoQ2FzZURyaWxsRG93bkRhdGEiOwogICAgICAgIHZhciBwdWJNZWRVcmwgPSAiaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9wdWJtZWQvP3Rlcm09IjsKICAgICAgICB2YXIgYXV0aFVybCA9ICIvc2lnbmFsL3VzZXIvZUF1dGhlbnRpY2F0ZSI7CiAgICAgICAgdmFyIGdldFNtcURyb3Bkb3duTGlzdFVybCA9ICIvc2lnbmFsL2V2ZW50RGljdGlvbmFyeS9nZXRTbXFEcm9wZG93bkxpc3QiOwogICAgICAgIHZhciBvcHRpb25zID0geyBzcGlubmVyUGF0aDoiL3NpZ25hbC9hc3NldHMvc2VsZWN0Mi1zcGlubmVyLTdiOTc3NjA3NmQ1ZmNlZWY0OTkzYjU1YzkzODNkZWRkLmdpZiIgfTsKICAgICAgICB2YXIgc2F2ZVNpZ25hbFN0YXR1c0hpc3RvcnkgPSAiL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvc2F2ZVNpZ25hbFN0YXR1c0hpc3RvcnkiOwogICAgICAgIHZhciByZWZyZXNoU2lnbmFsSGlzdG9yeSA9ICIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9yZWZyZXNoU2lnbmFsSGlzdG9yeT9zaWduYWxJZD0xMjE5NjUwIjsKICAgICAgICB2YXIgYWxsb3dlZFByb2R1Y3RzQXNTYWZldHlMZWFkID0gImZhbHNlIjsKICAgICAgICB2YXIgaXNQcm9kdWN0U2VjdXJpdHkgPSAiZmFsc2UiOwoKICAgICAgICBvcHRpb25zLnN0dWR5ID0gewogICAgICAgICAgICBsZXZlbE5hbWVzOiAiUHJvamVjdCBOdW1iZXIsU3R1ZHkgTnVtYmVyLENlbnRlciIsCiAgICAgICAgICAgIGRpY0NvbHVtbkNvdW50OiAyLAogICAgICAgICAgICBzZWxlY3RVcmw6ICIvc2lnbmFsL3N0dWR5RGljdGlvbmFyeS9nZXRTZWxlY3RlZFN0dWR5IiwKICAgICAgICAgICAgcHJlTGV2ZWxQYXJlbnRzVXJsOiAiL3NpZ25hbC9zdHVkeURpY3Rpb25hcnkvZ2V0UHJlTGV2ZWxTdHVkeVBhcmVudHMiLAogICAgICAgICAgICBzZWFyY2hVcmw6ICIvc2lnbmFsL3N0dWR5RGljdGlvbmFyeS9zZWFyY2hTdHVkaWVzIgogICAgICAgIH07CgogICAgICAgICBvcHRpb25zLmV2ZW50ID0gewogICAgICAgICAgICBsZXZlbE5hbWVzOiAiU09DLEhMR1QsSExULFBULExMVCxTeW5vbnltcyxTTVEgQnJvYWQsU01RIE5hcnJvdyIsCiAgICAgICAgICAgIGRpY0NvbHVtbkNvdW50OiA2LAogICAgICAgICAgICBzZWxlY3RVcmw6ICIvc2lnbmFsL2V2ZW50RGljdGlvbmFyeS9nZXRTZWxlY3RlZEV2ZW50IiwKICAgICAgICAgICAgcHJlTGV2ZWxQYXJlbnRzVXJsOiAiL3NpZ25hbC9ldmVudERpY3Rpb25hcnkvZ2V0UHJlTGV2ZWxFdmVudFBhcmVudHMiLAogICAgICAgICAgICBzZWFyY2hVcmw6ICIvc2lnbmFsL2V2ZW50RGljdGlvbmFyeS9zZWFyY2hFdmVudHMiCiAgICAgICAgfTsKCiAgICAgICAgb3B0aW9ucy5wcm9kdWN0ID0gewogICAgICAgICAgICBsZXZlbE5hbWVzOiAiVGhlcmFwZXV0aWMgZHJ1ZyBjbGFzcyxBY3RpdmUgTW9pZXR5LFByb2R1Y3QgQWN0aXZlIE1vaWV0eSxBY3RpdmUgSW5ncmVkaWVudCxQcm9kdWN0IEFjdGl2ZSBJbmdyZWRpZW50LFByb2R1Y3QgTmFtZSxBcHBsaWNhdGlvbiBOdW1iZXIsVXNlciBBc3NpZ25tZW50LElORCBSZXZpZXdlciIsCiAgICAgICAgICAgIGRpY0NvbHVtbkNvdW50OiA5LAogICAgICAgICAgICBzZWxlY3RVcmw6ICIvc2lnbmFsL3Byb2R1Y3REaWN0aW9uYXJ5L2dldFNlbGVjdGVkSXRlbSIsCiAgICAgICAgICAgIHByZUxldmVsUGFyZW50c1VybDogIi9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0UHJlTGV2ZWxQcm9kdWN0UGFyZW50cyIsCiAgICAgICAgICAgIHNlYXJjaFVybDogIi9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvc2VhcmNoVmlld3MiCiAgICAgICAgfTsKICAgICAgICBpbnRpYWxpemVEaWN0aW9uYXJpZXMob3B0aW9ucyk7CiAgICANCjwvc2NyaXB0Pg0KCgogICAgCgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIj52YXIgYWRkRG1zQ29uZmlndXJhdGlvbiA9ICIvc2lnbmFsL2NvbnRyb2xQYW5lbC9hZGREbXNDb25maWd1cmF0aW9uIjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9kbXMvZG1zQ29uZmlndXJhdGlvbi1kZDEyNmUxNTNkODIzZmVmNjEyYmEyOWIzODI0YjE5My5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy91c2VyR3JvdXBTZWxlY3QtNTUzYjVhZTdlZjEwM2NhNWY4YjdmNWJlYTk0OGVlYmIuanMiID48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2hpZ2hjaGFydHMtNTBhMjUyNTllNmE1ODBiNTYxNDU0ZTgxOTg2ZTQ0ODYuanMiID48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2hpZ2hjaGFydHMvaGlnaGNoYXJ0cy1tb3JlLWYyMTQzNTRjNzVhMzc2ZmQ4Njg0NzI0MmQyNmExMDIzLmpzIiA+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9oaWdoY2hhcnRzL2hpZ2hjaGFydHMtM2QtNjU3NzQwMDhhM2I3OGIzMGEzOTQ1NjhhMjRjNmFmMDkuanMiID48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2hpZ2hjaGFydHMvdGhlbWVzL2dyaWQtcngtYjQzOWJmMTIyYWRkZjEzNWQ0MzA2M2E1M2QzNGY5ZDcuanMiID48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3lhZGNmL2pxdWVyeS5kYXRhVGFibGVzLnlhZGNmLWExM2M5M2MzMDU1ODhiZDAzNDBjNmE5OTAxY2QzNDkyLmpzIiA+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2RhdGFUYWJsZXNBY3Rpb25CdXR0b25zLTUwYTEwNGIzMGNiM2FhNWQyMWViMWYxZjMzZjFkODM1LmpzIiA+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2Nhc2VIaXN0b3J5L2Nhc2VIaXN0b3J5VGFibGUtZjg1ZmIwNzA4YTUyNGE4YTNlOTc5NmY5YTIyZjEyNjYuanMiID48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvdmFsaWRhdGVkX3NpZ25hbC92YWxpZGF0ZWRfc2lnbmFsX2NoYXJ0cy0wMWQ2NTA0YjU3MzE4NDQxYzJkYzM3MzRmNGE0OTM3Yy5qcyIgPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy95YWRjZi9qcXVlcnkuZGF0YVRhYmxlcy55YWRjZi05MjZlNDhkN2ZkMjc0NWYzOTczNTg5MzBhMTYwZjFlOS5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3NpZ25hbC9hc3NldHMvY29tcG9uZW50cy1kOWY4MjAwNDM2MjIxMGI0NmNjZDVlZGY0NzNkODY5MC5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3NpZ25hbC9hc3NldHMvY29uZmlndXJhdGlvbi1hMTYxYjVjNGQ3M2JlM2I4MDY0MzgwYTFhM2IyZDRjYy5jc3MiLz4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvdmFsaWRhdGVkX3NpZ25hbC92YWxpZGF0ZWRfc2lnbmFsX2NyZWF0ZS1jMzU2ZDc5MDI2ODY2NWM4NzI5NDdmMjdhZWExMjRlZS5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy92YWxpZGF0ZWRfc2lnbmFsL2xpbmtlZF9jb25maWd1cmF0aW9ucy1mM2Y2YjRjNzQ4OTcyMjRlN2E0NzMyN2FkN2Q2NTI1My5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL2Jvb3RzdHJhcC1tb2RhbC1wb3BvdmVyL2Jvb3RzdHJhcC1tb2RhbC1wb3BvdmVyLTEzZWZlZmExYzAwYjk0Y2M3MzY5MGViN2Q2NGE3NGM0LmpzIiA+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2Rpc3Bvc2l0aW9uL2Rpc3Bvc2l0aW9uLWNoYW5nZS0yZDJlMjA4NzY3NWFjNWM4NmJhMTI3MWE2ZDUyYmZkMy5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9wcmlvcml0eS9wcmlvcml0eS1jaGFuZ2UtNTYzYmYyZGUwYjg4MWZmY2U2YTEwN2RkZmQ2MWIwYTEuanMiID48L3NjcmlwdD4KICAgIAogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvYWxlcnRfdXRpbHMvZGljdGlvbmFyeS11dGlscy1iMWZjZGFlMmViYWJkYTczYjdiZjIzYTljYzk3MWMyNC5qcyIgPjwvc2NyaXB0PgogICAgCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2FsZXJ0X3V0aWxzL2NvbW1vbl9rZXlfcHJldmVudC1lZjU2MzQ1MjcxMTllOTBjYzI1NzZmMGVmOTU2MDg1Yy5qcyIgPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy92ZW5kb3JVaS9wb3BvdmVyL3BvcG92ZXIubWluLTExMjZlMDU2NzY5MTY3NzViMzk5ZjE2OTMwODViZmNkLmNzcyIvPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvdmVuZG9yVWkvcG9wb3Zlci9wb3BvdmVyLm1pbi1hNDhkMjhlMjg5YzY5MzIwNDJmZmEwYWIwNWU3YmY2OC5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9jb25maWd1cmF0aW9uL2NvcHlQYXN0ZVZhbHVlcy1kZDhhMzRiMGMzY2VhNjIyYzViZjEyYjRiN2IwNzQ3ZS5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9jb25maWd1cmF0aW9uL2RpY3Rpb25hcnlNdWx0aVNlYXJjaC0wYzU2NzM3ZWYzZTU2MjRkOGMzZGM5Yzg4NGUzYWMwNC5qcyIgPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy9jb3B5UGFzdGVNb2RhbC0yM2M0YTU1ZGRlYjc0ZmU3MWI3ZTYzZmE2OTc4YjQyMC5jc3MiLz4KCgoKICAgIDxzdHlsZT4KICAgIC5kcm9wZG93bi1zdWJtZW51IHsKICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICB9CgogICAgLmRyb3Bkb3duLXN1Ym1lbnUgPiAuZHJvcGRvd24tbWVudSB7CiAgICAgICAgdG9wOiAxMHB4OwogICAgICAgIGxlZnQ6IC0xNjBweDsKICAgICAgICBtYXJnaW4tdG9wOiAtNnB4OwogICAgICAgIG1hcmdpbi1sZWZ0OiAtMXB4OwogICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMCA2cHggNnB4IDZweDsKICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDAgNnB4IDZweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAwIDZweCA2cHggNnB4OwogICAgfQoKICAgIC5kcm9wZG93bi1zdWJtZW51OmhvdmVyID4gLmRyb3Bkb3duLW1lbnUgewogICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgfQoKICAgIC5kcm9wZG93bi1zdWJtZW51ID4gYTphZnRlciB7CiAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgY29udGVudDogIiAiOwogICAgICAgIGZsb2F0OiByaWdodDsKICAgICAgICB3aWR0aDogMDsKICAgICAgICBoZWlnaHQ6IDA7CiAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkOwogICAgICAgIGJvcmRlci13aWR0aDogNXB4IDAgNXB4IDVweDsKICAgICAgICBib3JkZXItbGVmdC1jb2xvcjogI2NjYzsKICAgICAgICBtYXJnaW4tdG9wOiA1cHg7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMTBweDsKICAgIH0KCiAgICAuZHJvcGRvd24tc3VibWVudTpob3ZlciA+IGE6YWZ0ZXIgewogICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmOwogICAgfQoKICAgIC5kcm9wZG93bi1zdWJtZW51LnB1bGwtbGVmdCB7CiAgICAgICAgZmxvYXQ6IG5vbmU7CiAgICB9CgogICAgLmRyb3Bkb3duLXN1Ym1lbnUucHVsbC1sZWZ0ID4gLmRyb3Bkb3duLW1lbnUgewogICAgICAgIGxlZnQ6IC0xMDAlOwogICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNnB4IDAgNnB4IDZweDsKICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDZweCAwIDZweCA2cHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4IDAgNnB4IDZweDsKICAgIH0KICAgIDwvc3R5bGU+CgogICAgPHI6bGF5b3V0UmVzb3VyY2VzLz4KICAgIAogICAgPHNjcmlwdD4KICAgICAgICAkLmdldEpTT04oJy9zaWduYWwvYXNzZXRzL2kxOG4vJyArIHVzZXJMb2NhbGUgKyAnLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAkLmkxOG4ubG9hZChkYXRhKTsKCiAgICAgICAgfSk7CiAgICAgICAgdmFyIHJlc2l6ZWZ1bmMgPSBbXTsKICAgICAgICB2YXIgbGFzdFZpc2l0ZWRVcmwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdFZpc2l0ZWRVUkwnKTsKICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdFZpc2l0ZWRVUkwnLCBkb2N1bWVudC5VUkwuc3BsaXQoJz8nKVswXSk7CiAgICA8L3NjcmlwdD4KCjwvaGVhZD4KCjxib2R5IGNsYXNzPSJmaXhlZC1sZWZ0Ij4KCjwhLS0gQmVnaW4gcGFnZSAtLT4KPGRpdiBpZD0id3JhcHBlciIgY2xhc3M9ImVubGFyZ2VkIGZvcmNlZCI+CiAgICA8IS0tIFRvcCBCYXIgU3RhcnQgLS0+CiAgICAKCgoKCgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvc3ByaW5nLXdlYnNvY2tldC04Njc3ODNmMDNkNWE4MDA1MzcyOTUwYTRiOGNhYzJhNC5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9wdXNoTm90aWZpY2F0aW9uLTkwMWZlOTIzYWUxZTVjYmY3N2Q1NTZmMjVlMDY1NDE4LmpzIiA+PC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoKICAgIHZhciBub3RpZmljYXRpb25VUkwgPSAiXHUwMDJmc2lnbmFsXHUwMDJmaW5ib3hMb2dcdTAwMmZmb3JVc2VyXHUwMDJmNjk3OSI7CiAgICB2YXIgbm90aWZpY2F0aW9uRGVsZXRlVVJMID0gIlx1MDAyZnNpZ25hbFx1MDAyZmluYm94TG9nXHUwMDJmZGVsZXRlTm90aWZpY2F0aW9uQnlJZCI7CiAgICB2YXIgbm90aWZpY2F0aW9uTWFya0FzUmVhZFVSTCA9ICJcdTAwMmZzaWduYWxcdTAwMmZpbmJveExvZ1x1MDAyZm1hcmtBc1JlYWQiOwogICAgdmFyIG5vdGlmaWNhdGlvbkRlbGV0ZUJ5VXNlclVSTCA9ICJcdTAwMmZzaWduYWxcdTAwMmZpbmJveExvZ1x1MDAyZmRlbGV0ZU5vdGlmaWNhdGlvbnNGb3JVc2VySWQiOwogICAgdmFyIG5vdGlmaWNhdGlvbk1hcmtBc1JlYWRCeVVzZXJVUkwgPSAiXHUwMDJmc2lnbmFsXHUwMDJmaW5ib3hMb2dcdTAwMmZtYXJrQXNSZWFkTm90aWZpY2F0aW9uc0ZvclVzZXJJZCI7CiAgICB2YXIgbm90aWZpY2F0aW9uRGFzaGJvYXJkVVJMID0gIlx1MDAyZnNpZ25hbFx1MDAyZmluYm94TG9nXHUwMDJmaW5kZXgiOwogICAgdmFyIG5vdGlmaWNhdGlvbkNoYW5uZWwgPSIiOwogICAgdmFyIG5vdGlmaWNhdGlvbldTVVJMID0gIlx1MDAyZnNpZ25hbG51bGwiOwogICAgdmFyIHJlcG9ydFJlZGlyZWN0VVJMID0gIlx1MDAyZnNpZ25hbFx1MDAyZnJlcG9ydFx1MDAyZmNyaXRlcmlhIjsKICAgIHZhciBmaWx0ZXJEZWxldGVVcmwgPSAiXHUwMDJmc2lnbmFsXHUwMDJmYWR2YW5jZWRGaWx0ZXJcdTAwMmZkZWxldGUiOwoKICAgIHZhciBkZXRhaWxVcmxzID0ge307CiAgICBkZXRhaWxVcmxzWyJzY2FfcmVwb3J0UmVkaXJlY3RVUkwiXSA9ICAiXHUwMDJmc2lnbmFsXHUwMDJmc2luZ2xlQ2FzZUFsZXJ0XHUwMDJmZGV0YWlscyI7CiAgICBkZXRhaWxVcmxzWyJzY2FfYWRob2NfcmVwb3J0UmVkaXJlY3RVUkwiXSA9ICAiXHUwMDJmc2lnbmFsXHUwMDJmc2luZ2xlQ2FzZUFsZXJ0XHUwMDJmYWRob2NEZXRhaWxzIjsKICAgIGRldGFpbFVybHNbImFnYV9yZXBvcnRSZWRpcmVjdFVSTCJdID0gIlx1MDAyZnNpZ25hbFx1MDAyZmFnZ3JlZ2F0ZUNhc2VBbGVydFx1MDAyZmRldGFpbHMiOwogICAgZGV0YWlsVXJsc1siYWdhX2FkaG9jX3JlcG9ydFJlZGlyZWN0VVJMIl0gPSAiXHUwMDJmc2lnbmFsXHUwMDJmYWdncmVnYXRlQ2FzZUFsZXJ0XHUwMDJmYWRob2NEZXRhaWxzIjsKICAgIGRldGFpbFVybHNbImV2ZGFzX3JlcG9ydFJlZGlyZWN0VVJMIl0gPSAiXHUwMDJmc2lnbmFsXHUwMDJmZXZkYXNBbGVydFx1MDAyZmRldGFpbHMiOwogICAgZGV0YWlsVXJsc1siZXZkYXNfYWRob2NfcmVwb3J0UmVkaXJlY3RVUkwiXSA9ICJcdTAwMmZzaWduYWxcdTAwMmZldmRhc0FsZXJ0XHUwMDJmYWRob2NEZXRhaWxzIjsKICAgIGRldGFpbFVybHNbIkxJVEVSQVRVUkVfcmVwb3J0UmVkaXJlY3RVUkwiXSA9ICJcdTAwMmZzaWduYWxcdTAwMmZsaXRlcmF0dXJlQWxlcnRcdTAwMmZkZXRhaWxzIjsKICAgIGRldGFpbFVybHNbImVycm9yX3VybCJdICA9ICJcdTAwMmZzaWduYWxcdTAwMmZjb25maWd1cmF0aW9uXHUwMDJmZXhlY3V0aW9uU3RhdHVzIjsKCiAgICB2YXIgc29ja2V0VVJMID0gIlx1MDAyZnNpZ25hbFx1MDAyZnN0b21wIjsKCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGlzQWRtaW4gPSB0cnVlOwogICAgICAgIGlmKCFpc0FkbWluKSB7CiAgICAgICAgICAgJCgnLm1lZ2EtZHJvcGRvd24tbWVudScpLndpZHRoKCIxMDBweCIpOwogICAgICAgIH0KCiAgICB9KTsKCiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCcudGVtcC1yZWRpcmVjdCcsZnVuY3Rpb24oKSB7CiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBub3RpZmljYXRpb25EYXNoYm9hcmRVUkw7CiAgICB9KTsKDQo8L3NjcmlwdD4NCgo8ZGl2IGNsYXNzPSJ0b3BiYXIiPgogICAgPCEtLSBMT0dPIC0tPgogICAgPGRpdiBjbGFzcz0icHVsbC1sZWZ0Ij4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24tbWVudS1tb2JpbGUgb3Blbi1sZWZ0IHdhdmVzLWVmZmVjdCIgYWNjZXNza2V5PSJiIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgdGl0bGU9Ik1haW4gTWVudSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1tZW51Ij48L2k+CiAgICAgICAgPC9idXR0b24+CiAgICAgICAgPHNwYW4gY2xhc3M9ImNsZWFyZml4Ij48L3NwYW4+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImxlZnQgc2lkZS1tZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLWlubmVyIHNsaW1zY3JvbGxsZWZ0Ij4KICAgICAgICAgICAgPGRpdiBpZD0ic2lkZWJhci1tZW51Ij4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC8iIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1kYXNoYm9hcmQiPjwvaT48c3Bhbj5EYXNoYm9hcmQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtc2V0dGluZ3MtYXBwbGljYXRpb25zIj48L2k+PHNwYW4+QWxlcnQgQ29uZmlndXJhdGlvbjwvc3Bhbj4gPHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTaW5nbGUgQ2FzZSBDcmVhdGlvbiBtZW51IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGl2aWRlciI+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL3NpbmdsZUNhc2VBbGVydC9jcmVhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUXVhbGl0YXRpdmUgQ29uZmlndXJhdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBZ2dyZWdhdGUgQ3JlYXRpb24gbWVudSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvYWdncmVnYXRlQ2FzZUFsZXJ0L2NyZWF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWFudGl0YXRpdmUgQ29uZmlndXJhdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBFdmRhcyBDcmVhdGlvbiBtZW51IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC9ldmRhc0FsZXJ0L2NyZWF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRVZEQVMgQ29uZmlndXJhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBZGhvYyBDcmVhdGlvbiBtZW51IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC9hZEhvY0FsZXJ0L2NyZWF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZC1Ib2MgQ29uZmlndXJhdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTGl0ZXJhdHVyZSBBbGVydCBDcmVhdGlvbiBtZW51IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2xpdGVyYXR1cmVBbGVydC9jcmVhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXRlcmF0dXJlIENvbmZpZ3VyYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFZpZXcgYWxlcnQgbWVudSBvcHRpb24gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL2NvbmZpZ3VyYXRpb24vaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBBbGVydHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFZpZXcgZXhlY3V0aW9uIHN0YXR1cyBtZW51IG9wdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvY29uZmlndXJhdGlvbi9leGVjdXRpb25TdGF0dXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBFeGVjdXRpb24gU3RhdHVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoYXNfc3ViIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLXJlcG9ydC1wcm9ibGVtIj48L2k+PHNwYW4+VHJpZ2dlcmVkIEFsZXJ0czwvc3Bhbj4gPHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL3NpbmdsZUNhc2VBbGVydC9yZXZpZXciPlF1YWxpdGF0aXZlIFJldmlldzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC9hZ2dyZWdhdGVDYXNlQWxlcnQvcmV2aWV3Ij5RdWFudGl0YXRpdmUgUmV2aWV3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL2V2ZGFzQWxlcnQvcmV2aWV3Ij5FVkRBUyBSZXZpZXc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL2FkSG9jQWxlcnQvaW5kZXgiPkFkLUhvYyBSZXZpZXc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9saXRlcmF0dXJlQWxlcnQvZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGl0ZXJhdHVyZSBSZXZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsbC1tZXJnZSI+PC9pPjxzcGFuPlNpZ25hbCBNYW5hZ2VtZW50PHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvaW5kZXgiIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaWduYWwgU3VtbWFyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvcHJvZHVjdFN1bW1hcnkvaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBTdW1tYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtZmlsdGVyLWxpc3QiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5RdWVyaWVzPC9zcGFuPiA8c3BhbiBjbGFzcz0ibWVudS1hcnJvdyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovLzEwLjEwMC4yMi4yNDo4MDgwL3JlcG9ydHMvcXVlcnkvbG9hZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9hZCBRdWVyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODA4MC9yZXBvcnRzL3F1ZXJ5L2luZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWVyeSBMaWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODA4MC9yZXBvcnRzL3F1ZXJ5L2NyZWF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3IFF1ZXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC10cmVuZGluZy11cCI+PC9pPjxzcGFuPkRhdGEgQW5hbHlzaXM8L3NwYW4+IDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL2RhdGFBbmFseXNpcy9pbmRleCI+QW5hbHlzaXMgRmlsZSBMaWJyYXJ5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGl2aWRlciI+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvZGF0YUFuYWx5c2lzL2NyZWF0ZSI+TmV3IEFuYWx5c2lzIEZpbGU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkaXZpZGVyIj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL3JlcG9ydC9pbmRleCIgY2xhc3M9IndhdmVzLWVmZmVjdCB3YXZlcy1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWluc2VydC1jaGFydCI+PC9pPjxzcGFuPlJlcG9ydGluZzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzX3N1YiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1ncmlkLW9uIj48L2k+PHNwYW4+T24gRGVtYW5kIFJ1bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiA8c3BhbiBjbGFzcz0ibWVudS1hcnJvdyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvc2luZ2xlT25EZW1hbmRBbGVydC9hZGhvY1JldmlldyI+UXVhbGl0YXRpdmUgUmV2aWV3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL2FnZ3JlZ2F0ZU9uRGVtYW5kQWxlcnQvYWRob2NSZXZpZXciPlF1YW50aXRhdGl2ZSBSZXZpZXc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9ldmRhc09uRGVtYW5kQWxlcnQvYWRob2NSZXZpZXciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFVkRBUyBSZXZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzX3N1YiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtZXZlbnQiPjwvaT48c3Bhbj5UYXNrcyAmIENhbGVuZGFyPHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2FjdGlvbi9pbmRleCIgY2xhc3M9IndhdmVzLWVmZmVjdCB3YXZlcy1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWN0aW9uIEl0ZW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2NhbGVuZGFyL2luZGV4IiBjbGFzcz0id2F2ZXMtZWZmZWN0IHdhdmVzLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWxlbmRhcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJ0b3BiYXItbGVmdCI+CiAgICAgICAgPGRpdiBjbGFzcz0icHVsbC1sZWZ0IGxvZ28iPgogICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsLyI+PGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3B2LXNpZ25hbC1sb2dvLTYxMTYxYWZiYTlhOGE4ZTIwZWJlNjViN2YwOTczYzJhLnBuZyIgY2xhc3M9InB2TG9nbyIvPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSBOYXZiYXIgLS0+CiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IGhpZGRlbi14cyBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vMTAuMTAwLjIyLjI0OjgwODAvcmVwb3J0cyIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ3YXZlcy1lZmZlY3QiPlBWIFJlcG9ydHM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdmJhci1yaWdodCBwdWxsLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoaWRkZW4teHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+V2VsY29tZSBiaGFneWEhPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVOb3RpZmljYXRpb24iIGNsYXNzPSJoaWRkZW4teHMgZHJvcGRvd24gbWVnYS1kcm9wZG93biI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgZGF0YS10YXJnZXQ9IiMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IHB2LWhlYWQtbm90aS1pY29uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFjY2Vzc2tleT0iaSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWluYm94IiBzdHlsZT0iZm9udC1zaXplOiAyNHB4OyBtYXJnaW4tdG9wOjE5cHg7cGFkZGluZy10b3A6IDFweCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGlkPSJub3RpZmljYXRpb25Db250YWluZXIiIGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtbGcgbm90aWZpY2F0aW9uLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0ibm90aWZpY2F0aW9uSGVhZGVyIiBjbGFzcz0ibm90aWZpLXRpdGxlIj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0ibm90aWZpY2F0aW9uUm93cyIgY2xhc3M9ImFqYXgiPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1yaWdodCBtLXQtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2luYm94TG9nL2luZGV4IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHRlbXAtcmVkaXJlY3QgZHB2LWhlYWQtbm90aS1pY29uIGJveC1pbmxpbmUiIHRhYmluZGV4PSIwIiBhY2Nlc3NrZXk9Im0iIHRpdGxlPSJPcGVuIEluYm94Ij5JbmJveDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgaWQ9ImNsZWFyTm90aWZpY2F0aW9ucyIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBib3gtaW5saW5lIiB1c2VySWQ9IjY5NzkiIHRhYmluZGV4PSIwIiB0aXRsZT0iQ2xlYXIgQWxsIiBhY2Nlc3NrZXk9ImUiPkNsZWFyIGFsbDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoaWRkZW4teHMgZHJvcGRvd24gbWVnYS1kcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBkYXRhLXRhcmdldD0iIyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFjY2Vzc2tleT0idCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLXNldHRpbmdzIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IG1lZ2EtZHJvcGRvd24tbWVudSIgcm9sZT0ibWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY29sLXNtLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24taGVhZGVyIj48aSBjbGFzcz0iZmEgZmEtdXNlci1jaXJjbGUgZmEtZnciPjwvaT4gVXNlciBNYW5hZ2VtZW50PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InVzZXJNYW5hZ2VtZW50Ij48YSBocmVmPSIvc2lnbmFsL3VzZXIvaW5kZXgiPlVzZXIgTWFuYWdlbWVudDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0icm9sZU1hbmFnZW1lbnQiPjxhIGhyZWY9Ii9zaWduYWwvcm9sZS9pbmRleCI+Um9sZSBNYW5hZ2VtZW50PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJncm91cE1hbmFnZW1lbnQiPjxhIGhyZWY9Ii9zaWduYWwvZ3JvdXAvaW5kZXgiPkdyb3VwIE1hbmFnZW1lbnQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVQcmVmZXJlbmNlIj48YSBocmVmPSIvc2lnbmFsL3ByZWZlcmVuY2UvaW5kZXgiPlVzZXIgUHJlZmVyZW5jZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duLWhlYWRlciI+PGkgY2xhc3M9ImZhIGZhLXNsaWRlcnMgZmEtZnciPjwvaT4gV29ya2Zsb3cgTWFuYWdlbWVudDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJtZW51V29ya2Zsb3dSdWxlIj48YSBocmVmPSIvc2lnbmFsL3dvcmtmbG93UnVsZS9pbmRleCI+V29ya2Zsb3cgUnVsZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0ibWVudURpc3Bvc2l0aW9uIj48YSBocmVmPSIvc2lnbmFsL2Rpc3Bvc2l0aW9uL2xpc3QiPkRpc3Bvc2l0aW9uPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJtZW51UHJpb3JpdHkiPjxhIGhyZWY9Ii9zaWduYWwvcHJpb3JpdHkvbGlzdCI+UHJpb3JpdHk8L2E+IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJtZW51UHJpb3JpdHkiPjxhIGhyZWY9Ii9zaWduYWwvanVzdGlmaWNhdGlvbi9pbmRleCI+SnVzdGlmaWNhdGlvbjwvYT4gPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY29sLXNtLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24taGVhZGVyIj48aSBjbGFzcz0iZmEgZmEtdGFza3MgZmEtZnciPjwvaT4gQnVzaW5lc3MgQ29uZmlndXJhdGlvbjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJtZW51QnVzaW5lc3NDb25maWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2J1c2luZXNzQ29uZmlndXJhdGlvbi9pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdXNpbmVzcyBSdWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0ic2FmZXR5R3JvdXBNYW5hZ2VtZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9zYWZldHlHcm91cC9pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYWZldHkgTGVhZCBDb25maWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJhbGVydFN0b3BMaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9hbGVydFN0b3BMaXN0L2luZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0IFN0b3AgTGlzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9ImVtZXJnaW5nU2FmZXR5SXNzdWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9lbWVyZ2luZ0lzc3VlL2luZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEltcG9ydGFudCBFdmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJwcm9kdWN0R3JvdXBpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3Byb2R1Y3RHcm91cC9pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9kdWN0IEdyb3VwaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24taGVhZGVyIj48aSBjbGFzcz0iZmEgZmEtZmlsZS10ZXh0LW8gZmEtZnciPjwvaT4gQWN0aW9uIFRlbXBsYXRlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVBY3Rpb25UZW1wbGF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvYWN0aW9uVGVtcGxhdGUvaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWN0aW9uIFRlbXBsYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0ibWVudUFjdGlvblR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2FjdGlvblR5cGUvbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb24gVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVBY3Rpb25Db25maWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2FjdGlvbkNvbmZpZ3VyYXRpb24vbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb24gQ29uZmlndXJhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InByb2R1Y3RJbmdyZWRpZW50c01hcHBpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3Byb2R1Y3RJbmdyZWRpZW50c01hcHBpbmcvaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdC9JbmdyZWRpZW50cyBNYXBwaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjb2wtc20tNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93bi1oZWFkZXIiPjxpIGNsYXNzPSJmYSBmYS1nZWFyIGZhLWZ3Ij48L2k+IFN5c3RlbSBDb25maWd1cmF0aW9uPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9ImF1ZGl0TG9nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9hdWRpdExvZ0V2ZW50L2luZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGl0IExvZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9ImV2ZGFzRGF0YVVwbG9hZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9ldmRhc0RhdGEvaW5kZXgiPkVWREFTIERhdGEgVXBsb2FkPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJkbXNDb25maWd1cmF0aW9uTGluayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvY29udHJvbFBhbmVsL2luZGV4Ij5ETVMgQ29uZmlndXJhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InN1YnN0YW5jZUZyZXF1ZW5jeVZpZXdlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3N1YnN0YW5jZUZyZXF1ZW5jeS9pbmRleCI+U3Vic3RhbmNlIEZyZXF1ZW5jeSBWaWV3ZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJ0YWdzTGlzdCI+PGEgaHJlZj0iL3NpZ25hbC9hbGVydFRhZy9pbmRleCI+VGFnczwvYT48L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1haWxOb3RpZmlhY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvZW1haWxOb3RpZmljYXRpb24vZWRpdCI+RW1haWwgQ29uZmlndXJhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24taGVhZGVyIj48aSBjbGFzcz0iZmEgZmEtd3JlbmNoIGZhLWZ3Ij48L2k+IFN5c3RlbSBNYW5hZ2VtZW50PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvbW9uaXRvcmluZyI+TW9uaXRvcmluZzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC9xdWFydHoiPkpvYnMgTW9uaXRvcmluZzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL2xvZ291dC9pbmRleCIgaWQ9Ik1JLWxvZ291dCIgdGl0bGU9IkxvZ291dCIgdGFiaW5kZXg9IjAiIGFjY2Vzc2tleT0icSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRhYmluZGV4PSIwIiBjbGFzcz0ibG9nb3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcG93ZXItb2ZmIGZhLWZ3Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nb3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPHN0eWxlPgogICAgLm1lZ2EtZHJvcGRvd24tbWVudXsKICAgICAgICB3aWR0aDo2NTBweDsKICAgICAgICBwYWRkaW5nOiA1cHggMHB4OwogICAgICAgIGJveC1zaGFkb3c6IGRhcmtjeWFuOwogICAgICAgIGJvcmRlci1ib3R0b20gOiA0cHggc29saWQgI2NjYzsKICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7CiAgICB9CiAgICAubWVnYS1kcm9wZG93bi1tZW51ID4gbGkgPiB1bCB7CiAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgIG1hcmdpbjogMDsKICAgIH0KCiAgICAubWVnYS1kcm9wZG93bi1tZW51ID4gbGkgPiB1bCA+IGxpIHsKICAgICAgICBsaXN0LXN0eWxlOiBub25lOwogICAgICAgIHBhZGRpbmctbGVmdDogOHB4OwogICAgICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgI2VlZTsKICAgIH0KICAgIC5tZWdhLWRyb3Bkb3duLW1lbnUgPiBsaSA+IHVsID4gbGk6bGFzdC1jaGlsZCB7CiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTsKICAgICAgICBwYWRkaW5nLWxlZnQ6IDhweDsKICAgICAgICBib3JkZXItYm90dG9tOiAwcHggZG90dGVkICNlZWU7CiAgICB9CiAgICAubWVnYS1kcm9wZG93bi1tZW51ID4gbGkgPiB1bCA+IGxpID4gYSwKICAgIC5tZWdhLWRyb3Bkb3duLW1lbnUgPiBsaSA+IHVsID4gbGkgPiBzcGFuIHsKICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICBwYWRkaW5nOiA3cHggMTBweDsKICAgICAgICBjbGVhcjogYm90aDsKICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQyOTsKICAgICAgICBjb2xvcjogIzY1NjU2NTsKICAgICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOwogICAgICAgIGZvbnQtc2l6ZTogMTNweDsKICAgIH0KICAgIC5tZWdhLWRyb3Bkb3duLW1lbnUgPiBsaSB1bCA+IGxpID4gYTpob3ZlciwKICAgIC5tZWdhLWRyb3Bkb3duLW1lbnUgPiBsaSB1bCA+IGxpID4gYTpmb2N1c3sKICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgY29sb3I6ICM0NDQ7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTsKICAgIH0KICAgIC5tZWdhLWRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWhlYWRlcnsKICAgICAgICBjb2xvcjogIzA5OWRkZDsKICAgICAgICBmb250LXNpemU6IDEzLjVweDsKICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgIH0KICAgIC5tZWdhLWRyb3Bkb3duLW1lbnUgLmxvZ291dHsKICAgICAgICBjb2xvcjogIzQyOGJjYTsKICAgICAgICBmb250LXNpemU6IDE1cHg7CiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDsKICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICB9Cjwvc3R5bGU+CgogICAgCiAgICA8IS0tIFRvcCBCYXIgRW5kIC0tPgogICAgPCEtLSA9PT09PT09PT09IExlZnQgU2lkZWJhciBTdGFydCA9PT09PT09PT09IC0tPgogICAgCiAgICA8IS0tIFRvcCBCYXIgRW5kIC0tPgoKICAgIDwhLS0gTGVmdCBTaWRlYmFyIFN0YXJ0IC0tPgogICAgCgoKCgoKCiAgICA8IS0tIExlZnQgU2lkZWJhciBFbmQgLS0+CgogICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgIDwhLS0gU3RhcnQgcmlnaHQgQ29udGVudCBoZXJlIC0tPgogICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtcGFnZSI+CiAgICAgICAgPCEtLSBTdGFydCBjb250ZW50IC0tPgogICAgICAgIDxkaXYgaWQ9Im1haW5Db250ZW50IiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAKCjxkaXYgaWQ9InRvcGljLXBhZ2UiPgoKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFnZS10aXRsZS1ib3giPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZml4ZWQtcGFnZS1oZWFkIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWQtbHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgc2lnbmFsQmFubmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImVsbGlwc2lzIHZhbGlkYXRlZFNpZ25hbE5hbWUiIGlkPSJ2YWxpZGF0ZWRTaWduYWxOYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJ2YWxpZGF0ZWRTaWduYWxOYW1lVG9vbHRpcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYm90dG9tIiB0aXRsZT0iUGVyZlNpZ25hbCI+UGVyZlNpZ25hbDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJlbGxpcHNpcyIgaWQ9InByb2R1Y3ROYW1lIiBkYXRhLXRvZ2dsZT0icHJvZHVjdE5hbWVUb29sdGlwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYm90dG9tIiB0aXRsZT0iUEVOSUNJTExJTiBHIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBOYW1lOiBQRU5JQ0lMTElOIEc8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWQtcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBwdWxsLXJpZ2h0IiBocmVmPSIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9pbmRleCIgdGFiaW5kZXg9IjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1sb25nLWFycm93LWxlZnQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+IEJhY2s8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKCgoKCgoKCgoKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgPCEtLSBOYXYgdGFicyAtLT4KICAgICAgICAgICAgPHVsIGlkPSJkZXRhaWwtdGFicyIgY2xhc3M9InZhbGlkYXRpb24tdGFiIG0tYi01IHAtMCI+CiAgICAgICAgICAgICAgICA8bGkgcm9sZT0icHJlc2VudGF0aW9uIiBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjdXBkYXRlIiBhcmlhLWNvbnRyb2xzPSJ1cGRhdGUiIHJvbGU9InRhYiIgZGF0YS10b2dnbGU9InRhYiIgYWNjZXNza2V5PSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgU2lnbmFsIEluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICA8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjZGV0YWlscyIgaWQ9ImRldGFpbHNUYWIiIGFyaWEtY29udHJvbHM9ImRldGFpbHMiIHJvbGU9InRhYiIgZGF0YS10b2dnbGU9InRhYiIgYWNjZXNza2V5PSIyIj4KICAgICAgICAgICAgICAgICAgICAgICAgUmV2aWV3CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgIDxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI2xpbmtlZENvbmZpZ3VyYXRpb25zIiBpZD0ibGlua2VkQ29uZmlndXJhdGlvbnNUYWIiIGFyaWEtY29udHJvbHM9ImxpbmtlZENvbmZpZ3VyYXRpb25zIgogICAgICAgICAgICAgICAgICAgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBhY2Nlc3NrZXk9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICBMaW5rZWQgQ29uZmlndXJhdGlvbnMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgIDxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNhc3Nlc3NtZW50cyIgaWQ9ImFzc2Vzc21lbnRUYWIiIGFyaWEtY29udHJvbHM9ImFzc2Vzc21lbnRzIiByb2xlPSJ0YWIiIGRhdGEtdG9nZ2xlPSJ0YWIiIGFjY2Vzc2tleT0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFzc2Vzc21lbnRzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNub3RpZmljYXRpb25zIiBpZD0iYWN0aW9uQW5kV29ya2Zsb3ciIGFyaWEtY29udHJvbHM9Im5vdGlmaWNhdGlvbnMiIHJvbGU9InRhYiIgZGF0YS10b2dnbGU9InRhYiIgYWNjZXNza2V5PSI1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgQWN0aW9ucyBBbmQgV29ya2Zsb3cKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIHJvbGU9InByZXNlbnRhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2RvY01hbmFnZW1lbnQiIGlkPSJkb2N1bWVudE1hbmFnZW1lbnQiIGFyaWEtY29udHJvbHM9ImRvY01hbmFnZW1lbnQiIHJvbGU9InRhYiIgZGF0YS10b2dnbGU9InRhYiIgYWNjZXNza2V5PSI2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgRG9jdW1lbnQgTWFuYWdlbWVudAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjYWN0aXZpdGllcyIgYXJpYS1jb250cm9scz0iYWN0aXZpdGllcyIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBpZD0ic2lnbmFsQWN0aXZpdGllcyIgYWNjZXNza2V5PSI3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZpdHkgTG9nCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPCEtLSBUYWIgcGFuZXMgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50IHB2cy12YWxpZGF0ZS10YWJwYW4iPgoKICAgICAgICAgICAgICAgIDxkaXYgaWQ9InVwZGF0ZSIgY2xhc3M9InRhYi1wYW5lIGFjdGl2ZSBtLWItMTAiIHJvbGU9InRhYnBhbmVsIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIgYWxlcnQtZGlzbWlzc2libGUgaGlkZSBlZGl0LWFsZXJ0LWRhbmdlciIgcm9sZT0iYWxlcnQiPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSBlcnJvckJ1dHRvbiI+CiAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPkNsb3NlPC9zcGFuPgogICAgPC9idXR0b24+CgogICAgPGRpdiBjbGFzcz0iZXJyb3ItbWVzc2FnZSI+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlIGhpZGUiIHJvbGU9ImFsZXJ0IiBpZD0iYWxlcnQtc3VjY2VzcyI+CiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIHN1Y2Nlc3NCdXR0b24iPgogICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5DbG9zZTwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9InN1Y2Nlc3MtbWVzc2FnZSI+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8Zm9ybSBhY3Rpb249Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2luZGV4IiBtZXRob2Q9InBvc3QiIG5hbWU9InNpZ25hbEVkaXRGb3JtIiBhdXRvY29tcGxldGU9Im9mZiIgaWQ9InNpZ25hbEVkaXRGb3JtIiA+CiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyICI+CiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIFNpZ25hbCBTdW1tYXJ5CiAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCI+CiAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0icm93Ij4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBmb3JtLWdyb3VwIj4KICAgICAgICA8bGFiZWwgY2xhc3M9IiI+CiAgICAgICAgICAgIFByb2R1Y3RzCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgPC9sYWJlbD4KCiAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgIDxkaXYgaWQ9InNob3dQcm9kdWN0U2VsZWN0aW9uIiBjbGFzcz0ic2hvd0RpY3Rpb25hcnlTZWxlY3Rpb24iPjwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvblNlYXJjaCI+CiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjcHJvZHVjdE1vZGFsIiB0YWJpbmRleD0iMCIgZGF0YS10b2dnbGU9InRvb2x0aXAiCiAgICAgICAgICAgICAgICAgICB0aXRsZT0iU2VhcmNoIHByb2R1Y3QiIGFjY2Vzc2tleT0icCI+PGkgY2xhc3M9ImZhIGZhLXNlYXJjaCI+PC9pPjwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icHJvZHVjdFNlbGVjdGlvbiIgdmFsdWU9InsmcXVvdDsxJnF1b3Q7OltdLCZxdW90OzImcXVvdDs6W10sJnF1b3Q7MyZxdW90OzpbXSwmcXVvdDs0JnF1b3Q7OltdLCZxdW90OzUmcXVvdDs6W10sJnF1b3Q7NiZxdW90OzpbeyZxdW90O25hbWUmcXVvdDs6JnF1b3Q7UEVOSUNJTExJTiBHJnF1b3Q7LCZxdW90O2lkJnF1b3Q7OiZxdW90OzE3ODQ3MDg4MiZxdW90O31dLCZxdW90OzcmcXVvdDs6W10sJnF1b3Q7OCZxdW90OzpbXSwmcXVvdDs5JnF1b3Q7OltdfSIgaWQ9InByb2R1Y3RTZWxlY3Rpb24iIC8+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBmb3JtLWdyb3VwIj4KICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgIEV2ZW50IFNlbGVjdGlvbgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgIDwvbGFiZWw+CgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICA8ZGl2IGlkPSJzaG93RXZlbnRTZWxlY3Rpb24iIGNsYXNzPSJzaG93RGljdGlvbmFyeVNlbGVjdGlvbiI+PC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uU2VhcmNoIj4KICAgICAgICAgICAgICAgIDxhIGlkPSJzZWFyY2hFdmVudHMiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNldmVudE1vZGFsIiB0YWJpbmRleD0iMCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIHRpdGxlPSJTZWxlY3QgZXZlbnQiIGFjY2Vzc2tleT0ifSI+PGkgY2xhc3M9ImZhIGZhLXNlYXJjaCI+PC9pPjwvYT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJldmVudFNlbGVjdGlvbiIgdmFsdWU9InsmcXVvdDsxJnF1b3Q7OltdLCZxdW90OzImcXVvdDs6W10sJnF1b3Q7MyZxdW90OzpbXSwmcXVvdDs0JnF1b3Q7Olt7JnF1b3Q7bmFtZSZxdW90OzomcXVvdDtOZXBocm90aWMgc3luZHJvbWUmcXVvdDssJnF1b3Q7aWQmcXVvdDs6JnF1b3Q7MTAwMjkxNjQmcXVvdDt9XSwmcXVvdDs1JnF1b3Q7OltdLCZxdW90OzYmcXVvdDs6W119IiBoaWRkZW49ImhpZGRlbiIgaWQ9ImV2ZW50U2VsZWN0aW9uIiAvPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiI+U2lnbmFsIE5hbWU8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iUGVyZlNpZ25hbCIgbmFtZT0ibmFtZSIgaWQ9InNpZ25hbE5hbWUiLz4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIj5Ub3BpYyBJbmZvcm1hdGlvbjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iIiBuYW1lPSJ0b3BpYyIgaWQ9InRvcGljIi8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+RGV0ZWN0ZWQgQnk8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJkZXRlY3RlZEJ5IiBuYW1lPSJkZXRlY3RlZEJ5IiBjbGFzcz0iZm9ybS1jb250cm9sIiA+DQo8b3B0aW9uIHZhbHVlPSIiPi0tU2VsZWN0IE9uZS0tPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJDb21wYW55IiBzZWxlY3RlZD0ic2VsZWN0ZWQiID5Db21wYW55PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJIZWFsdGggQXV0aG9yaXR5IiA+SGVhbHRoIEF1dGhvcml0eTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iT3RoZXJzIiA+T3RoZXJzPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciIgaWQ9ImRldGVjdGVkLWRhdGUtcGlja2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkRldGVjdGVkIERhdGU8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPSJEZXRlY3RlZCBEYXRlIiBuYW1lPSJkZXRlY3RlZERhdGUiIGlkPSJkZXRlY3RlZERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSBkZXRlY3RlZERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRhdGU9IiIgdmFsdWU9IjA0LUZlYi0yMDIwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgo8L2Rpdj4KCjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJzZWxlY3RlZERhdGFzb3VyY2UiIGNsYXNzPSJzZWxlY3RlZERhdGFzb3VyY2UiIHZhbHVlPSJwdmEiLz4KCgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyICI+CiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIFNpZ25hbCBEZXRhaWxzCiAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCI+CiAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iaW5pdGlhbERhdGFTb3VyY2UiPlNpZ25hbCBTb3VyY2U8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iaW5pdGlhbERhdGFTb3VyY2UiIGlkPSJpbml0aWFsRGF0YVNvdXJjZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgbXVsdGlwbGU9InRydWUiID4NCjxvcHRpb24gdmFsdWU9IkRhdGEgbWluaW5nIC0gQ2xhaW1zIGRhdGFiYXNlIiA+RGF0YSBtaW5pbmcgLSBDbGFpbXMgZGF0YWJhc2U8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkRhdGEgbWluaW5nIC0gRkFFUlMgZGF0YWJhc2UiID5EYXRhIG1pbmluZyAtIEZBRVJTIGRhdGFiYXNlPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJFdmVudCB1bmRlciBTcGVjaWFsIE1vbml0b3JpbmcgICBGREEgVEVTVCIgPkV2ZW50IHVuZGVyIFNwZWNpYWwgTW9uaXRvcmluZyAgIEZEQSBURVNUPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJIZWFsdGggQXV0aG9yaXR5IGFzc2Vzc21lbnQgcmVwb3J0IiA+SGVhbHRoIEF1dGhvcml0eSBhc3Nlc3NtZW50IHJlcG9ydDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iSUNTUiBBdXRvLUFsZXIiID5JQ1NSIEF1dG8tQWxlcjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iSUNTUiByZXZpZXciID5JQ1NSIHJldmlldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iSUNTUiByZXZpZXcgLSBBZ2dyZWdhdGUgcmVwb3J0IiA+SUNTUiByZXZpZXcgLSBBZ2dyZWdhdGUgcmVwb3J0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJJQ1NScyBSb3V0aW5lIFNpZ25hbCBkZXRlY3Rpb24iID5JQ1NScyBSb3V0aW5lIFNpZ25hbCBkZXRlY3Rpb248L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxhYmVsaW5nIGluZm9ybWF0aW9uIHJldmlldyIgPkxhYmVsaW5nIGluZm9ybWF0aW9uIHJldmlldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iTGl0ZXJhdHVyZSBhbGVydCIgPkxpdGVyYXR1cmUgYWxlcnQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxpdGVyYXR1cmUgcmV2aWV3IiA+TGl0ZXJhdHVyZSByZXZpZXc8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxpdGVyYXR1cmUgcmV2aWV3IC1BZ2dyZWdhdGUgcmVwb3J0IiA+TGl0ZXJhdHVyZSByZXZpZXcgLUFnZ3JlZ2F0ZSByZXBvcnQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9Ik5vbiBDbGluaWNhbCBkYXRhIiA+Tm9uIENsaW5pY2FsIGRhdGE8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9Ik90aGVyIiA+T3RoZXI8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IlByZXZpb3VzL3JlbGF0ZWQgYXNzZXNzbWVudCIgPlByZXZpb3VzL3JlbGF0ZWQgYXNzZXNzbWVudDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iUHJvZHVjdCBxdWFsaXR5IGlzc3VlcyByZXZpZXciID5Qcm9kdWN0IHF1YWxpdHkgaXNzdWVzIHJldmlldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iU3R1ZHkiID5TdHVkeTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iVW5rbm93biIgPlVua25vd248L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgIDwvZGl2PgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNpZ25hbFNvdXJjZSIgaWQ9InNpZ25hbFNvdXJjZSIgdmFsdWU9IkV2ZW50IHVuZGVyIFNwZWNpYWwgTW9uaXRvcmluZyAgIEZEQSBURVNUIiAvPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWw+RXZhbHVhdGlvbiBNZXRob2Q8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj48L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJldmFsdWF0aW9uTWV0aG9kIiBjbGFzcz0iZm9ybS1jb250cm9sIiBtdWx0aXBsZT0idHJ1ZSIgaWQ9ImV2YWx1YXRpb25NZXRob2QiID4NCjxvcHRpb24gdmFsdWU9IkNsYWltcyBkYXRhIG1pbmluZyBQVlMtRkRBIElOVEVSTkFMIEVOViIgPkNsYWltcyBkYXRhIG1pbmluZyBQVlMtRkRBIElOVEVSTkFMIEVOVjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iQ2xpbmljIGRhdGEgcmV2aWV3IiA+Q2xpbmljIGRhdGEgcmV2aWV3PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJFcGlkZW1pb2xvZ2ljYWwgZGF0YSByZXZpZXciID5FcGlkZW1pb2xvZ2ljYWwgZGF0YSByZXZpZXc8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkV4dGVybmFsIGV4cG9ydCIgPkV4dGVybmFsIGV4cG9ydDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iRkFFUlMgZGF0YSBtaW5pbmciID5GQUVSUyBkYXRhIG1pbmluZzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iTGl0ZXJhdHVyZSByZXZpZXciID5MaXRlcmF0dXJlIHJldmlldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iT3RoZXIiID5PdGhlcjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iUGhhcm1hY29sb2dpY2FsIGRhdGEgcmV2aWV3IiA+UGhhcm1hY29sb2dpY2FsIGRhdGEgcmV2aWV3PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJQcmVjbGluaWNhbCBkYXRhIHJldmlldyIgPlByZWNsaW5pY2FsIGRhdGEgcmV2aWV3PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJUb3hpY29sb2dpY2FsIGRhdGEgcmV2aWV3IiA+VG94aWNvbG9naWNhbCBkYXRhIHJldmlldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iVUNCIElDU1IgcmV2aWV3IiA+VUNCIElDU1IgcmV2aWV3PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2lnbmFsRXZhbHVhdGlvbk1ldGhvZCIgaWQ9InNpZ25hbEV2YWx1YXRpb25NZXRob2QiIHZhbHVlPSJbXSIgLz4KICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InNpZ25hbFR5cGVMaXN0Ij5SaXNrL1RvcGljIENhdGVnb3J5PC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJzaWduYWxUeXBlTGlzdCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbXVsdGlwbGU9InRydWUiIGlkPSJzaWduYWxUeXBlTGlzdCIgPg0KPG9wdGlvbiB2YWx1ZT0iSW1wb3J0YW50IElkZW50aWZpZWQgUmlzayIgPkltcG9ydGFudCBJZGVudGlmaWVkIFJpc2s8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkltcG9ydGFudCBQb3RlbnRpYWwgUmlza3MiID5JbXBvcnRhbnQgUG90ZW50aWFsIFJpc2tzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJNaXNzaW5nIEluZm9ybWF0aW9uIiA+TWlzc2luZyBJbmZvcm1hdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iQUVzIHVuZGVyIEVuaGFuY2VkIFN1cnZlaWxsYW5jZSIgPkFFcyB1bmRlciBFbmhhbmNlZCBTdXJ2ZWlsbGFuY2U8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkFEUiIgPkFEUjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iU2FmZXR5IFRvcGljcyBvZiBJbnRlcmVzdCIgPlNhZmV0eSBUb3BpY3Mgb2YgSW50ZXJlc3Q8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkFudGljaXBhdGVkIEV2ZW50cyIgPkFudGljaXBhdGVkIEV2ZW50czwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iU3VzcGVjdGVkIFNBUiIgPlN1c3BlY3RlZCBTQVI8L29wdGlvbj4NCjwvc2VsZWN0PgoKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idG9waWNDYXRlZ29yeUxpc3QiIGlkPSJ0b3BpY0NhdGVnb3J5TGlzdCIgdmFsdWU9IltdIiAvPgoKICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBwb3MtcmVsIj4KICAgICAgICAgICAgPGxhYmVsPkxpbmtlZCBTaWduYWw8L2xhYmVsPgogICAgICAgICAgICA8YSBoaWRkZW49JnF1b3Q7aGlkZGVuJnF1b3Q7IGlkPSJsaW5rZWRTaWduYWxJbmZvIiB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJidXR0b24iPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktYXJyb3ctZG93bi1kcm9wLWNpcmNsZSBmb250LTE4IGJsdWUtMSI+PC9pPgogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1sZWZ0IHZpZXdMaW5rZWRTaWduYWwiIHJvbGU9Im1lbnUiPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImxpbmtlZFNpZ25hbCIgaWQ9ImxpbmtlZFNpZ25hbCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHRleHRhcmVhLWV4dCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRlc2NyaXB0aW9uIj5EZXNjcmlwdGlvbjxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJkZXNjcmlwdGlvbiIgY2xhc3M9ImZvcm0tY29udHJvbCIgc3R5bGU9ImhlaWdodDogOTBweDsiIGlkPSJkZXNjcmlwdGlvbiIgPkRFU0NSSVBUSU9OPC90ZXh0YXJlYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImJ0bi10ZXh0LWV4dCBvcGVuVGV4dEFyZWEiIGhyZWY9IiIgdGFiaW5kZXg9IjAiIHRpdGxlPSJPcGVuIGluIGV4dGVuZGVkIGZvcm0iPjxpIGNsYXNzPSJtZGkgbWRpLWFycm93LWV4cGFuZCBmb250LTIwIGJsdWUtMSI+PC9pPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHRleHRhcmVhLWV4dCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InJlYXNvbkZvckV2YWx1YXRpb24iPlJlYXNvbiBmb3IgRXZhbHVhdGlvbiAmIFN1bW1hcnkgb2YgS2V5IERhdGE8L2xhYmVsPgogICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0icmVhc29uRm9yRXZhbHVhdGlvbiIgY2xhc3M9ImZvcm0tY29udHJvbCIgc3R5bGU9ImhlaWdodDogOTBweDsiIGlkPSJyZWFzb25Gb3JFdmFsdWF0aW9uIiA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImJ0bi10ZXh0LWV4dCBvcGVuVGV4dEFyZWEiIGhyZWY9IiIgdGFiaW5kZXg9IjAiIHRpdGxlPSJPcGVuIGluIGV4dGVuZGVkIGZvcm0iPjxpIGNsYXNzPSJtZGkgbWRpLWFycm93LWV4cGFuZCBmb250LTIwIGJsdWUtMSI+PC9pPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgoKICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiPlByaW9yaXR5PHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9InByaW9yaXR5IiBpZD0icHJpb3JpdHkiID4NCjxvcHRpb24gdmFsdWU9IiI+LS1TZWxlY3QgUHJpb3JpdHktLTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjI4MCIgc2VsZWN0ZWQ9InNlbGVjdGVkIiA+VXJnZW50PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2MjkwIiA+SGlnaDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjMwMCIgPk1lZGl1bTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjMxMCIgPkxvdzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjMyMCIgPlRvIGJlIFByaW9yaXRpemVkPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkFzc2lnbmVkIFRvPC9sYWJlbD48c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25Ub0RhdGEgPSB7ImlkIjoiVXNlcl82OTc5IiwibmFtZSI6ImJoYWd5YSJ9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkV2l0aExpc3RVcmwgPSAiL3NpZ25hbC91c2VyL3NlYXJjaFVzZXJHcm91cExpc3QiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkV2l0aFZhbHVlc1VybCA9ICIvc2lnbmFsL3V0aWwvc2hhcmVkV2l0aFZhbHVlcyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZFNoYXJlV2l0aCgkKCcjYXNzaWduZWRUbycpLCBzaGFyZWRXaXRoTGlzdFVybCwgc2hhcmVkV2l0aFZhbHVlc1VybCxhc3NpZ25Ub0RhdGEsdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImFzc2lnbmVkVG8iIG5hbWU9ImFzc2lnbmVkVG9WYWx1ZSIgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyIj48L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbD5BZ2dyZWdhdGUgUmVwb3J0IFN0YXJ0IERhdGU8L2xhYmVsPiZuYnNwOzxzcGFuIGlkPSJhZ2dSZXBvcnRTdGFydERhdGUiPjwvc3Bhbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIHRvb2xiYXJJbmxpbmUiIGlkPSJhZ2dTdGFydERhdGVQaWNrZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJhZ2dTdGFydERhdGUiIHBsYWNlaG9sZGVyPSJTZWxlY3QgRGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20gc3RhcnREYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iYWdnUmVwb3J0U3RhcnREYXRlIiB0eXBlPSJ0ZXh0IiBkYXRhLWRhdGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsPkFnZ3JlZ2F0ZSBSZXBvcnQgRW5kIERhdGU8L2xhYmVsPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnVlbHV4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgdG9vbGJhcklubGluZSIgaWQ9ImFnZ0VuZERhdGVQaWNrZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJhZ2dFbmREYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlbGVjdCBEYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImFnZ1JlcG9ydEVuZERhdGUiIHR5cGU9InRleHQiIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWw+QWN0aW9uIFRha2VuPC9sYWJlbD48YnI+CiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iYWN0aW9uVGFrZW4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG11bHRpcGxlPSJ0cnVlIiBpZD0iYWN0aW9uVGFrZW4iID4NCjxvcHRpb24gdmFsdWU9IlVwZGF0ZSB0byBDQ0RTIiA+VXBkYXRlIHRvIENDRFM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IlVwZGF0ZSB0byBJQiIgPlVwZGF0ZSB0byBJQjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iUmV2aWV3IEZyZXF1ZW5jeSBJbmNyZWFzZWQiID5SZXZpZXcgRnJlcXVlbmN5IEluY3JlYXNlZDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iUFJBQyBSZXZpZXciID5QUkFDIFJldmlldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iQnJpbmcgdG8gcmV2aWV3IG1lZXRpbmciID5CcmluZyB0byByZXZpZXcgbWVldGluZzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2lnbmFsQWN0aW9uVGFrZW4iIGlkPSJzaWduYWxBY3Rpb25UYWtlbiIgdmFsdWU9IltdIiAvPgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsPlNpZ25hbCBPdXRjb21lPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJzaWduYWxPdXRjb21lIiBtdWx0aXBsZT0idHJ1ZSIgaWQ9InNpZ25hbE91dGNvbWUiID4NCjxvcHRpb24gdmFsdWU9IkNvbmZpcm1lZCBTaWduYWwiID5Db25maXJtZWQgU2lnbmFsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJSZWZ1dGVkIFNpZ25hbCIgPlJlZnV0ZWQgU2lnbmFsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJDb250aW51b3VzIE1vbml0b3JpbmciID5Db250aW51b3VzIE1vbml0b3Jpbmc8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkFkZGl0aW9uYWwgSW52ZXN0aWdhdGlvbnMiID5BZGRpdGlvbmFsIEludmVzdGlnYXRpb25zPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJNaXNzaW5nIEluZm9ybWF0aW9uIiA+TWlzc2luZyBJbmZvcm1hdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iTGFiZWxsaW5nIFVwZGF0ZSIgPkxhYmVsbGluZyBVcGRhdGU8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgdGV4dGFyZWEtZXh0Ij4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iZ2VuZXJpY0NvbW1lbnQiPkNvbW1lbnRzPC9sYWJlbD4KICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9ImdlbmVyaWNDb21tZW50IiBjbGFzcz0iZm9ybS1jb250cm9sIiBzdHlsZT0iaGVpZ2h0OiA5MHB4OyIgaWQ9ImdlbmVyaWNDb21tZW50IiA+bm90ZXMxPC90ZXh0YXJlYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImJ0bi10ZXh0LWV4dCBvcGVuVGV4dEFyZWEiIGhyZWY9IiIgdGFiaW5kZXg9IjAiIHRpdGxlPSJPcGVuIGluIGV4dGVuZGVkIGZvcm0iPjxpIGNsYXNzPSJtZGkgbWRpLWFycm93LWV4cGFuZCBmb250LTIwIGJsdWUtMSI+PC9pPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyICI+CiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIEhlYWx0aCBBdXRob3JpdHkgU2lnbmFsIFN0YXR1cwogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbD5TaWduYWwgU3RhdHVzPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJoYVNpZ25hbFN0YXR1cyIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImhhU2lnbmFsU3RhdHVzIiA+DQo8b3B0aW9uIHZhbHVlPSIiPi0tU2VsZWN0IE9uZS0tPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMDkiID5DbG9zZWQgLSBDb25maXJtZWQgU2lnbmFsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI5NyIgPkNsb3NlZCAtIFJlZnV0ZWQgU2lnbmFsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI4NSIgPkNvbW11bmljYXRlZCBQb3RlbnRpYWwgUmlzayhzKSBhbmQgUmlzayBNaW5pbWl6YXRpb24gQWN0aW9uczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNDkiID5Db25maXJtZWQgU2lnbmFsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI3MyIgPkNvbnRpbnVlZCBNb25pdG9yaW5nPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMjEiID5Db3JyZWN0ZWQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEiID5OZXc8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjM3IiA+Tm9uLVZhbGlkYXRlZCBPYnNlcnZhdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjEiID5SZWZ1dGVkIFNpZ25hbDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMTMiID5SZXZpZXcgUmVxdWlyZWQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjI1IiA+VmFsaWRhdGVkIE9ic2VydmF0aW9uPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbD5EYXRlIENsb3NlZDwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmdWVsdXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciB0b29sYmFySW5saW5lIiBpZD0iaGFEYXRlQ2xvc2VkRGF0ZVBpY2tlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9IlNlbGVjdCBEYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImhhRGF0ZUNsb3NlZCIgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJoYURhdGVDbG9zZWQiIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHRleHRhcmVhLWV4dCI+PGxhYmVsPkNvbW1lbnRzIG9uIFNpZ25hbCBTdGF0dXM8L2xhYmVsPgogICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJjb21tZW50U2lnbmFsU3RhdHVzIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iY29tbWVudFNpZ25hbFN0YXR1cyIgPmNvbW1lbnRzMjAyMDAyMDcxOTIzMzg8L3RleHRhcmVhPgogICAgICAgIDxhIGNsYXNzPSJidG4tdGV4dC1leHQgb3BlblRleHRBcmVhIiBocmVmPSIiIHRhYmluZGV4PSIwIiB0aXRsZT0iT3BlbiBpbiBleHRlbmRlZCBmb3JtIj48aSBjbGFzcz0ibWRpIG1kaS1hcnJvdy1leHBhbmQgZm9udC0yMCBibHVlLTEiPjwvaT48L2E+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ibS10LTE1IHRleHQtcmlnaHQiPgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNpZ25hbElkIiB2YWx1ZT0iMTIxOTY1MCIgaWQ9InNpZ25hbElkIiAvPgogICAgICAgIDxpbnB1dCBjbGFzcz0iYnRuIHByaW1hcnlCdXR0b24gYnRuLXByaW1hcnkgcmVwZWF0IiB0YWJpbmRleD0iMCIgYWNjZXNza2V5PSJyIiB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgIHZhbHVlPSJVcGRhdGUiLz4KICAgIDwvZGl2Pgo8L2Zvcm0+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBpZD0iZGV0YWlscyIgY2xhc3M9InRhYi1wYW5lIGZhZGUgbS1iLTEwIiByb2xlPSJ0YWJwYW5lbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciAiPgoKICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaW5uZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICBBZC1Ib2MgUmV2aWV3CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCBwdi1zY3JvbGxhYmxlLWR0Ij4KICAgICAgICAgICAgPHRhYmxlIGlkPSJyeFRhYmxlQWRIb2NSZXZpZXciIGNsYXNzPSJyb3ctYm9yZGVyIGhvdmVyIiB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWxlcnQgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Qcm9kdWN0IE5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+RXZlbnQgUFQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGV0ZWN0ZWQgQnk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGF0YSBTb3VyY2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGlzcG9zaXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKPC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL3ZhbGlkYXRlZF9zaWduYWwvcmV2aWV3LTc3YTk4YzU4N2EzYzQ2YjI3OThlOGQ5MTgyNjAzOTI3LmpzIiA+PC9zY3JpcHQ+CjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KCiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgUXVhbnRpdGF0aXZlIFJldmlldwogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCBwdi1zY3JvbGxhYmxlLWR0Ij4KICAgICAgICAgICAgPHRhYmxlIGlkPSJyeFRhYmxlQWdncmVnYXRlUmV2aWV3IiBjbGFzcz0iIGRhdGFUYWJsZSByb3ctYm9yZGVyIGhvdmVyIHRhYmxlLWhkLWxlc3MtZ2FwIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BbGVydCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByb2R1Y3QgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TT0M8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+RXZlbnQgUFQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLXRvcCI+TmV3IFNwb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWNrZWQtY2VsbC1jZW50ZXItYm90dG9tIj5DdW0gU3BvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLXRvcCI+TmV3IFNlcjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci1ib3R0b20iPkN1bSBTZXI8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSJ3aWR0aDogNSUiPlBSUjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0id2lkdGg6IDUlIj5ST1I8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9IndpZHRoOiA1JSI+RUJHTTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0id2lkdGg6IDUlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWNrZWQtY2VsbC1jZW50ZXItdG9wIj5FQjA1PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLXRvcCI+RUI5NTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+VHJlbmQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9IndpZHRoOiA1JSI+RGF0YSBTb3VyY2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGlzcG9zaXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+SGlzdG9yeTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPC90YWJsZT4KCgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBtb2RhbC13aWRlIiBpZD0iY2FzZS1kcmlsbC1kb3duLW1vZGFsIiBkYXRhLXVybD0iIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC14bCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIj5DYXNlcyBEcmlsbCBEb3duPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImRyaWxsLWRvd24tdGFibGUtY29udGFpbmVyIiBjbGFzcz0icGFuZWwtYm9keSI+PC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUgbW9kYWwteGxnIiBpZD0icHJvZHVjdEV2ZW50SGlzdG9yeU1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiPlByb2R1Y3QgRXZlbnQgSGlzdG9yeSAgOiA8c3BhbiBpZD0icHJvZHVjdE5hbWUiPjwvc3Bhbj4tPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImV2ZW50TmFtZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJjb25maWdJZCIvPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSIgcHVsbC1yaWdodCBjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgCgo8c3BhbiB0YWJpbmRleD0iMCIgY2xhc3M9InB1bGwtcmlnaHQgcG9zLXJlbCBtLXItMTUiIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXRpdGxlPSJFeHBvcnQgdG8iIGRhdGEtcGxhY2VtZW50PSJib3R0b20iPgogICAgPHNwYW4gY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBleHBvcnRQYW5lbCIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiA+CiAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZXhwb3J0IGJsdWUtMSBmb250LTI0IGxoLTEiPjwvaT4KICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQgaGlkZGVuIj48L3NwYW4+CiAgICA8L3NwYW4+CiAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZXhwb3J0LXR5cGUtbGlzdCIgaWQ9ImV4cG9ydFR5cGVzQ2FzZUhpc3RvcnkiPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9wcm9kdWN0RXZlbnRIaXN0b3J5L2V4cG9ydFJlcG9ydD9vdXRwdXRGb3JtYXQ9UERGJmFtcDthbGVydE5hbWU9cHJvZHVjdEV2ZW50SGlzdG9yeSIgc3R5bGU9Im1hcmdpbi1yaWdodDogMjBweCIgY2xhc3M9ImV4cG9ydENhc2VIaXN0b3J5Ij4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9wZGYtaWNvbi1hNmU3ZDdkOWI5YzQ3ZmI2Y2ZkNTYxMWE5MTRiMmRiNS5qcGciIGNsYXNzPSJwZGYtaWNvbiIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+IFNhdmUgYXMgUERGCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9wcm9kdWN0RXZlbnRIaXN0b3J5L2V4cG9ydFJlcG9ydD9vdXRwdXRGb3JtYXQ9WExTWCZhbXA7YWxlcnROYW1lPXByb2R1Y3RFdmVudEhpc3RvcnkiIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDIwcHgiIGNsYXNzPSJleHBvcnRDYXNlSGlzdG9yeSI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvZXhjZWwtYTQwY2U3OGNkZDg2Y2FjODAwNDE2M2JmNzM2ODAyZGEuZ2lmIiBjbGFzcz0iZXhjZWwtaWNvbiIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+IFNhdmUgYXMgRXhjZWwKICAgICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3Byb2R1Y3RFdmVudEhpc3RvcnkvZXhwb3J0UmVwb3J0P291dHB1dEZvcm1hdD1ET0NYJmFtcDthbGVydE5hbWU9cHJvZHVjdEV2ZW50SGlzdG9yeSIgY2xhc3M9ImV4cG9ydENhc2VIaXN0b3J5Ij4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy93b3JkLWljb24tZDVkYWQzMTExZGFmMDE1MjBmMDNkOTcwNzJmYTAyNDcucG5nIiBjbGFzcz0id29yZC1pY29uIiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4gU2F2ZSBhcyBXb3JkCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgPC91bD4KPC9zcGFuPgoKCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlJldmlldyBIaXN0b3J5IGZvciBDdXJyZW50IFByb2R1Y3QtRXZlbnQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN1cnJlbnQtYWxlcnQtaGlzdG9yeS1jb250YWluZXIiIGNsYXNzPSJsaXN0IG0tdC0xNSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIiBpZD0iY3VycmVudEFsZXJ0SGlzdG9yeU1vZGFsVGFibGUiIHN0eWxlPSJ3aWR0aDogMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFsZXJ0IE5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaXNwb3NpdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkp1c3RpZmljYXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Qcmlvcml0eTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlRhZ3M8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5QZXJmb3JtZWQgQnk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgaWQ9ImN1cnJlbnRBbGVydEhpc3RvcnlNb2RhbFRhYmxlQm9keSIgY2xhc3M9InRhYmxlTW9kYWxCb2R5Ij48L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3ggbS10LTE1Ij4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UmV2aWV3IEhpc3RvcnkgRnJvbSBPdGhlciBBbGVydHM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im90aGVyLWFsZXJ0cy1oaXN0b3J5LWNvbnRhaW5lciIgY2xhc3M9Imxpc3QgbS10LTE1IiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiIGlkPSJvdGhlckFsZXJ0c0hpc3RvcnlNb2RhbFRhYmxlIiBzdHlsZT0id2lkdGg6IDEwMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BbGVydCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGlzcG9zaXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5KdXN0aWZpY2F0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UHJpb3JpdHk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UYWdzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGVyZm9ybWVkIEJ5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGlkPSJvdGhlckFsZXJ0c0hpc3RvcnlNb2RhbFRhYmxlQm9keSIgY2xhc3M9InRhYmxlTW9kYWxCb2R5Ij48L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHByb2R1Y3QtZXZlbnQtaGlzdG9yeS1tb2RhbC1jbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgQ2xvc2UKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJjb21tZW50TW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiIHN0eWxlPSJtYXJnaW4tbGVmdDogMDttYXJnaW4tcmlnaHQ6IDAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj7Dlzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUgIiBzdHlsZT0iZm9udC13ZWlnaHQ6IGJvbGQiPiBDb21tZW50cyA6CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImNvbW1lbnQtbWV0YS1pbmZvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImlzUHJvY2Vzc2luZyBtZGkgbWRpLXNwaW4gbWRpLWxvYWRpbmciIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9pPgogICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKCgoKCgoKCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IiBzdHlsZT0ibWF4LWhlaWdodDogNjAwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibm8tY29tbWVudHMiIGNsYXNzPSJoaWRlIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1jZW50ZXIiPlRoZXJlIGFyZSBubyBjb21tZW50czwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBpZD0iYWxlcnQtY29tbWVudC1jb250YWluZXIiIGNsYXNzPSJsaXN0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48dGV4dGFyZWEgbWF4bGVuZ3RoPSI0MDAwIiBuYW1lPSJjb21tZW50Ym94IiBpZD0iY29tbWVudGJveCIgcGxhY2Vob2xkZXI9IlBsZWFzZSBlbnRlciB5b3VyIGNvbW1lbnQgaGVyZS4iIGNsYXNzPSJmb3JtLWNvbnRyb2wgaGVpZ2h0LTE1MCIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY3JlYXRlZEJ5Ij48L3NwYW4+CgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNvbW1lbnRJZCIvPgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnVsa09wdGlvbnNTZWN0aW9uIHB1bGwtbGVmdCBtLWwtNSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsQm9sZCBtLXItMTUiIGZvcj0iY3VycmVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0ibS1yLTUiIHR5cGU9InJhZGlvIiBuYW1lPSJidWxrT3B0aW9ucyIgaWQ9ImN1cnJlbnQiIHZhbHVlPSJjdXJyZW50IiBjaGVja2VkPgogICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50IDxzcGFuIGNsYXNzPSJhbGVydFR5cGVUZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsQm9sZCIgZm9yPSJhbGxTZWxlY3RlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0ibS1yLTUiIHR5cGU9InJhZGlvIiBuYW1lPSJidWxrT3B0aW9ucyIgaWQ9ImFsbFNlbGVjdGVkIiB2YWx1ZT0iYWxsU2VsZWN0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZCA8c3BhbiBjbGFzcz0iYWxlcnRUeXBlVGV4dCI+PC9zcGFuPnMgKDxzcGFuIGNsYXNzPSJjb3VudCI+PC9zcGFuPikKICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBhZGQtY29tbWVudHMiPgogICAgICAgICAgICAgICAgICAgIEFkZAogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBhbGVydC1jb21tZW50LW1vZGFsLWNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICBDbG9zZQogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbiI+CiAgICAgICAgICAgIDxzcGFuIGlkPSJhcHBsaWNhdGlvbiI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0idmFsaWRhdGVkU2lnbmFsSWQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImFzc2lnbmVkVG8iPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImV4ZWN1dGVkQ29uZmlnSWQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImNvbmZpZ0lkIj48L3NwYW4+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJpc1VwZGF0ZWQiIHZhbHVlPSJmYWxzZSIvPgoKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxzY3JpcHQ+CiAgICAkKCIjY29tbWVudE1vZGFsIikub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbigpewogICAgICAgICQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gaW5wdXQjY3VycmVudCcpLmNsaWNrKCk7CiAgICB9KTsKPC9zY3JpcHQ+CgoKPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciAiPgogICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4KICAgICAgICAgICAgICAgIFF1YWxpdGF0aXZlIFJldmlldwogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50IHB2LXNjcm9sbGFibGUtZHQiPgogICAgICAgICAgICA8dGFibGUgaWQ9InJ4VGFibGVTaW5nbGVSZXZpZXciIGNsYXNzPSJyb3ctYm9yZGVyIGhvdmVyIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9IndpZHRoOjEzJSI+QWxlcnQgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSJ3aWR0aDo1JSI+UHJpb3JpdHk8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0id2lkdGg6OSUiPkNhc2UgTnVtYmVyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9IndpZHRoOjEwJSI+UHJvZHVjdCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RXZlbnQgUFQ8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TL1U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0id2lkdGg6MTAlIj5EaXNwb3NpdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkhpc3Rvcnk8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBtb2RhbC14bGciIGlkPSJjYXNlSGlzdG9yeU1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiA+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIj5DYXNlIEhpc3Rvcnk6IDxzcGFuIGlkPSJjYXNlTnVtYmVyIj48L3NwYW4+LTxzcGFuIGlkPSJwcm9kdWN0RmFtaWx5Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNhc2VWZXJzaW9uIiAvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InByb2R1Y3ROYW1lIiAvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImFsZXJ0Q29uZmlnSWQiIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0icHQiIC8+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIHB1bGwtcmlnaHQiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIAoKPHNwYW4gdGFiaW5kZXg9IjAiIGNsYXNzPSJwdWxsLXJpZ2h0IHBvcy1yZWwgbS1yLTE1IiBzdHlsZT0iY3Vyc29yOiBwb2ludGVyIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS10aXRsZT0iRXhwb3J0IHRvIiBkYXRhLXBsYWNlbWVudD0iYm90dG9tIj4KICAgIDxzcGFuIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgZXhwb3J0UGFuZWwiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgPgogICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWV4cG9ydCBibHVlLTEgZm9udC0yNCBsaC0xIj48L2k+CiAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0IGhpZGRlbiI+PC9zcGFuPgogICAgPC9zcGFuPgogICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGV4cG9ydC10eXBlLWxpc3QiIGlkPSJleHBvcnRUeXBlc0Nhc2VIaXN0b3J5Ij4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvY2FzZUhpc3RvcnkvZXhwb3J0UmVwb3J0P291dHB1dEZvcm1hdD1QREYmYW1wO2FsZXJ0TmFtZT1jYXNlSGlzdG9yeSIgc3R5bGU9Im1hcmdpbi1yaWdodDogMjBweCIgY2xhc3M9ImV4cG9ydENhc2VIaXN0b3J5Ij4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9wZGYtaWNvbi1hNmU3ZDdkOWI5YzQ3ZmI2Y2ZkNTYxMWE5MTRiMmRiNS5qcGciIGNsYXNzPSJwZGYtaWNvbiIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+IFNhdmUgYXMgUERGCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9jYXNlSGlzdG9yeS9leHBvcnRSZXBvcnQ/b3V0cHV0Rm9ybWF0PVhMU1gmYW1wO2FsZXJ0TmFtZT1jYXNlSGlzdG9yeSIgc3R5bGU9Im1hcmdpbi1yaWdodDogMjBweCIgY2xhc3M9ImV4cG9ydENhc2VIaXN0b3J5Ij4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9leGNlbC1hNDBjZTc4Y2RkODZjYWM4MDA0MTYzYmY3MzY4MDJkYS5naWYiIGNsYXNzPSJleGNlbC1pY29uIiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4gU2F2ZSBhcyBFeGNlbAogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvY2FzZUhpc3RvcnkvZXhwb3J0UmVwb3J0P291dHB1dEZvcm1hdD1ET0NYJmFtcDthbGVydE5hbWU9Y2FzZUhpc3RvcnkiIGNsYXNzPSJleHBvcnRDYXNlSGlzdG9yeSI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvd29yZC1pY29uLWQ1ZGFkMzExMWRhZjAxNTIwZjAzZDk3MDcyZmEwMjQ3LnBuZyIgY2xhc3M9IndvcmQtaWNvbiIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+IFNhdmUgYXMgV29yZAogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgIDwvdWw+Cjwvc3Bhbj4KCgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgoKICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNhc2UtaGlzdG9yeS1jb250YWluZXIiIGNsYXNzPSJsaXN0Ij4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIG0tYi0xNSI+UmV2aWV3IEhpc3RvcnkgZm9yIEN1cnJlbnQgUHJvZHVjdDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIGNhc2VIaXN0b3J5TW9kYWxUYWJsZSIgaWQ9ImNhc2VIaXN0b3J5TW9kYWxUYWJsZSIgc3R5bGU9IndpZHRoOiAxMDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWxlcnQgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGlzcG9zaXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkp1c3RpZmljYXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByaW9yaXR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UYWdzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5QZXJmb3JtZWQgQnk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBpZD0iY2FzZUhpc3RvcnlNb2RhbFRhYmxlQm9keSIgY2xhc3M9InRhYmxlTW9kYWxCb2R5Ij48L3Rib2R5PgogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXNlLWhpc3RvcnktY29udGFpbmVyX3N1c3BlY3QiIGNsYXNzPSJsaXN0Ij4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIG0tYi0xNSI+UmV2aWV3IEhpc3RvcnkgZm9yIE90aGVyIFN1c3BlY3QgUHJvZHVjdHMvQWxlcnRzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiIGlkPSJjYXNlSGlzdG9yeU1vZGFsVGFibGVTdXNwZWN0IiBzdHlsZT0id2lkdGg6IDEwMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BbGVydCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaXNwb3NpdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+SnVzdGlmaWNhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UHJpb3JpdHk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlRhZ3M8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBlcmZvcm1lZCBCeTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGlkPSJjYXNlSGlzdG9yeU1vZGFsVGFibGVCb2R5MiIgY2xhc3M9InRhYmxlTW9kYWxCb2R5Ij48L3Rib2R5PgogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBjYXNlLWhpc3RvcnktbW9kYWwtY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgIENsb3NlCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJjb21tZW50TW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiIHN0eWxlPSJtYXJnaW4tbGVmdDogMDttYXJnaW4tcmlnaHQ6IDAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj7Dlzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUgIiBzdHlsZT0iZm9udC13ZWlnaHQ6IGJvbGQiPiBDb21tZW50cyA6CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImNvbW1lbnQtbWV0YS1pbmZvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImlzUHJvY2Vzc2luZyBtZGkgbWRpLXNwaW4gbWRpLWxvYWRpbmciIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9pPgogICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKCgoKCgoKCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IiBzdHlsZT0ibWF4LWhlaWdodDogNjAwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibm8tY29tbWVudHMiIGNsYXNzPSJoaWRlIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1jZW50ZXIiPlRoZXJlIGFyZSBubyBjb21tZW50czwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBpZD0iYWxlcnQtY29tbWVudC1jb250YWluZXIiIGNsYXNzPSJsaXN0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48dGV4dGFyZWEgbWF4bGVuZ3RoPSI0MDAwIiBuYW1lPSJjb21tZW50Ym94IiBpZD0iY29tbWVudGJveCIgcGxhY2Vob2xkZXI9IlBsZWFzZSBlbnRlciB5b3VyIGNvbW1lbnQgaGVyZS4iIGNsYXNzPSJmb3JtLWNvbnRyb2wgaGVpZ2h0LTE1MCIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY3JlYXRlZEJ5Ij48L3NwYW4+CgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNvbW1lbnRJZCIvPgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnVsa09wdGlvbnNTZWN0aW9uIHB1bGwtbGVmdCBtLWwtNSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsQm9sZCBtLXItMTUiIGZvcj0iY3VycmVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0ibS1yLTUiIHR5cGU9InJhZGlvIiBuYW1lPSJidWxrT3B0aW9ucyIgaWQ9ImN1cnJlbnQiIHZhbHVlPSJjdXJyZW50IiBjaGVja2VkPgogICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50IDxzcGFuIGNsYXNzPSJhbGVydFR5cGVUZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsQm9sZCIgZm9yPSJhbGxTZWxlY3RlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0ibS1yLTUiIHR5cGU9InJhZGlvIiBuYW1lPSJidWxrT3B0aW9ucyIgaWQ9ImFsbFNlbGVjdGVkIiB2YWx1ZT0iYWxsU2VsZWN0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZCA8c3BhbiBjbGFzcz0iYWxlcnRUeXBlVGV4dCI+PC9zcGFuPnMgKDxzcGFuIGNsYXNzPSJjb3VudCI+PC9zcGFuPikKICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBhZGQtY29tbWVudHMiPgogICAgICAgICAgICAgICAgICAgIEFkZAogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBhbGVydC1jb21tZW50LW1vZGFsLWNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICBDbG9zZQogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbiI+CiAgICAgICAgICAgIDxzcGFuIGlkPSJhcHBsaWNhdGlvbiI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0idmFsaWRhdGVkU2lnbmFsSWQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImFzc2lnbmVkVG8iPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImV4ZWN1dGVkQ29uZmlnSWQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImNvbmZpZ0lkIj48L3NwYW4+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJpc1VwZGF0ZWQiIHZhbHVlPSJmYWxzZSIvPgoKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxzY3JpcHQ+CiAgICAkKCIjY29tbWVudE1vZGFsIikub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbigpewogICAgICAgICQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gaW5wdXQjY3VycmVudCcpLmNsaWNrKCk7CiAgICB9KTsKPC9zY3JpcHQ+CgoKCjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaW5uZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICBMaXRlcmF0dXJlIFJldmlldwogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50IHB2LXNjcm9sbGFibGUtZHQiPgogICAgICAgIDx0YWJsZSBpZD0icnhUYWJsZUxpdGVyYXR1cmVSZXZpZXciIGNsYXNzPSJkYXRhVGFibGUgcm93LWJvcmRlciBob3ZlciB0YWJsZS1oZC1sZXNzLWdhcCBuby1mb290ZXIiIHdpZHRoPSIxMDAlIj4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGg+QWxlcnQgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICA8dGg+UHJpb3JpdHk8L3RoPgogICAgICAgICAgICAgICAgPHRoPlRpdGxlPC90aD4KICAgICAgICAgICAgICAgIDx0aD5BdXRob3JzPC90aD4KICAgICAgICAgICAgICAgIDx0aD5QdWJsaWNhdGlvbiBEYXRlPC90aD4KICAgICAgICAgICAgICAgIDx0aD5EaXNwb3NpdGlvbjwvdGg+CiAgICAgICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICA8L3RhYmxlPgoKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImNvbW1lbnRNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAwO21hcmdpbi1yaWdodDogMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSAiIHN0eWxlPSJmb250LXdlaWdodDogYm9sZCI+IENvbW1lbnRzIDoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iY29tbWVudC1tZXRhLWluZm8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaXNQcm9jZXNzaW5nIG1kaSBtZGktc3BpbiBtZGktbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2k+CiAgICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAoKCgoKCgoKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiIHN0eWxlPSJtYXgtaGVpZ2h0OiA2MDBweDsgb3ZlcmZsb3cteTogYXV0bzsiPgogICAgICAgICAgICA8ZGl2IGlkPSJuby1jb21tZW50cyIgY2xhc3M9ImhpZGUiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWNlbnRlciI+VGhlcmUgYXJlIG5vIGNvbW1lbnRzPC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhbGVydC1jb21tZW50LWNvbnRhaW5lciIgY2xhc3M9Imxpc3QiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPjx0ZXh0YXJlYSBtYXhsZW5ndGg9IjQwMDAiIG5hbWU9ImNvbW1lbnRib3giIGlkPSJjb21tZW50Ym94IiBwbGFjZWhvbGRlcj0iUGxlYXNlIGVudGVyIHlvdXIgY29tbWVudCBoZXJlLiIgY2xhc3M9ImZvcm0tY29udHJvbCBoZWlnaHQtMTUwIiA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjcmVhdGVkQnkiPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iY29tbWVudElkIi8+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidWxrT3B0aW9uc1NlY3Rpb24gcHVsbC1sZWZ0IG0tbC01IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibGFiZWxCb2xkIG0tci0xNSIgZm9yPSJjdXJyZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJtLXItNSIgdHlwZT0icmFkaW8iIG5hbWU9ImJ1bGtPcHRpb25zIiBpZD0iY3VycmVudCIgdmFsdWU9ImN1cnJlbnQiIGNoZWNrZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJlbnQgPHNwYW4gY2xhc3M9ImFsZXJ0VHlwZVRleHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibGFiZWxCb2xkIiBmb3I9ImFsbFNlbGVjdGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJtLXItNSIgdHlwZT0icmFkaW8iIG5hbWU9ImJ1bGtPcHRpb25zIiBpZD0iYWxsU2VsZWN0ZWQiIHZhbHVlPSJhbGxTZWxlY3RlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdGVkIDxzcGFuIGNsYXNzPSJhbGVydFR5cGVUZXh0Ij48L3NwYW4+cyAoPHNwYW4gY2xhc3M9ImNvdW50Ij48L3NwYW4+KQogICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGFkZC1jb21tZW50cyI+CiAgICAgICAgICAgICAgICAgICAgQWRkCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGFsZXJ0LWNvbW1lbnQtbW9kYWwtY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgIENsb3NlCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImFwcGxpY2F0aW9uIj48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGlkPSJ2YWxpZGF0ZWRTaWduYWxJZCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iYXNzaWduZWRUbyI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iZXhlY3V0ZWRDb25maWdJZCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iY29uZmlnSWQiPjwvc3Bhbj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImlzVXBkYXRlZCIgdmFsdWU9ImZhbHNlIi8+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPHNjcmlwdD4KICAgICQoIiNjb21tZW50TW9kYWwiKS5vbignc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgJCgnZGl2LmJ1bGtPcHRpb25zU2VjdGlvbiBpbnB1dCNjdXJyZW50JykuY2xpY2soKTsKICAgIH0pOwo8L3NjcmlwdD4KCjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJzaWduYWxJZCIgdmFsdWU9IjEyMTk2NTAiIC8+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibGlua2VkQ29uZmlndXJhdGlvbnMiIGNsYXNzPSJ0YWItcGFuZSBmYWRlIG0tYi0xMCIgcm9sZT0idGFicGFuZWwiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KCiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgTGlua2VkIENvbmZpZ3VyYXRpb25zCiAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1yaWdodCBpY28tbWVudSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIGV4cG9ydFBhbmVsIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHRhYmluZGV4PSIwIiB0aXRsZT0iQWxlcnQgQ29uZmlndXJhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktcGx1cy1ib3ggYmx1ZS0xIGZvbnQtMjQiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQgaGlkZGVuIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9zaW5nbGVDYXNlQWxlcnQvY3JlYXRlP3NpZ25hbElkPTEyMTk2NTAiIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFF1YWxpdGF0aXZlIENvbmZpZ3VyYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93bi1zdWJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+UXVhbnRpdGF0aXZlIENvbmZpZ3VyYXRpb248L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9hZ2dyZWdhdGVDYXNlQWxlcnQvY3JlYXRlP3NpZ25hbElkPTEyMTk2NTAiIHRhcmdldD0iX2JsYW5rIiB0YWJpbmRleD0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBWQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9ldmRhc0FsZXJ0L2NyZWF0ZT9zaWduYWxJZD0xMjE5NjUwIiB0YXJnZXQ9Il9ibGFuayIgdGFiaW5kZXg9IjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZkYXMgQ29uZmlndXJhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCI+CiAgICAgICAgICAgIDx0YWJsZSBpZD0ibGlua2VkQ29uZmlndXJhdGlvblRhYmxlIiBjbGFzcz0icm93LWJvcmRlciBob3ZlciIgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5BbGVydCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+QWxlcnQgVHlwZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlZlcnNpb248L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlIFJhbmdlPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+QWxlcnQgQ3JpdGVyaWE8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5FeGVjdXRpb24gRGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkFjdGlvbjwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBpZD0iYXNzZXNzbWVudHMiIGNsYXNzPSJ0YWItcGFuZSBmYWRlIG0tYi0xMCIgcm9sZT0idGFicGFuZWwiPgogICAgICAgICAgICAgICAgICAgIAo8c2NyaXB0PgoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCIucmVmcmVzaC1jaGFydHMiKS5oaWRlKCk7CiAgICAgICAgJCgiI2dlblNpZ25hbFN1bW1hcnkiKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoIiNzaWduYWwtc3VtbWFyeSIpLmh0bWwoJCgiI3N1bW1hcnkiKS5odG1sKCkpOwogICAgICAgIH0pOwoKICAgICAgICAkKCIuY2F1c2FsaXR5LWFzc2Vzc21lbnQiKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBjYXVzYWxpdHlNb2RhbCA9ICQoIiNjYXVzYWxpdHlNb2RhbCIpOwogICAgICAgICAgICBjYXVzYWxpdHlNb2RhbC5tb2RhbCgic2hvdyIpOwogICAgICAgIH0pOwogICAgfSk7CiAgICAkKCdhI2Fzc2Vzc21lbnRUYWInKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgY2xlYXJBbGxUZXh0QXNzZXNzbWVudChQUk9EVUNUX0RJQ1RJT05BUlkpOwogICAgICAgIGNsZWFyQWxsVGV4dEFzc2Vzc21lbnQoRVZFTlRfRElDVElPTkFSWSk7CiAgICAgICAgJCgiLmdlbmVyYXRlLWFzc2Vzc21lbnQtcmVwb3J0cyIpLmNsaWNrKCk7CiAgICAgICAgJCgnYSNhc3Nlc3NtZW50VGFiJykudW5iaW5kKCJjbGljayIpOwogICAgfSk7CgogICAgdmFyIGpvaW5WYWx1ZXNJbk9iamVjdEFycmF5ID0gZnVuY3Rpb24gKHJlc3VsdFNldCwgcHJvcCkgewogICAgICAgIHJldHVybiByZXN1bHRTZXQucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBhICsgWyIiLCAiLCAiXVsrISFhLmxlbmd0aF0gKyBiW3Byb3BdOwogICAgICAgIH0sICIiKQogICAgfQo8L3NjcmlwdD4KCjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KCiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgU2lnbmFsIEFzc2Vzc21lbnQKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50Ij4KICAgICAgICAgICAgPGJyLz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNhc3Nlc3NtZW50RmlsdGVyUGFuZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJhc3Nlc3NtZW50RmlsdGVyUGFuZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPkFzc2Vzc21lbnQgRmlsdGVyIFBhbmVsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGluIiBpZD0iYXNzZXNzbWVudEZpbHRlclBhbmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWNvbnRlbnQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkRhdGEgU291cmNlOjwvbGFiZWw+IFBWQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRhU291cmNlcyIgdmFsdWU9InB2YSIgY2xhc3M9InNlbGVjdGVkRGF0YXNvdXJjZSIgaWQ9ImRhdGFTb3VyY2VzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkRhdGUgUmFuZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZGF0ZVJhbmdlIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZD0icmVxdWlyZWQiIGlkPSJkYXRlUmFuZ2UiID4NCjxvcHRpb24gdmFsdWU9IlNJR05BTF9EQVRBIiA+U2lnbmFsIERhdGE8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxBU1RfM19NT05USCIgPkxhc3QgMyBNb250aHM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxBU1RfNl9NT05USCIgPkxhc3QgNiBNb250aHM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxBU1RfMV9ZRUFSIiBzZWxlY3RlZD0ic2VsZWN0ZWQiID5MYXN0IDEgWWVhcjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iTEFTVF8zX1lFQVIiID5MYXN0IDMgWWVhcnM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkxBU1RfNV9ZRUFSIiA+TGFzdCA1IFllYXJzPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9kdWN0IFNlbGVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNob3dQcm9kdWN0U2VsZWN0aW9uQXNzZXNzbWVudCIgY2xhc3M9InNob3dEaWN0aW9uYXJ5U2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvblNlYXJjaCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBpZD0ic2VhcmNoUHJvZHVjdHNBc3Nlc3NtZW50IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjcHJvZHVjdE1vZGFsQXNzZXNzbWVudCIgY2xhc3M9InByb2R1Y3RSYWRpbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc2VhcmNoICI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InByb2R1Y3RTZWxlY3Rpb25Bc3Nlc3NtZW50IiB2YWx1ZT0ieyZxdW90OzEmcXVvdDs6W10sJnF1b3Q7MiZxdW90OzpbXSwmcXVvdDszJnF1b3Q7OltdLCZxdW90OzQmcXVvdDs6W10sJnF1b3Q7NSZxdW90OzpbXSwmcXVvdDs2JnF1b3Q7Olt7JnF1b3Q7bmFtZSZxdW90OzomcXVvdDtQRU5JQ0lMTElOIEcmcXVvdDssJnF1b3Q7aWQmcXVvdDs6JnF1b3Q7MTc4NDcwODgyJnF1b3Q7fV0sJnF1b3Q7NyZxdW90OzpbXSwmcXVvdDs4JnF1b3Q7OltdLCZxdW90OzkmcXVvdDs6W119IiBpZD0icHJvZHVjdFNlbGVjdGlvbkFzc2Vzc21lbnQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkV2ZW50IFNlbGVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+PC9sYWJlbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzaG93RXZlbnRTZWxlY3Rpb25Bc3Nlc3NtZW50IiBjbGFzcz0ic2hvd0RpY3Rpb25hcnlTZWxlY3Rpb24iPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uU2VhcmNoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGlkPSJzZWFyY2hFdmVudHNBc3Nlc3NtZW50IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjZXZlbnRNb2RhbEFzc2Vzc21lbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXNlYXJjaCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJldmVudFNlbGVjdGlvbkFzc2Vzc21lbnQiIHZhbHVlPSJ7JnF1b3Q7MSZxdW90OzpbXSwmcXVvdDsyJnF1b3Q7OltdLCZxdW90OzMmcXVvdDs6W10sJnF1b3Q7NCZxdW90OzpbeyZxdW90O25hbWUmcXVvdDs6JnF1b3Q7TmVwaHJvdGljIHN5bmRyb21lJnF1b3Q7LCZxdW90O2lkJnF1b3Q7OiZxdW90OzEwMDI5MTY0JnF1b3Q7fV0sJnF1b3Q7NSZxdW90OzpbXSwmcXVvdDs2JnF1b3Q7OltdfSIgaGlkZGVuPSJoaWRkZW4iIGlkPSJldmVudFNlbGVjdGlvbkFzc2Vzc21lbnQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnZW5lcmF0ZS1hc3Nlc3NtZW50LXJlcG9ydHMgc2F2ZSBidG4gYnRuLWxhcmdlIGJ0bi1wcmltYXJ5IG0tdC0yNSI+R2VuZXJhdGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icmVwb3J0LWdlbmVyYXRpbmciIHN0eWxlPSIgZm9udC1zaXplOjIwcHg7IGRpc3BsYXk6IG5vbmU7IiBjbGFzcz0iZmEgZmEtc3Bpbm5lciBmYS1zcGluIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaGlkZGVuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciI+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjY29uY2VwdHNQYW5lbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbmVwdHNQYW5lbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+TWVkaWNhbCBDb25jZXB0IERpc3RyaWJ1dGlvbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBpbiIgaWQ9ImNvbmNlcHRzUGFuZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPgogICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBicy1leGFtcGxlIGZpeEhlYWRlci10YWJsZSB0ZXh0LWNlbnRlciIgaWQ9InB2VG9wSGVhZCI+CiAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJoZWFkUm93IHRleHQtbGVmdCI+TWVkaWNhbCBDb25jZXB0czwvdGg+CiAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImhlYWRSb3cgdGV4dC1jZW50ZXIiPkNhc2UgQ291bnQ8L3RoPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJoZWFkUm93IHRleHQtY2VudGVyIj5QRUMgQ291bnQoUFZBKTwvdGg+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImhlYWRSb3cgdGV4dC1jZW50ZXIiPlBFQyBDb3VudChFVkRBUyk8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgIAogICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0ICI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmcgcGFuZWwtdGl0bGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIE1lZGljYWwgQ29uY2VwdHMgRGlzdHJpYnV0aW9uCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXJlZnJlc2ggbWVkaWNhbENvbmNlcHRDaGFydCIgc3R5bGU9ImN1cnNvcjpwb2ludGVyOyBmbG9hdDogcmlnaHQiPjwvaT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJtZWRDb25jZXB0c0RhdGEiIGlkPSJtZWRDb25jZXB0c0RhdGEiIHZhbHVlPSJbXSIgLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1lZENvbmNlcHRzRGF0YUNDIiBpZD0ibWVkQ29uY2VwdHNEYXRhQ0MiIHZhbHVlPSJbXSIgLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1lZENvbmNlcHRzRGF0YVBBIiBpZD0ibWVkQ29uY2VwdHNEYXRhUEEiIHZhbHVlPSJbXSIgLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1lZENvbmNlcHRzRGF0YVBGIiBpZD0ibWVkQ29uY2VwdHNEYXRhUEYiIHZhbHVlPSJbXSIgLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1lZENvbmNlcHRzRGF0YVBFIiBpZD0ibWVkQ29uY2VwdHNEYXRhUEUiIHZhbHVlPSJbXSIgLz4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1lZGljYWxDb25jZXB0IiBjbGFzcz0ibWF4V2lkdGgiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZWRpY2FsQ29uY2VwdENoYXJ0Ij5Mb2FkaW5nIGNoYXJ0cyBwbGVhc2Ugd2FpdC4uLi48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxici8+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaW5uZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3BlUGFuZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJwZVBhbmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj5QRUMgQW5hbHlzaXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgaW4iIGlkPSJwZVBhbmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWNvbnRlbnQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icXVhbnRpdGF0aXZlLXNjb3JlLWNvbnRhaW5lciIgY2xhc3M9Imxpc3QiPgogICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBjYXNlSGlzdG9yeU1vZGFsVGFibGUiIGlkPSJwZUFuYWx5c2lzVGFibGUiIHN0eWxlPSJ3aWR0aDogMTAwJSI+CiAgICAgICAgPHRoZWFkPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoPkRhdGEgU291cmNlPC90aD4KICAgICAgICAgICAgPHRoPlByb2R1Y3Q8L3RoPgogICAgICAgICAgICA8dGg+RXZlbnQ8L3RoPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci10b3AiPk5ldyBDb3VudDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci1ib3R0b20iPlRvdGFsIENvdW50PC9kaXY+CiAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWNrZWQtY2VsbC1jZW50ZXItdG9wIj5OZXcgRmF0YWw8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWNrZWQtY2VsbC1jZW50ZXItYm90dG9tIj5Ub3RhbCBGYXRhbDwvZGl2PgogICAgICAgICAgICA8L3RoPgogICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICBTRFIKICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgVHJlbmQKICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci10b3AiPkxpc3RlZDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci1ib3R0b20iPlNlcmlvdXM8L2Rpdj4KICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgPHRoPlByaW9yaXR5PC90aD4KICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci10b3AiPlBSUiBUcmVuZDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhY2tlZC1jZWxsLWNlbnRlci1ib3R0b20iPkVCR00gVHJlbmQ8L2Rpdj4KICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgPHRoPjwvdGg+CiAgICAgICAgPC90cj4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgPHRib2R5IGlkPSJwZUFuYWx5c2lzVGFibGVCb2R5IiBjbGFzcz0idGFibGVNb2RhbEJvZHkiPjwvdGJvZHk+CiAgICA8L3RhYmxlPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9IjEyMTk2NTAiIGlkPSJzaWduYWxJZCIgLz4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSJmYWxzZSIgaWQ9ImlzVG9waWMiLz4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsLXhsZyIgaWQ9InNob3ctZXZkYXMtY2hhcnQtbW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50IiBzdHlsZT0id2lkdGg6IDEyMDBweCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiPlRyZW5kIENoYXJ0czwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSIgc3R5bGU9ImhlaWdodDogOTAwcHg7Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJldmRhcy1jb3VudC1ieS1zdGF0dXMiIGNsYXNzPSJjaGFydC1jb250YWluZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0idHJlbmQtZGl2IiBzdHlsZT0id2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLXQtMjAiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZXZkYXMtc2NvcmVzLWJ5LXN0YXR1cyIgY2xhc3M9ImNoYXJ0LWNvbnRhaW5lciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzY29yZXMtZGl2IiBzdHlsZT0id2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9ucyAiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbiBidG4gYnRuLWRlZmF1bHQiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGlkPSJjYW5jZWwtYnQiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvdmFsaWRhdGVkX3NpZ25hbC9wZV9hbmFseXNpcy05Yjk0YjgxMTg1OGU3ZDg5NjJiMWNmYmM3NGJhOTQwYS5qcyIgPjwvc2NyaXB0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjYXNzZXNzbWVudERldGFpbHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJwZVBhbmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+QXNzZXNzbWVudCBEZXRhaWxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1yZWZyZXNoIHJlZnJlc2gtdGFibGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6cG9pbnRlcjsgZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJhc3Nlc3NtZW50RGV0YWlscyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgaW4iIGlkPSJhc3Nlc3NtZW50RGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50ICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8IS0tIEdyYXBocyBjb21lcyBoZXJlLiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaW5uZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI2dyYXBocyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9InBlUGFuZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj5DaGFydHM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGluIiBpZD0iZ3JhcGhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmcgcGFuZWwtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXJpb3VzbmVzcyBDb3VudHMgT3ZlciBUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcmVmcmVzaCByZWZyZXNoLWNoYXJ0cyBwdWxsLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjpwb2ludGVyOyBmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJzZXJpb3VzbmVzcy1vdmVyLXRpbWUtY2hhcnQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzZXZlcml0eSIgY2xhc3M9Im1heFdpZHRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNlcmlvdXNuZXNzLW92ZXItdGltZS1jaGFydCIgY2xhc3M9ImFzc2Vzc21lbnQtY2hhcnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDQwMHB4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJleGVjdXRlZElkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0ICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyBwYW5lbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpc3RyaWJ1dGlvbiBCeSBBZ2UgR3JvdXAgT3ZlciBUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcmVmcmVzaCByZWZyZXNoLWNoYXJ0cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6cG9pbnRlcjsgZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD0iYWdlLWdycC1vdmVyLXRpbWUtY2hhcnQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhZ2VHcm91cCIgY2xhc3M9Im1heFdpZHRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFnZS1ncnAtb3Zlci10aW1lLWNoYXJ0IiBjbGFzcz0iYXNzZXNzbWVudC1jaGFydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNDAwcHgiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImV4ZWN1dGVkSWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHBhbmVsLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzdHJpYnV0aW9uIEJ5IEdlbmRlciBPdmVyIFRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1yZWZyZXNoIHJlZnJlc2gtY2hhcnRzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjpwb2ludGVyOyBmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJnZW5kZXItb3Zlci10aW1lLWNoYXJ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZ2VuZGVyIiBjbGFzcz0ibWF4V2lkdGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZ2VuZGVyLW92ZXItdGltZS1jaGFydCIgY2xhc3M9ImFzc2Vzc21lbnQtY2hhcnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDQwMHB4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJleGVjdXRlZElkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0ICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyBwYW5lbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpc3RyaWJ1dGlvbiBCeSBDb3VudHJ5IE92ZXIgVGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXJlZnJlc2ggcmVmcmVzaC1jaGFydHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7IGZsb2F0OiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImNvdW50cnktb3Zlci10aW1lLWNoYXJ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY291bnRyeSIgY2xhc3M9Im1heFdpZHRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvdW50cnktb3Zlci10aW1lLWNoYXJ0IiBjbGFzcz0iYXNzZXNzbWVudC1jaGFydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNDAwcHgiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImV4ZWN1dGVkSWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHBhbmVsLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzdHJpYnV0aW9uIEJ5IENhc2UgT3V0Y29tZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXJlZnJlc2ggcmVmcmVzaC1jaGFydHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7IGZsb2F0OiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9Im91dGNvbWUtb3Zlci10aW1lLWNoYXJ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ib3V0Y29tZSIgY2xhc3M9Im1heFdpZHRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im91dGNvbWUtb3Zlci10aW1lLWNoYXJ0IiBjbGFzcz0iYXNzZXNzbWVudC1jaGFydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNDAwcHgiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImV4ZWN1dGVkSWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHBhbmVsLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzdHJpYnV0aW9uIEJ5IFNvdXJjZSBPdmVydGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXJlZnJlc2ggcmVmcmVzaC1jaGFydHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7IGZsb2F0OiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9InNlcmlvdXNuZXNzLWNvdW50LXBpZS1jaGFydCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNlcmlvdXNuZXNzLWNvdW50IiBjbGFzcz0ibWF4V2lkdGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2VyaW91c25lc3MtY291bnQtcGllLWNoYXJ0IiBjbGFzcz0iYXNzZXNzbWVudC1jaGFydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNDAwcHgiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImV4ZWN1dGVkSWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGNvbC1sZy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgcGFuZWwgcGFuZWwtZGVmYXVsdCBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmcgcGFuZWwtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaXN0cmlidXRpb24gQnkgU3lzdGVtIE9yZ2FuIENsYXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcmVmcmVzaCByZWZyZXNoLWNoYXJ0cyBwdWxsLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjpwb2ludGVyOyBmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJzeXN0ZW0tb3JnYW4taGVhdC1tYXAiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJoZWF0LW1hcC1jaGFydCIgY2xhc3M9Im1heFdpZHRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2hlYXRtYXAtMGQzNzNiMjgxZWZiM2MyZTQyNmFkNTVjYzNiODA0YjcuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvc29saWQtZ2F1Z2UuanMuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvZHlncmFwaHMvZHlncmFwaC5taW4tMGU3ZjJhODliOGM1NWU2ZjVkZDM1ZmMyOWFlYjA3OTUuanMiID48L3NjcmlwdD4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy9keWdyYXBoLTlmZmM4ZWRjMTNlOTRmMDZmMjc5NTE0ZTg5YWU5YTM0LmNzcyIvPgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL3ZhbGlkYXRlZF9zaWduYWwvaGVhdF9tYXAtZjc0N2QzNGIzYjBjNTlmNDAyMzlmYzI0M2ZiNTZhMzUuanMiID48L3NjcmlwdD4KPGRpdiBpZD0ic3lzdGVtLW9yZ2FuLWhlYXQtbWFwIiBjbGFzcz0iYXNzZXNzbWVudC1jaGFydCIgc3R5bGU9ImhlaWdodDogMTIwMHB4Ij4gPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSIwIiBpZD0iYWRkZWRDaGFydHNDb3VudCIvPgoKPHN0eWxlPgppbnB1dFt0eXBlPSJjaGVja2JveCJdLAppbnB1dFt0eXBlPSJyYWRpbyJdLAppbnB1dC5yYWRpbywKaW5wdXQuY2hlY2tib3ggewogICAgdmVydGljYWwtYWxpZ246dGV4dC10b3A7CiAgICB3aWR0aDoxM3B4OwogICAgaGVpZ2h0OjEzcHg7CiAgICBwYWRkaW5nOjA7CiAgICBtYXJnaW46MDsKICAgIHBvc2l0aW9uOnJlbGF0aXZlOwogICAgb3ZlcmZsb3c6aGlkZGVuOwogICAgdG9wOjJweDsKfQoKLmRlbW9ncmFwaHlUYWJsZSB7CiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgd2lkdGg6IDEwMCU7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLmRlbW9ncmFwaHlUYWJsZVRkIHsKICAgIHBhZGRpbmc6IDE1cHg7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgdGV4dC1hbGlnbjogbGVmdDsKfQo8L3N0eWxlPgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iY2F1c2FsaXR5TW9kYWwiIGNsYXNzPSJjYXVzYWxpdHlNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIj5DYXVzYWxpdHkgQXNzZXNzbWVudDwvbGFiZWw+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtY29uZGVuc2VkIG1vZGFsLXRhYmxlLWNhc3VhbGl0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtbWQtNSI+Q2F0ZWdvcnk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLW1kLTIiIGlkPSJjYXVzYWxpdHlWYWx1ZSI+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sc3Bhbj0iMiI+U2NvcmU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI3JvdzEtZGV0YWlsIiBjbGFzcz0iYWNjb3JkaW9uLXRvZ2dsZSBjb2xsYXBzZWQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+VGVtcG9yYWxpdHk8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4xMDA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXhzIHB1bGwtcmlnaHQiPjxpIGNsYXNzPSJpb24tbWludXMtcm91bmQiPjwvaT48L2J1dHRvbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iaGlkZGVuUm93IGNvbGxhcHNlIiBpZD0icm93MS1kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI0IiBjbGFzcz0icC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5UZW1wb3JhbCBSZWxhdGlvbnNoaXA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPiA8c2VsZWN0IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ5ZXMiIHNlbGVjdGVkPSIiPlllczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJubyI+Tm88L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idW5rbm93biI+VW5rbm93bjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtMiI+MTAwPC90ZD48L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjcm93Mi1kZXRhaWwiIGNsYXNzPSJhY2NvcmRpb24tdG9nZ2xlIGNvbGxhcHNlZCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5CaW9ncmFkaWVudDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjc1PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi14cyBwdWxsLXJpZ2h0Ij48aSBjbGFzcz0iaW9uLW1pbnVzLXJvdW5kIj48L2k+PC9idXR0b24+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImhpZGRlblJvdyBjb2xsYXBzZSIgaWQ9InJvdzItZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iNCIgY2xhc3M9InAtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJjb2wtbWQtOCI+UmVjaGFsbGVuZ2U8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ieWVzIj5ZZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im5vIj5Obzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idW5rbm93biIgc2VsZWN0ZWQ9IiI+VW5rbm93bjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPjUwPC90ZD48L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iY29sLW1kLTgiPkRlY2hhbGxlbmdlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InllcyIgc2VsZWN0ZWQ9IiI+WWVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJubyI+Tm88L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InVua25vd24iPlVua25vd248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4xMDA8L3RkPjwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNyb3czLWRldGFpbCIgY2xhc3M9ImFjY29yZGlvbi10b2dnbGUgY29sbGFwc2VkIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkV2aWRlbmNlIFN0cmVuZ3RoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+NTA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXhzIHB1bGwtcmlnaHQiPjxpIGNsYXNzPSJpb24tbWludXMtcm91bmQiPjwvaT48L2J1dHRvbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iaGlkZGVuUm93IGNvbGxhcHNlIiBpZD0icm93My1kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI0IiBjbGFzcz0icC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5QUlI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ieWVzIj5ZZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im5vIj5Obzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idW5rbm93biIgc2VsZWN0ZWQ9IiI+VW5rbm93bjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPjUwPC90ZD48L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iY29sLW1kLTgiPklDPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InllcyI+WWVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJubyI+Tm88L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InVua25vd24iIHNlbGVjdGVkPSIiPlVua25vd248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj41MDwvdGQ+PC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5UcmVuZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtMiI+IDxzZWxlY3QgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InllcyI+WWVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im5vIj5Obzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ1bmtub3duIiBzZWxlY3RlZD0iIj5Vbmtub3duPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj41MDwvdGQ+PC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI3JvdzQtZGV0YWlsIiBjbGFzcz0iYWNjb3JkaW9uLXRvZ2dsZSBjb2xsYXBzZWQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3BlY2lmaWNpdHk8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD45NTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4teHMgcHVsbC1yaWdodCI+PGkgY2xhc3M9Imlvbi1taW51cy1yb3VuZCI+PC9pPjwvYnV0dG9uPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJoaWRkZW5Sb3cgY29sbGFwc2UiIGlkPSJyb3c0LWRldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjQiIGNsYXNzPSJwLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iY29sLW1kLTgiPkxpc3RlZG5lc3M8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPiA8c2VsZWN0IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ5ZXMiPlllczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJubyIgc2VsZWN0ZWQ9IiI+Tm88L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idW5rbm93biI+VW5rbm93bjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtMiI+MDwvdGQ+PC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5ETUU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPiA8c2VsZWN0IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ5ZXMiIHNlbGVjdGVkPSIiPlllczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJubyI+Tm88L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idW5rbm93biI+VW5rbm93bjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtMiI+MTAwPC90ZD48L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjcm93NS1kZXRhaWwiIGNsYXNzPSJhY2NvcmRpb24tdG9nZ2xlIGNvbGxhcHNlZCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db2hlcmVuY2U8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD40NTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4teHMgcHVsbC1yaWdodCI+PGkgY2xhc3M9Imlvbi1taW51cy1yb3VuZCI+PC9pPjwvYnV0dG9uPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJoaWRkZW5Sb3cgY29sbGFwc2UiIGlkPSJyb3c1LWRldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjQiIGNsYXNzPSJwLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5Db25jb21pdGFudCBEcnVnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4gPHNlbGVjdCBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ieWVzIiBzZWxlY3RlZD0iIj5ZZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibm8iPk5vPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InVua25vd24iPlVua25vd248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPjEwMDwvdGQ+PC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5Db25mb3VuZGluZyBJbmRpY2F0aW9uPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4gPHNlbGVjdCBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ieWVzIj5ZZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibm8iIHNlbGVjdGVkPSIiPk5vPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InVua25vd24iPlVua25vd248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPjA8L3RkPjwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNyb3c2LWRldGFpbCIgY2xhc3M9ImFjY29yZGlvbi10b2dnbGUgY29sbGFwc2VkIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnNpc3RlbmN5PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ODA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXhzIHB1bGwtcmlnaHQiPjxpIGNsYXNzPSJpb24tbWludXMtcm91bmQiPjwvaT48L2J1dHRvbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iaGlkZGVuUm93IGNvbGxhcHNlIiBpZD0icm93Ni1kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI0IiBjbGFzcz0icC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9ImNvbC1tZC04Ij5NdWx0aXBsZSBDb3VudHJ5IEV2aWRlbmNlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4gPHNlbGVjdCBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ieWVzIiBzZWxlY3RlZD0iIj5ZZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibm8iPk5vPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InVua25vd24iIHNlbGVjdGVkPSIiPlVua25vd248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPjUwPC90ZD48L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iY29sLW1kLTgiPkNhc2UgVHlwZSBFdmlkZW5jZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtMiI+IDxzZWxlY3QgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InllcyIgc2VsZWN0ZWQ9IiI+WWVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im5vIj5Obzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ1bmtub3duIj5Vbmtub3duPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4xMDA8L3RkPjwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb2xsYXBzZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTgiIHN0eWxlPSJmb250LXdlaWdodDogYm9sZDsiPkJIIENyaXRlcmlhIExpa2VsaWhvb2QJPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiIgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0O3Bvc2l0aW9uOiBhYnNvbHV0ZTtyaWdodDogMTMuNSU7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij43MyU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGVmYXVsdCBleHBhbmRBbGwgcHVsbC1sZWZ0Ij5FeHBhbmQgQWxsPC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4teHMgYnRuLWRlZmF1bHQgY29sbGFwc2VBbGwgcHVsbC1sZWZ0IG0tbC01Ij5Db2xsYXBzZSBBbGw8L2E+CgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gcHYtYnRuLWdyZXkgd2F2ZXMtZWZmZWN0IiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DbG9zZTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWktcmVzaXphYmxlLWhhbmRsZSB1aS1yZXNpemFibGUtZSIgc3R5bGU9InotaW5kZXg6IDkwOyI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLXMiIHN0eWxlPSJ6LWluZGV4OiA5MDsiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1aS1yZXNpemFibGUtaGFuZGxlIHVpLXJlc2l6YWJsZS1zZSB1aS1pY29uIHVpLWljb24tZ3JpcHNtYWxsLWRpYWdvbmFsLXNlIiBzdHlsZT0iei1pbmRleDogOTA7Ij48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0icHJldmlvdXNBc3Nlc3NtZW50TW9kYWwiIGNsYXNzPSJwcmV2aW91c0Fzc2VzbWVudCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciCiAgICAgYXJpYS1oaWRkZW49InRydWUiPgoKICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyIgcm9sZT0iZG9jdW1lbnQiIHN0eWxlPSJ3aWR0aDogMTAwMHB4Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIj5QcmV2aW91cyBBc3Nlc3NtZW50PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDBweDttYXJnaW4tcmlnaHQ6IDBweCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJldi1hc3Nlc3NtZW50LWNvbnRhaW5lciIgY2xhc3M9Imxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIiBpZD0icHJldi1hc3Nlc3NtZW50LXRhYmxlIiBzdHlsZT0id2lkdGg6IDEwMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TaWduYWwgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNpZ25hbCBUZXJtPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGlzcG9zaXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlIENsb3NlZDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhc3QgUmV2aWV3IERhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW50czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjdGlvbnM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBpZD0iZXZkYXNIaXN0b3J5TW9kYWxUYWJsZUJvZHkiIGNsYXNzPSJ0YWJsZU1vZGFsQm9keSI+PC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBjYXNlLWhpc3RvcnktbW9kYWwtY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgIENsb3NlCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJwcm9kdWN0TW9kYWxBc3Nlc3NtZW50IiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIgogICAgIGFyaWEtbGFiZWxsZWRieT0icHJvZHVjdERpY3Rpb25hcnlMYWJlbCIKICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9InByb2R1Y3REaWN0aW9uYXJ5TGFiZWwiPlByb2R1Y3QgRGljdGlvbmFyeTwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0icm93IHNjcm9sbGFibGVWaWV3MSBwLWItMTAiPgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPk9UQz88L2xhYmVsPgoKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGxldmVsPSIxMCIgbmFtZT0iZmlsdGVyMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIHNlYXJjaFByb2R1Y3RzIGFkZGl0aW9uYWxDcml0ZXJpYSBkaWN0aW9uYXJ5LXNlbGVjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL3NpZ25hbC9wcm9kdWN0RGljdGlvbmFyeS9nZXRGaWx0ZXJMaXN0P25hbWU9TG1Qcm9kRGljRmlsdGVyMTAwIj48L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+RG9zYWdlIEZvcm11bGF0aW9uPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTEiIG5hbWU9ImZpbHRlcjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwMSI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPk1hcmtldGluZyBDYXRlZ29yeTwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbGV2ZWw9IjEyIiBuYW1lPSJmaWx0ZXIyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VhcmNoUHJvZHVjdHMgYWRkaXRpb25hbENyaXRlcmlhIGRpY3Rpb25hcnktc2VsZWN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvc2lnbmFsL3Byb2R1Y3REaWN0aW9uYXJ5L2dldEZpbHRlckxpc3Q/bmFtZT1MbVByb2REaWNGaWx0ZXIxMDIiPjwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5NYXJrZXRpbmcgU3RhdHVzPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTMiIG5hbWU9ImZpbHRlcjMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwMyI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPk1hbnVmYWN0dXJlciBMYWJlbGVyIE5hbWU8L2xhYmVsPgoKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGxldmVsPSIxNCIgbmFtZT0iZmlsdGVyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIHNlYXJjaFByb2R1Y3RzIGFkZGl0aW9uYWxDcml0ZXJpYSBkaWN0aW9uYXJ5LXNlbGVjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL3NpZ25hbC9wcm9kdWN0RGljdGlvbmFyeS9nZXRGaWx0ZXJMaXN0P25hbWU9TG1Qcm9kRGljRmlsdGVyMTA0Ij48L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+TmV3IEJpb2xvZ2ljcyAoTkIpPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTUiIG5hbWU9ImZpbHRlcjUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwNSI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPlN5bm9ueW08L2xhYmVsPgoKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGxldmVsPSIxNiIgbmFtZT0iZmlsdGVyNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIHNlYXJjaFByb2R1Y3RzIGFkZGl0aW9uYWxDcml0ZXJpYSBkaWN0aW9uYXJ5LXNlbGVjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL3NpZ25hbC9wcm9kdWN0RGljdGlvbmFyeS9nZXRGaWx0ZXJMaXN0P25hbWU9TG1Qcm9kRGljRmlsdGVyMTA2Ij48L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+U2VuZGVyIE9yZ2FuaXphdGlvbiBOYW1lPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTciIG5hbWU9ImZpbHRlcjciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwNyI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgCjwvZGl2PgoKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy01IHBhZGRpbmctbWQtYm90dG9tIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCBjaGVja2JveC1wcmltYXJ5Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX2Fzc2VzbWVudF9wcm9kdWN0X2V4YWN0U2VhcmNoIiAvPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYXNzZXNtZW50X3Byb2R1Y3RfZXhhY3RTZWFyY2giIGlkPSJhc3Nlc21lbnRfcHJvZHVjdF9leGFjdFNlYXJjaCIgIC8+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImFzc2VzbWVudF9wcm9kdWN0X2V4YWN0U2VhcmNoIj4KICAgICAgICAgICAgICAgIEV4YWN0IFNlYXJjaAogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ibS1iLTE1IHNjcm9sbC1oaWRkZW4gc2Nyb2xsYWJsZVZpZXcxIj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+VGhlcmFwZXV0aWMgZHJ1ZyBjbGFzczxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSIxIgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5BY3RpdmUgTW9pZXR5PGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgbGV2ZWw9IjIiCiAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoUHJvZHVjdHMgZm9ybS1jb250cm9sICIKICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiPgogICAgICAgIDwvZGl2PgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPlByb2R1Y3QgQWN0aXZlIE1vaWV0eTxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSIzIgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5BY3RpdmUgSW5ncmVkaWVudDxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSI0IgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5Qcm9kdWN0IEFjdGl2ZSBJbmdyZWRpZW50PGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgbGV2ZWw9IjUiCiAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoUHJvZHVjdHMgZm9ybS1jb250cm9sICIKICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiPgogICAgICAgIDwvZGl2PgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPlByb2R1Y3QgTmFtZTxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSI2IgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCBwcm9kdWN0Q29sdW1uIgogICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCI+CiAgICAgICAgPC9kaXY+CiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+QXBwbGljYXRpb24gTnVtYmVyPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgbGV2ZWw9IjciCiAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoUHJvZHVjdHMgZm9ybS1jb250cm9sICIKICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiPgogICAgICAgIDwvZGl2PgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPlVzZXIgQXNzaWdubWVudDxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSI4IgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5JTkQgUmV2aWV3ZXI8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBsZXZlbD0iOSIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hQcm9kdWN0cyBmb3JtLWNvbnRyb2wgIgogICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCI+CiAgICAgICAgPC9kaXY+CiAgICAKPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICA8Y29sdW1uLXZpZXcgaWQ9ImNvbHVtblZpZXcxIiBjbGFzcz0ic2Nyb2xsYWJsZVZpZXcyIiBvbmRhdGE9InNvdXJjZSIgcGF0aD0iMCIgZGljPSJwcm9kdWN0IgogICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5X3R5cGU9InByb2R1Y3QiIGNvbHVtbnNfbmFtZT0iVGhlcmFwZXV0aWMgZHJ1ZyBjbGFzcyxBY3RpdmUgTW9pZXR5LFByb2R1Y3QgQWN0aXZlIE1vaWV0eSxBY3RpdmUgSW5ncmVkaWVudCxQcm9kdWN0IEFjdGl2ZSBJbmdyZWRpZW50LFByb2R1Y3QgTmFtZSxBcHBsaWNhdGlvbiBOdW1iZXIsVXNlciBBc3NpZ25tZW50LElORCBSZXZpZXdlciI+PC9jb2x1bW4tdmlldz4KICAgIDwvZGl2Pgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJyb3cgc2VsZWN0ZWRQcm9kdWN0RGljdGlvbmFyeVZhbHVlQXNzZXNzbWVudCI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgPGxhYmVsPlNlbGVjdGVkOjwvbGFiZWw+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTAiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5UaGVyYXBldXRpYyBkcnVnIGNsYXNzPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsMSI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5BY3RpdmUgTW9pZXR5PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsMiI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Qcm9kdWN0IEFjdGl2ZSBNb2lldHk8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgcHJvZHVjdERpY3Rpb25hcnlWYWx1ZUFzc2Vzc21lbnQgbGV2ZWwzIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkFjdGl2ZSBJbmdyZWRpZW50PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsNCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Qcm9kdWN0IEFjdGl2ZSBJbmdyZWRpZW50PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsNSI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Qcm9kdWN0IE5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgcHJvZHVjdERpY3Rpb25hcnlWYWx1ZUFzc2Vzc21lbnQgbGV2ZWw2Ij48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkFwcGxpY2F0aW9uIE51bWJlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtOSBwcm9kdWN0RGljdGlvbmFyeVZhbHVlQXNzZXNzbWVudCBsZXZlbDciPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlciBBc3NpZ25tZW50PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsOCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5JTkQgUmV2aWV3ZXI8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgcHJvZHVjdERpY3Rpb25hcnlWYWx1ZUFzc2Vzc21lbnQgbGV2ZWw5Ij48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvcGx1Z2luL2RpY3Rpb25hcnkvcHJvZHVjdERpY3Rpb25hcnktZWVhYWRmZWY3M2I5ZThhYTNkNWJiY2NkMDIwZmJlMGUuanMiID48L3NjcmlwdD4KPHN0eWxlPgoucHJvZERpY3RGaWx0ZXJDb2xDYWxjICwucHJvZHVjdERpY3Rpb25hcnlDb2xXaWR0aENhbGMgewogICAgd2lkdGg6IGNhbGMoMTAwJSAvOSk7Cn0KLnByb2REaWN0U2VhcmNoQ29sQ2FsYyB7CiAgICB3aWR0aDogY2FsYygxMDAlIC84KTsKfQo8L3N0eWxlPgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+PGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3NlbGVjdDItc3Bpbm5lci03Yjk3NzYwNzZkNWZjZWVmNDk5M2I1NWM5MzgzZGVkZC5naWYiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPjwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgY2xlYXJQcm9kdWN0VmFsdWVzQXNzZXNzbWVudCIgYWNjZXNza2V5PSIkIj5DbGVhcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYWRkUHJvZHVjdFZhbHVlc0Fzc2Vzc21lbnQiIGFjY2Vzc2tleT0iISI+QWRkPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBhZGRBbGxQcm9kdWN0VmFsdWVzQXNzZXNzbWVudCIgYWNjZXNza2V5PSJAIj5BZGQgQWxsPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBhZGRBbGxQcm9kdWN0c0Fzc2Vzc21lbnQiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFjY2Vzc2tleT0iIyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImV2ZW50TW9kYWxBc3Nlc3NtZW50IiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIgogICAgIGFyaWEtbGFiZWxsZWRieT0iZXZlbnREaWN0aW9uYXJ5TGFiZWwiCiAgICAgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJldmVudERpY3Rpb25hcnlMYWJlbCI+RXZlbnQgRGljdGlvbmFyeTwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIHBhZGRpbmctbWQtYm90dG9tIj4KICAgICAgICBTTVEKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTExIHBhZGRpbmctbWQtYm90dG9tIj4KICAgICAgICAKICAgICAgICAgICAgPHNlbGVjdCBpZD0iZXZlbnRTbXFTZWxlY3RBc3Nlc3NtZW50IiBjbGFzcz0iZXZlbnRTbXFBc3Nlc3NtZW50IGZvcm0tY29udHJvbCIgc3R5bGU9IndpZHRoOiAxMDAlIj48L3NlbGVjdD4KICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNSBwYWRkaW5nLW1kLWJvdHRvbSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9hc3Nlc21lbnRfZXZlbnRfZXhhY3RTZWFyY2giIC8+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhc3Nlc21lbnRfZXZlbnRfZXhhY3RTZWFyY2giIGlkPSJhc3Nlc21lbnRfZXZlbnRfZXhhY3RTZWFyY2giICAvPgogICAgICAgICAgICA8bGFiZWwgZm9yPSJhc3Nlc21lbnRfZXZlbnRfZXhhY3RTZWFyY2giPgogICAgICAgICAgICAgICAgRXhhY3QgU2VhcmNoCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5TT0M8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iMSIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5ITEdUPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iMiIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5ITFQ8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsgaGlkZGVuIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICA8aW5wdXQgbGV2ZWw9IjMiIGNsYXNzPSJzZWFyY2hFdmVudHMgZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0Ij4KCiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIj4KICAgICAgICA8bGFiZWw+UFQ8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iNCIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5MTFQ8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iNSIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5TeW5vbnltczxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayBoaWRkZW4iIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iNiIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgIAogICAgICAgIDxjb2x1bW4tdmlldyBzdHlsZT0iaGVpZ2h0OiAyMDBweDsiIGlkPSJjb2x1bW5WaWV3IiBvbmRhdGE9InNvdXJjZSIgcGF0aD0iMCIgZGljdGlvbmFyeV90eXBlPSJldmVudCIgY29sdW1uc19uYW1lPSJTT0MsSExHVCxITFQsUFQsTExULFN5bm9ueW1zIiA+PC9jb2x1bW4tdmlldz4KICAgIDwvZGl2Pgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJyb3cgc2VsZWN0ZWRFdmVudERpY3Rpb25hcnlWYWx1ZUFzc2Vzc21lbnQiPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTEiPgogICAgICAgIDxsYWJlbD5TZWxlY3RlZDo8L2xhYmVsPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTAiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5TT0M8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTExIGV2ZW50RGljdGlvbmFyeVZhbHVlQXNzZXNzbWVudCBsZXZlbDEgdWxTT0MiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5ITEdUPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMSBldmVudERpY3Rpb25hcnlWYWx1ZUFzc2Vzc21lbnQgbGV2ZWwyIHVsSExHVCI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPGxhYmVsPkhMVDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsMyB1bEhMVCI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPGxhYmVsPlBUPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMSBldmVudERpY3Rpb25hcnlWYWx1ZUFzc2Vzc21lbnQgbGV2ZWw0IHVsUFQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5MTFQ8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTExIGV2ZW50RGljdGlvbmFyeVZhbHVlQXNzZXNzbWVudCBsZXZlbDUgdWxMTFQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5TeW5vbnltczwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsNiB1bFN5bm9ueW1zIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMTAwcHgiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5TTVEgQnJvYWQ8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsNyB1bFNtcWIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDBweCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlNNUSBOYXJyb3c8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWVBc3Nlc3NtZW50IGxldmVsOCB1bFNtcW4iPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxzdHlsZT4KLmV2ZW50RGljdGlvbmFyeUNvbFdpZHRoIHsKICAgIHdpZHRoOiBjYWxjKDEwMCUvNik7Cn0KPC9zdHlsZT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXJyb3JNZXNzYWdlIiBoaWRkZW49ImhpZGRlbiI+Q2Fubm90IGFkZCB0byBkaWZmZXJlbnQgbGV2ZWxzLjwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvYWRpbmciIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9zZWxlY3QyLXNwaW5uZXItN2I5Nzc2MDc2ZDVmY2VlZjQ5OTNiNTVjOTM4M2RlZGQuZ2lmIiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz48L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgY2xlYXJFdmVudFZhbHVlc0Fzc2Vzc21lbnQiIGFjY2Vzc2tleT0iKiI+Q2xlYXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGFkZEV2ZW50VmFsdWVzQXNzZXNzbWVudCIgYWNjZXNza2V5PSIlIj5BZGQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGFkZEFsbEV2ZW50VmFsdWVzQXNzZXNzbWVudCIgYWNjZXNza2V5PSJeIj5BZGQgQWxsPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBhZGRBbGxFdmVudHNBc3Nlc3NtZW50IiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhY2Nlc3NrZXk9IiYiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvY29tbW9uL3J4X2NvbW1vbi1lYjVhYzJhNDhkZTRmMTFjODQ0MWZhYjYzOTA0OTVkNi5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL3ZhbGlkYXRlZF9zaWduYWwvc2lnbmFsX2NoYXJ0cy03N2FkYzQxZjllMWM4ODU1MWRiYTkxMGIyNDM4MTI0MC5qcyIgPjwvc2NyaXB0PgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im5vdGlmaWNhdGlvbnMiIGNsYXNzPSJ0YWItcGFuZSBmYWRlIG0tYi0xMCIgcm9sZT0idGFicGFuZWwiPgogICAgICAgICAgICAgICAgICAgIAoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KCiAgICAgICAgdmFyIGFjdGlvbkl0ZW1VcmwgPSAiXHUwMDJmc2lnbmFsXHUwMDJmYWN0aW9uXHUwMDJmbGlzdEJ5Q3VycmVudFVzZXIiOwogICAgICAgIHZhciBzdGF0dXNWYWx1ZSA9ICJBTEwiOwogICAgICAgIHZhciBjaGFuZ2VBc3NpZ25lZFRvVXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnZhbGlkYXRlZFNpZ25hbFx1MDAyZmNoYW5nZUFzc2lnbmVkVG8iOwogICAgICAgIHZhciBjaGFuZ2VHcm91cFVybCA9ICJcdTAwMmZzaWduYWxcdTAwMmZ2YWxpZGF0ZWRTaWduYWxcdTAwMmZjaGFuZ2VHcm91cCI7CiAgICAgICAgdmFyIHNpZ25hbEhpc3RvcnlVcmwgPSAiXHUwMDJmc2lnbmFsXHUwMDJmdmFsaWRhdGVkU2lnbmFsXHUwMDJmZmV0Y2hTaWduYWxIaXN0b3J5XHUwMDJmMTIxOTY1MCI7CiAgICAgICAgdmFyIG1lZXRpbmdEZXRhaWxzVXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnZhbGlkYXRlZFNpZ25hbFx1MDAyZmV4cG9ydE1lZXRpbmdEZXRhaWxSZXBvcnQiOwogICAgICAgIHZhciBnZXRBdHRhY2htZW50VXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnZhbGlkYXRlZFNpZ25hbFx1MDAyZmZldGNoQXR0YWNobWVudHM/YWxlcnRJZD0xMjE5NjUwIjsKICAgICAgICB2YXIgZGVsZXRlQXR0YWNobWVudFVybCA9ICJcdTAwMmZzaWduYWxcdTAwMmZ2YWxpZGF0ZWRTaWduYWxcdTAwMmZkZWxldGVBdHRhY2htZW50P2FsZXJ0SWQ9MTIxOTY1MCI7CiAgICAgICAgdmFyIGdldFVwbG9hZFVybCA9ICJcdTAwMmZzaWduYWxcdTAwMmZ2YWxpZGF0ZWRTaWduYWxcdTAwMmZ1cGxvYWRcdTAwMmYxMjE5NjUwIjsKICAgICAgICB2YXIgYWRkUmVmZXJlbmNlVXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnZhbGlkYXRlZFNpZ25hbFx1MDAyZmFkZFJlZmVyZW5jZVx1MDAyZjEyMTk2NTAiOwogICAgICAgIHZhciBhcHBUeXBlID0gIlNpZ25hbCBNYW5hZ2VtZW50IjsKICAgICAgICB2YXIgYWxlcnRJZCA9ICIxMjE5NjUwIjsKICAgICAgICB2YXIgbGlua2VkU2lnbmFsRGV0YWlsVXJsPSJcdTAwMmZzaWduYWxcdTAwMmZ2YWxpZGF0ZWRTaWduYWxcdTAwMmZkZXRhaWxzIjsKDQo8L3NjcmlwdD4NCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL21lZXRpbmcvbWVldGluZy1kZTUzNTA5NmRkZDE4ZjEwMDVlYmMyZWQ0ODU5MDlhMy5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2FsZXJ0Q29tbWVudHMvYWxlcnRDb21tZW50cy0wNDNmMmZlNzE1MzM4ZTNhYWZjN2IwNzg2NTViMzQ1YS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2FsZXJ0c19yZXZpZXcvYWxlcnRfcmV2aWV3LTUyYWEzMmM4ZmE1MmE2MWQwMGFhZmJlZTgxYTM5YjY4LmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvdmFsaWRhdGVkX3NpZ25hbC9hY3Rpb25NYW5hZ2VtZW50LTliMzAzNTg0MWU4M2ZlOGE4YTAzNzA0ZGVjYWFkMWZiLmpzIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9wdnMvc2lnbmFsSGlzdG9yeS9zaWduYWxIaXN0b3J5VGFibGUtMGMzOWMwODMzNTllNzUyZTE0ZjBmYjc5MWM3MWJkODQuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9kYXRlLXRpbWUvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLTVhYTgxYjU0YzFkZDk3MzE2NWI1NmQ2NjU2N2I1N2Q2LmpzIiA+PC9zY3JpcHQ+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItYzBmNTJlNzg4YzliNTI4NTVhZWI3MjA4MzhiNTZkYjkuY3NzIi8+Cgo8c2NyaXB0PgogICAgdmFyIGFwcGxpY2F0aW9uTmFtZSA9ICJTaWduYWwgTWFuYWdlbWVudCI7CgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgewoKICAgICAgICB2YXIgcGFydG5lclRhYmxlID0gbnVsbDsKCiAgICAgICAgdmFyIGluaXRfdGFibGUgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICB2YXIgc2lnbmFsSWRQYXJ0bmVyID0gJCgiI3NpZ25hbElkUGFydG5lciIpLnZhbCgpOwoKICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0bmVyVGFibGUgIT0gInVuZGVmaW5lZCIgJiYgcGFydG5lclRhYmxlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHBhcnRuZXJUYWJsZS5kZXN0cm95KCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9EYXRhIHRhYmxlIGZvciB0aGUgZG9jdW1lbnQgbW9kYWwgd2luZG93LgogICAgICAgICAgICBwYXJ0bmVyVGFibGUgPSAkKCIjcGFydG5lclRhYmxlIikuRGF0YVRhYmxlKHsKICAgICAgICAgICAgICAgICJsYW5ndWFnZSI6IHsKICAgICAgICAgICAgICAgICAgICAidXJsIjogIi9hc3NldHMvaTE4bi9kYXRhVGFibGVzXyIgKyB1c2VyTG9jYWxlICsgIi5qc29uIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZuSW5pdENvbXBsZXRlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPSJ0b29sdGlwIl0nKS50b29sdGlwKCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYWpheCI6IHsKICAgICAgICAgICAgICAgICAgICAidXJsIjogJ3BhcnRuZXJzTGlzdD9zaWduYWxJZD0nICsgc2lnbmFsSWRQYXJ0bmVyLAogICAgICAgICAgICAgICAgICAgICJkYXRhU3JjIjogIiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzZWFyY2hpbmc6IHRydWUsCiAgICAgICAgICAgICAgICAiYkxlbmd0aENoYW5nZSI6IHRydWUsCiAgICAgICAgICAgICAgICAiaURpc3BsYXlMZW5ndGgiOiA1LAogICAgICAgICAgICAgICAgImFhU29ydGluZyI6IFtbMSwgImRlc2MiXV0sCiAgICAgICAgICAgICAgICAiYUxlbmd0aE1lbnUiOiBbWzEwLCAyMCwgNTAsIC0xXSwgWzEwLCAyMCwgNTAsICJBbGwiXV0sCiAgICAgICAgICAgICAgICAiYW9Db2x1bW5zIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJlZGl0b3ItYWN0aXZlIGNvcHktc2VsZWN0Ij4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJwcm9kdWN0TmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiZHQtY2VudGVyIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAicGFydG5lck5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImR0LWNlbnRlciIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogInBhcnRuZXJDb250YWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJkdC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJwYXJ0bmVyRW1haWxDb250YWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJkdC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJjb250YWN0aW5nRW50aXR5IiwKICAgICAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJkdC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQoKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgJCgnLmhhU2lnbmFsU3RhdHVzJykuc2VsZWN0MigpOwoKICAgICAgICAkKCIuc2hhcmVkV2l0aFBhcnRuZXJzIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcGFydG5lck1vZGFsID0gJCgiI3BhcnRuZXJNb2RhbCIpOwogICAgICAgICAgICBwYXJ0bmVyTW9kYWwubW9kYWwoInNob3ciKTsKICAgICAgICAgICAgaW5pdF90YWJsZSgpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgYXNzaWdubWVudFR5cGUgPSAkKCIjYXNzaWdubWVudFR5cGUiKS52YWwoKTsKCiAgICAgICAgaWYgKGFzc2lnbm1lbnRUeXBlID09ICJVU0VSIikgewogICAgICAgICAgICAkKCIjYXNzaWduZWRUb1VzZXJEaXYiKS5yZW1vdmVDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAkKCIjYXNzaWduZWRUb0dyb3VwRGl2IikuYWRkQ2xhc3MoImhpZGUiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCIjYXNzaWduZWRUb1VzZXJEaXYiKS5hZGRDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAkKCIjYXNzaWduZWRUb0dyb3VwRGl2IikucmVtb3ZlQ2xhc3MoImhpZGUiKTsKICAgICAgICB9CgogICAgICAgICQoIi5zaG93V29ya2Zsb3dIaXN0b3J5IikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgd29ya2Zsb3dIaXN0b3J5TW9kYWwgPSAkKCIjc2lnbmFsSGlzdG9yeU1vZGFsIik7CiAgICAgICAgICAgIHdvcmtmbG93SGlzdG9yeU1vZGFsLmZpbmQoJy5tb2RhbC1sZycpLmNzcygnd2lkdGgnLCAnMTE4MHB4Jyk7CiAgICAgICAgICAgIHdvcmtmbG93SGlzdG9yeU1vZGFsLm1vZGFsKCJzaG93Iik7CiAgICAgICAgICAgIHNpZ25hbC5zaWduYWxIaXN0b3J5VGFibGUuaW5pdF9zaWduYWxfaGlzdG9yeV90YWJsZShzaWduYWxIaXN0b3J5VXJsKTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKCQoIiNzaWduYWxBY3Rpb25UYWtlbiIpLnZhbCgpKSB7CiAgICAgICAgICAgIHZhciBzb3VyY2VBcnJheSA9ICQoIiNzaWduYWxBY3Rpb25UYWtlbiIpLnZhbCgpLnRvU3RyaW5nKCkucmVwbGFjZSgiWyIsICIiKS5yZXBsYWNlKCJdIiwgIiIpLnNwbGl0KCcsJyk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHNvdXJjZUFycmF5W2ldID0gc291cmNlQXJyYXlbaV0udHJpbSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJCgiI2FjdGlvbl9uYW1lIikuc2VsZWN0MigpLnZhbChzb3VyY2VBcnJheSkudHJpZ2dlcignY2hhbmdlJykKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCIjYWN0aW9uX25hbWUiKS5zZWxlY3QyKCkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJDaGFuZ2VzT25Nb2RhbE9wZW5pbmcoZXh0VGV4dEFyZWFNb2RhbCkgewogICAgICAgICAgICBleHRUZXh0QXJlYU1vZGFsLm9uKCdzaG93bi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQoJ3RleHRhcmVhJykudHJpZ2dlcigna2V5dXAnKTsKICAgICAgICAgICAgICAgIC8vQ2hhbmdlIGJ1dHRvbiBsYWJlbC4KICAgICAgICAgICAgICAgIGlmIChleHRUZXh0QXJlYU1vZGFsLmZpbmQoJy50ZXh0QXJlYVZhbHVlJykudmFsKCkpIHsKICAgICAgICAgICAgICAgICAgICBleHRUZXh0QXJlYU1vZGFsLmZpbmQoIi51cGRhdGVUZXh0YXJlYSIpLmh0bWwoJC5pMThuLl8oJ2xhYmVsVXBkYXRlJykpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBleHRUZXh0QXJlYU1vZGFsLmZpbmQoIi51cGRhdGVUZXh0YXJlYSIpLmh0bWwoJC5pMThuLl8oJ2xhYmVsQWRkJykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjc2lnbmFsLWhpc3RvcnktdGFibGUgLm9wZW5TdGF0dXNDb21tZW50JywgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgdmFyIGV4dFRleHRBcmVhTW9kYWwgPSAkKCIjdGV4dGFyZWEtZXh0MSIpOwogICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlc09uTW9kYWxPcGVuaW5nKGV4dFRleHRBcmVhTW9kYWwpOwogICAgICAgICAgICB2YXIgY29tbWVudEJveCA9ICQodGhpcykucHJldignLmNvbW1lbnQnKTsKICAgICAgICAgICAgZXh0VGV4dEFyZWFNb2RhbC5maW5kKCcudGV4dEFyZWFWYWx1ZScpLnZhbChjb21tZW50Qm94LnZhbCgpKTsKICAgICAgICAgICAgZXh0VGV4dEFyZWFNb2RhbC5maW5kKCcubW9kYWwtdGl0bGUnKS50ZXh0KCQuaTE4bi5fKCdzdGF0dXNIaXN0b3J5Q29tbWVudCcpKTsKICAgICAgICAgICAgaWYgKGNvbW1lbnRCb3gucHJvcCgnZGlzYWJsZWQnKSkgewogICAgICAgICAgICAgICAgZXh0VGV4dEFyZWFNb2RhbC5maW5kKCcudGV4dEFyZWFWYWx1ZScpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICBleHRUZXh0QXJlYU1vZGFsLmZpbmQoJy51cGRhdGVUZXh0YXJlYScpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBleHRUZXh0QXJlYU1vZGFsLmZpbmQoJy50ZXh0QXJlYVZhbHVlJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBleHRUZXh0QXJlYU1vZGFsLmZpbmQoJy51cGRhdGVUZXh0YXJlYScpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV4dFRleHRBcmVhTW9kYWwubW9kYWwoInNob3ciKTsKICAgICAgICAgICAgdXBkYXRlVGV4dEFyZWFEYXRhKGNvbW1lbnRCb3gpOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0QXJlYURhdGEoY29udGFpbmVyKSB7CiAgICAgICAgICAgIHZhciBleHRUZXh0QXJlYU1vZGFsID0gJCgiI3RleHRhcmVhLWV4dDEiKTsKICAgICAgICAgICAgJCgnI3RleHRhcmVhLWV4dDEgLnVwZGF0ZVRleHRhcmVhJykub2ZmKCJjbGljayIpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgY29udGFpbmVyLnZhbChleHRUZXh0QXJlYU1vZGFsLmZpbmQoJ3RleHRhcmVhJykudmFsKCkpOwogICAgICAgICAgICAgICAgZXh0VGV4dEFyZWFNb2RhbC5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgoKICAgICAgICAkKCJmb3JtI2F0dGFjaG1lbnRGb3JtIikudW5iaW5kKCdzdWJtaXQnKS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcyk7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IGdldFVwbG9hZFVybCwKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLAogICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoJyNteU1vZGFsJykubW9kYWwoJ2hpZGUnKTsKICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ3N1Y2Nlc3MnLCAndG9wIHJpZ2h0JywgIlN1Y2Nlc3MiLCAkLmkxOG4uXygnYXR0YWNobWVudEFkZGVkU3VjY2VzcycpLCB7YXV0b0hpZGVEZWxheTogMTAwMDB9KTsKICAgICAgICAgICAgICAgICAgICAkKCIjYXR0YWNobWVudEZvcm0gaW5wdXRbbmFtZT0nYXR0YWNobWVudHMnXSIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgJCgiI2F0dGFjaG1lbnRGb3JtIGlucHV0W25hbWU9J2Rlc2NyaXB0aW9uJ10iKS52YWwoJycpOwogICAgICAgICAgICAgICAgICAgICQoJyNhdHRhY2htZW50LXRhYmxlJykuRGF0YVRhYmxlKCkuYWpheC5yZWxvYWQoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogZmFsc2UsCiAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKCiAgICAgICAgJCgiZm9ybSNyZWZlcmVuY2VGb3JtIikudW5iaW5kKCdzdWJtaXQnKS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcyk7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IGFkZFJlZmVyZW5jZVVybCwKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLAogICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoJyNteVJlZmVyZW5jZScpLm1vZGFsKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgJC5Ob3RpZmljYXRpb24ubm90aWZ5KCdzdWNjZXNzJywgJ3RvcCByaWdodCcsICJTdWNjZXNzIiwgJC5pMThuLl8oJ3JlZmVyZW5jZUFkZGVkU3VjY2VzcycpLCB7YXV0b0hpZGVEZWxheTogMTAwMDB9KTsKICAgICAgICAgICAgICAgICAgICAkKCcjbXlSZWZlcmVuY2UgaW5wdXRbbmFtZT0icmVmZXJlbmNlTGluayJdJykudmFsKCcnKTsKICAgICAgICAgICAgICAgICAgICAkKCIjbXlSZWZlcmVuY2UgaW5wdXRbbmFtZT0nZGVzY3JpcHRpb24nXSIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgJCgnI2F0dGFjaG1lbnQtdGFibGUnKS5EYXRhVGFibGUoKS5hamF4LnJlbG9hZCgpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSwKICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwoKICAgICAgICAkKCcjYXR0YWNobWVudC10YWJsZScpLkRhdGFUYWJsZSh7CiAgICAgICAgICAgIGRlc3Ryb3k6IHRydWUsCiAgICAgICAgICAgIHNlYXJjaGluZzogZmFsc2UsCiAgICAgICAgICAgIHNQYWdpbmF0aW9uVHlwZTogImJvb3RzdHJhcCIsCiAgICAgICAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLAogICAgICAgICAgICBsYW5ndWFnZTogewogICAgICAgICAgICAgICAgInVybCI6ICIuLi9hc3NldHMvaTE4bi9kYXRhVGFibGVzXyIgKyB1c2VyTG9jYWxlICsgIi5qc29uIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiYWpheCI6IHsKICAgICAgICAgICAgICAgICJ1cmwiOiBnZXRBdHRhY2htZW50VXJsLAogICAgICAgICAgICAgICAgImRhdGFTcmMiOiAiIgogICAgICAgICAgICB9LAogICAgICAgICAgICBmbkRyYXdDYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJCgnLnJlbW92ZS1hdHRhY2htZW50JykuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYXR0YWNobWVudFJvdyA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnRJZCA9IGF0dGFjaG1lbnRSb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJyZW1vdmVBdHRhY2htZW50Il0nKS5hdHRyKCJkYXRhLWF0dGFjaG1lbnRJZCIpOwogICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVVcmwgPSBkZWxldGVBdHRhY2htZW50VXJsICsgJyZhdHRhY2htZW50SWQ9JyArIGF0dGFjaG1lbnRJZDsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcmVtb3ZlVXJsLAogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjYXR0YWNobWVudC10YWJsZScpLkRhdGFUYWJsZSgpLmFqYXgucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ3N1Y2Nlc3MnLCAndG9wIHJpZ2h0JywgIlN1Y2Nlc3MiLCAkLmkxOG4uXygnYXR0YWNobWVudFJlbW92ZWRTdWNjZXNzJyksIHthdXRvSGlkZURlbGF5OiAxMDAwMH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5Ob3RpZmljYXRpb24ubm90aWZ5KCdlcnJvcicsICd0b3AgcmlnaHQnLCAiRXJyb3IiLCAkLmkxOG4uXygnYXR0YWNobWVudERlbGV0ZUZhaWxlZCcpLCB7YXV0b0hpZGVEZWxheTogMTAwMDB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYW9Db2x1bW5zIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJsaW5rIiwKICAgICAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzonY29sLW1pbi0xNTAgY29sLW1heC0yMDAnLAogICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICBpZihyb3cudHlwZSA9PT0gQVRUQUNITUVOVF9UWVBFX0VOVU0uQVRUQUNITUVOVCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjxhIGNsYXNzPSd3b3JkLXdyYXAtYnJlYWstd29yZCcgaHJlZj0nL3NpZ25hbC9hdHRhY2htZW50YWJsZS9kb3dubG9hZD9pZD0iICsgcm93LmlkICsgIic+IiArIHJvdy5saW5rICsgIjwvYT4iOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocm93LmxpbmsudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCJodHRwIikpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiPGEgY2xhc3M9J3dvcmQtd3JhcC1icmVhay13b3JkJyBocmVmPSciICsgcm93LmxpbmsgKyAiJz4iICsgcm93LmxpbmsgKyAiPC9hPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjxzcGFuIGNsYXNzPSd3b3JkLXdyYXAtYnJlYWstd29yZCc+Iityb3cubGluaysiPC9zcGFuPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJ0eXBlIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZGVzY3JpcHRpb24iLAogICAgICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOidjb2wtbWluLTE1MCBjb2wtbWF4LTIwMCBjZWxsLWJyZWFrJywKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI8c3BhbiBjbGFzcz0nd29yZC13cmFwLWJyZWFrLXdvcmQnPiIgKyBlc2NhcGVIVE1MKHJvdy5kZXNjcmlwdGlvbikgKyAiPC9zcGFuPiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAidGltZVN0YW1wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAibW9kaWZpZWRCeSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogImlkIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiB0YWJpbmRleD0iMCIgdGl0bGU9IlJlbW92ZSBBdHRhY2htZW50IiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcmVtb3ZlLWF0dGFjaG1lbnQiIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiIGRhdGEtZmllbGQ9InJlbW92ZUF0dGFjaG1lbnQiIGRhdGEtYXR0YWNobWVudElkPScgKyByb3cuaWQgKyAnPjwvc3Bhbj4nCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiYkxlbmd0aENoYW5nZSI6IGZhbHNlLAogICAgICAgICAgICBjb2x1bW5EZWZzOiBbewogICAgICAgICAgICAgICAgInRhcmdldHMiOiAnX2FsbCcsCiAgICAgICAgICAgICAgICAicmVuZGVyIjogJC5mbi5kYXRhVGFibGUucmVuZGVyLnRleHQoKQogICAgICAgICAgICB9XQogICAgICAgIH0pOwoKICAgICAgICAkKCcjbXlSZWZlcmVuY2UnKS5vbignc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQodGhpcykuZmluZCgnLnJlZkJsYW5rJykudmFsKCcnKTsKICAgICAgICB9KTsKICAgIH0pOwoKPC9zY3JpcHQ+Cgo8c3R5bGU+CmEgewogICAgY29sb3I6ICM0MjhiY2E7Cn0KCi5pY29uLWNhbGVuZGFyIHsKICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0xOTJweCAtMTIwcHgKfQoKLmZnLW0xMCAuZm9ybS1ncm91cCB7CiAgICBtYXJnaW4tYm90dG9tOiAxMHB4Owp9Cjwvc3R5bGU+CjxkaXYgY2xhc3M9InJvdyBoZWlnaHQtZSI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPldvcmtmbG93IE1hbmFnZW1lbnQ8L3NwYW4+Jm5ic3A7PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSBzaG93V29ya2Zsb3dIaXN0b3J5IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWNvbnRlbnQgZmctbTEwICI+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgZGF0YVRhYmxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ic29ydGluZ19kaXNhYmxlZCBjb2wteHMtMyI+U2lnbmFsIE5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIGNvbC14cy0zIj5DdXJyZW50IERpc3Bvc2l0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ic29ydGluZ19kaXNhYmxlZCBjb2wteHMtMiI+UHJpb3JpdHk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIGNvbC14cy00Ij5EaXNwb3NpdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJvZGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjb2wtaGVpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UGVyZlNpZ25hbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiB0aXRsZT0iVmlldyBBbGwiIGNsYXNzPSJpY28tZG90cyB2aWV3LWFsbCIgbW9yZS1kYXRhPSJQZXJmU2lnbmFsIj48aSBjbGFzcz0ibWRpIG1kaS1kb3RzLWhvcml6b250YWwgZm9udC0yMCBibHVlLTEiPiA8L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLXhzLTMgY3VycmVudERpc3Bvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VmFsaWRhdGVkIE9ic2VydmF0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwcmlvcml0eUNoYW5nZU5vdEFsbG93ZWQgZm9udC0yNCIgcm9sZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsLXBvcG92ZXIiIGRhdGEtcGxhY2VtZW50PSJyaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJVcmdlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWFscGhhLXUtY2lyY2xlIHJlZC0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtNCBkaXNwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgaWNvbi1saXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jdXJyZW50LWRpc3Bvc2l0aW9uPSJWYWxpZGF0ZWQgT2JzZXJ2YXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdGFyZ2V0PSIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIgcm9sZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYW5nZURpc3Bvc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWxpZGF0ZWQtY29uZmlybWVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzcG9zaXRpb24taWQ9IjQ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hdXRoLXJlcXVpcmVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbC1wb3BvdmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDb25maXJtZWQgU2lnbmFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvLWNpcmNsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZDojZDk1MzRmIj5DUzwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdGFyZ2V0PSIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIgcm9sZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYW5nZURpc3Bvc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWxpZGF0ZWQtY29uZmlybWVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzcG9zaXRpb24taWQ9IjYxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hdXRoLXJlcXVpcmVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbC1wb3BvdmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJSZWZ1dGVkIFNpZ25hbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljby1jaXJjbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQ6IzVjYjg1YyI+UlM8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRhcmdldD0iI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIiIHJvbGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFuZ2VEaXNwb3NpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsaWRhdGVkLWNvbmZpcm1lZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc3Bvc2l0aW9uLWlkPSI3MyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYXV0aC1yZXF1aXJlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwtcG9wb3ZlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJib3R0b20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iQ29udGludWVkIE1vbml0b3JpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY28tY2lyY2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kOiMzMzdhYjciPkNNPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgU2lnbmFsIEhpc3RvcnkKICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNpZ25hbEhpc3RvcnkiPgogICAgICAgICAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgYXR0YWNobWVudHMiPgogICAgPHRhYmxlIGlkPSJzaWduYWwtaGlzdG9yeS10YWJsZSIgY2xhc3M9ImRhdGFUYWJsZSByb3ctYm9yZGVyIGhvdmVyIG5vLWZvb3RlciI+CiAgICAgICAgPHRoZWFkPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIj5TdGF0dXM8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+PC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIj5EYXRlPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPjwvdGg+CiAgICAgICAgICAgIDx0aCBjbGFzcz0ic29ydGluZ19kaXNhYmxlZCI+U3RhdHVzIENvbW1lbnQ8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+PC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIj5QZXJmb3JtZWQgQnk8L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InNvcnRpbmdfZGlzYWJsZWQiPjwvdGg+CiAgICAgICAgPC90cj4KICAgICAgICA8L3RoZWFkPgogICAgICAgIDx0Ym9keT4KICAgICAgICAKICAgICAgICAgICAgPHRyIHJvbGU9InJvdyIgY2xhc3M9Im9kZCBzaWduYWxIaXN0b3J5Um93Ij4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic2lnbmFsU3RhdHVzIiBjbGFzcz0iZm9ybS1jb250cm9sIHN0YXR1cyIgaWQ9InNpZ25hbFN0YXR1cyIgPg0KPG9wdGlvbiB2YWx1ZT0iIj4tU2VsZWN0IFN0YXR1cyAtPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJWYWxpZGF0aW9uIERhdGUiID5WYWxpZGF0aW9uIERhdGU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkFzc2Vzc21lbnQgRGF0ZSIgPkFzc2Vzc21lbnQgRGF0ZTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iRGF0ZSBDbG9zZWQiID5EYXRlIENsb3NlZDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgdG9vbGJhcklubGluZSBoaXN0b3J5RGF0ZVBpY2tlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPSJTZWxlY3QgRGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBkYXRlLWNyZWF0ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9IkRhdGUiIHR5cGU9InRleHQiIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtNSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dGFyZWEtZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgY29tbWVudCIgbWF4bGVuZ3RoPSI0MDAwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4tdGV4dC1leHQgb3BlblN0YXR1c0NvbW1lbnQiIGhyZWY9IiIgdGFiaW5kZXg9IjAiIHRpdGxlPSJPcGVuIGluIGV4dGVuZGVkIGZvcm0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktYXJyb3ctZXhwYW5kIGZvbnQtMjAgYmx1ZS0xIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTEiPgogICAgICAgICAgICAgICAgICAgIGJoYWd5YQogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaWNvbnMtY2xhc3MgY29sLW1kLTEgdGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGhyZWY9IiMiIHRpdGxlPSJTYXZlIiBjbGFzcz0ic2F2ZS1oaXN0b3J5Ij48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kaSBtZGktY29udGVudC1zYXZlICBmb250LTI0IGJsdWUtMSI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0YWJpbmRleD0iMCIgdGl0bGU9IkFkZCByb3ciIGNsYXNzPSJidG4tYWRkLXJvdyBkaXNhYmxlZCI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZGkgbWRpLXBsdXMtYm94IGZvbnQtMjQgZ3JleS0xIj48L2k+PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAKICAgICAgICA8dHIgcm9sZT0icm93IiBjbGFzcz0iaGlkZGVuIHRyX2Nsb25lIHNpZ25hbEhpc3RvcnlSb3ciPgogICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic2lnbmFsU3RhdHVzIiBjbGFzcz0iZm9ybS1jb250cm9sIHN0YXR1cyIgaWQ9InNpZ25hbFN0YXR1cyIgPg0KPG9wdGlvbiB2YWx1ZT0iIj4tU2VsZWN0IFN0YXR1cyAtPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJWYWxpZGF0aW9uIERhdGUiID5WYWxpZGF0aW9uIERhdGU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IkFzc2Vzc21lbnQgRGF0ZSIgPkFzc2Vzc21lbnQgRGF0ZTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iRGF0ZSBDbG9zZWQiID5EYXRlIENsb3NlZDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciB0b29sYmFySW5saW5lIGhpc3RvcnlEYXRlUGlja2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPSJTZWxlY3QgRGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGRhdGUtY3JlYXRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJEYXRlIiB0eXBlPSJ0ZXh0IiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dGFyZWEtZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBjb21tZW50IiBtYXhsZW5ndGg9IjQwMDAiLz4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuLXRleHQtZXh0IG9wZW5TdGF0dXNDb21tZW50IiBocmVmPSIiIHRhYmluZGV4PSIwIiB0aXRsZT0iT3BlbiBpbiBleHRlbmRlZCBmb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktYXJyb3ctZXhwYW5kIGZvbnQtMjAgYmx1ZS0xIj48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTEiPgogICAgICAgICAgICAgICAgYmhhZ3lhCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaWNvbnMtY2xhc3MgY29sLW1kLTEgdGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICA8YSB0YWJpbmRleD0iMCIgaHJlZj0iIyIgdGl0bGU9IlNhdmUiIGNsYXNzPSJzYXZlLWhpc3RvcnkiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZGkgbWRpLWNvbnRlbnQtc2F2ZSAgZm9udC0yNCBibHVlLTEiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0YWJpbmRleD0iMCIgdGl0bGU9IkFkZCByb3ciIGNsYXNzPSJidG4tYWRkLXJvdyBkaXNhYmxlZCI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kaSBtZGktcGx1cy1ib3ggZm9udC0yNCBncmV5LTEiPjwvaT48L2E+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCgoKICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXR0YWNobWVudHMKICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIGF0dGFjaG1lbnRzIj4KICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaHJlZj0iI215TW9kYWwiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+QWRkIEZpbGU8L2E+CiAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaHJlZj0iI215UmVmZXJlbmNlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPkFkZCBSZWZlcmVuY2VzPC9hPgogICAgCgoKICAgIDx0YWJsZSBpZD0iYXR0YWNobWVudC10YWJsZSIgY2xhc3M9ImRhdGFUYWJsZSByb3ctYm9yZGVyIGhvdmVyIG5vLWZvb3RlciI+CiAgICAgICAgPHRoZWFkPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIj5MaW5rL0ZpbGU8L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InNvcnRpbmdfZGlzYWJsZWQiPlR5cGU8L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InNvcnRpbmdfZGlzYWJsZWQiPkRlc2NyaXB0aW9uPC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIj5UaW1lc3RhbXA8L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InNvcnRpbmdfZGlzYWJsZWQiPk1vZGlmaWVkIEJ5PC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJzb3J0aW5nX2Rpc2FibGVkIj5BY3Rpb248L3RoPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwhLS0gTW9kYWwgLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCIjYXR0YWNobWVudEZvcm0gaW5wdXRbdHlwZT1maWxlXSIpLmJpbmQoImNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGltZ1ZhbCA9ICQodGhpcykudmFsKCk7CiAgICAgICAgICAgIHZhciBpbWdTaXplID0gJCh0aGlzKVswXS5maWxlc1swXS5zaXplOwogICAgICAgICAgICBpZiAoaW1nVmFsICE9ICcnICYmIGltZ1NpemUgPCAyMDAwMDAwMCkgewogICAgICAgICAgICAgICAgJCgnI2ZpbGVTaXplTWVzc2FnZScpLmhpZGUoKQogICAgICAgICAgICAgICAgJCgiW25hbWU9X2FjdGlvbl91cGxvYWRdIikuYXR0cignZGlzYWJsZWQnLCBmYWxzZSkKICAgICAgICAgICAgfSBlbHNlIGlmIChpbWdWYWwgIT0gJycpIHsKICAgICAgICAgICAgICAgICQoJyNmaWxlU2l6ZU1lc3NhZ2UnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAkKCJbbmFtZT1fYWN0aW9uX3VwbG9hZF0iKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgiW25hbWU9X2FjdGlvbl91cGxvYWRdIikuYXR0cignZGlzYWJsZWQnLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICB9KQo8L3NjcmlwdD4KPGRpdiBpZD0ibXlNb2RhbCIgY2xhc3M9Im1vZGFsIGZhZGUiIHJvbGU9ImRpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgoKICAgICAgICA8IS0tIE1vZGFsIGNvbnRlbnQtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiPkF0dGFjaG1lbnRzPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvaW5kZXgvYXR0YWNobWVudEZvcm0iIG1ldGhvZD0icG9zdCIgbmFtZT0iYXR0YWNobWVudEZvcm0iIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiIGF1dG9jb21wbGV0ZT0ib2ZmIiBpZD0iYXR0YWNobWVudEZvcm0iID4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic291cmNlIiB2YWx1ZT0iZGV0YWlsIiBpZD0ic291cmNlIiAvPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImF0dGFjaG1lbnRGb3JtSWQiIHR5cGU9ImhpZGRlbiIgbmFtZT0iYWxlcnRJZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMjE5NjUwIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBtdWx0aXBsZSBjbGFzcz0ibXVsdGkiIHR5cGU9ImZpbGUiIG5hbWU9ImF0dGFjaG1lbnRzIiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciIGlkPSJmaWxlU2l6ZU1lc3NhZ2UiIGhpZGRlbj0iaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImNvbG9yOiByZWQiPkZpbGUgc2l6ZSBjYW4ndCBleGNlZWQgMjBNQi48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyIgc3R5bGU9InBhZGRpbmctdG9wOiAzMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+RGVzY3JpcHRpb248L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9ImlucHV0IiBuYW1lPSJkZXNjcmlwdGlvbiIgdmFsdWU9IiIgc3R5bGU9IndpZHRoOiA4NSU7ZmxvYXQ6IHJpZ2h0OyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXJpZ2h0Ij4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJfYWN0aW9uX3VwbG9hZCIgdmFsdWU9IlVwbG9hZCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0IiBkaXNhYmxlZD0iZGlzYWJsZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPkNhbmNlbDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKCiAgICAgICAgICAgICAgICAgICAgPCEtLSBNb2RhbCAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgewogICAgICAgICQoIiNyZWZlcmVuY2VGb3JtIikub24oJ2NoYW5nZScsICcjcmVmZXJlbmNlTGluaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiW25hbWU9X2FjdGlvbl9hZGRSZWZlcmVuY2VdIikuYXR0cignZGlzYWJsZWQnLCAkKHRoaXMpLnZhbCgpID8gZmFsc2UgOiB0cnVlKTsKICAgICAgICB9KQogICAgfSkKPC9zY3JpcHQ+Cgo8ZGl2IGlkPSJteVJlZmVyZW5jZSIgY2xhc3M9Im1vZGFsIGZhZGUiIHJvbGU9ImRpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgoKICAgICAgICA8IS0tIE1vZGFsIGNvbnRlbnQtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiPlJlZmVyZW5jZXM8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9pbmRleC9yZWZlcmVuY2VGb3JtIiBtZXRob2Q9InBvc3QiIG5hbWU9InJlZmVyZW5jZUZvcm0iIGF1dG9jb21wbGV0ZT0ib2ZmIiBpZD0icmVmZXJlbmNlRm9ybSIgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBtLXQtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UmVmZXJlbmNlczxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+PC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIHJlZkJsYW5rIiBuYW1lPSJyZWZlcmVuY2VMaW5rIiBzdHlsZT0id2lkdGg6IDg1JTtmbG9hdDogcmlnaHQ7IiB2YWx1ZT0iIiBpZD0icmVmZXJlbmNlTGluayIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkRlc2NyaXB0aW9uPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcmVmQmxhbmsiIG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iIiBzdHlsZT0id2lkdGg6IDg1JTtmbG9hdDogcmlnaHQ7IiBpZD0iZGVzY3JpcHRpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtcmlnaHQiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iX2FjdGlvbl9hZGRSZWZlcmVuY2UiIHZhbHVlPSJTYXZlIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiB0eXBlPSJzdWJtaXQiIGlkPSJzYXZlUmVmZXJlbmNlIiBkaXNhYmxlZD0iZGlzYWJsZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0Ij5DYW5jZWw8L2J1dHRvbj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoKICAgIHdpbmRvdy5hY3Rpb25fc2VsZWN0X3ZhbHVlcyA9IEpTT04ucGFyc2UoIlx1MDA3Ylx1MDAyMnR5cGVzXHUwMDIyOlx1MDA1Ylx1MDA3Ylx1MDAyMmlkXHUwMDIyOjY0MjFcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJBRVNNXHUwMDIyXHUwMDJjXHUwMDIydGV4dFx1MDAyMjpcdTAwMjJBRVNNXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njc4OVx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMkF1dG8gQWxlcnRcdTAwMjJcdTAwMmNcdTAwMjJ0ZXh0XHUwMDIyOlx1MDAyMkF1dG8gQWxlcnRcdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2Nzk3XHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyRnVydGhlciBSZXZpZXdcdTAwMjJcdTAwMmNcdTAwMjJ0ZXh0XHUwMDIyOlx1MDAyMkZ1cnRoZXIgUmV2aWV3XHUwMDIyXHUwMDdkXHUwMDVkXHUwMDJjXHUwMDIyY29uZmlnc1x1MDAyMjpcdTAwNWJcdTAwN2JcdTAwMjJpZFx1MDAyMjo2ODA1XHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyTWVldGluZ1x1MDAyMlx1MDA3ZFx1MDAyY1x1MDA3Ylx1MDAyMmlkXHUwMDIyOjY4MTRcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJBZGRpdGlvbmFsIGludmVzdGlnYXRpb25zXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6NjgyM1x1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMkNoYW5nZSB0byBSTVBcdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2ODMyXHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyQ2hhbmdlcyB0byBSRU1TXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njg0MVx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMkNvbW11bmljYXRpb25cdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2ODUwXHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyRXhjaGFuZ2Ugb2YgSW5mb3JtYXRpb25cdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2ODU5XHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIySW5mb3JtZWQgY29uc2VudCBtb2RpZmljYXRpb25cdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2ODY4XHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyTWlncmF0ZWQgQWN0aW9uXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njg3N1x1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMk90aGVyXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njg4Nlx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMlBlcmlvZGljIFJldmlld1x1MDAyMlx1MDA3ZFx1MDAyY1x1MDA3Ylx1MDAyMmlkXHUwMDIyOjY4OTVcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJQb3N0LUF1dGhvcml6YXRpb24gc3R1ZHlcdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2OTA0XHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyUHJvcG9zaXRpb24gb2YgTGFiZWxpbmcgdXBkYXRlXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6NjkxM1x1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMlJlYXNzZXNzbWVudFx1MDAyMlx1MDA3ZFx1MDAyY1x1MDA3Ylx1MDAyMmlkXHUwMDIyOjY5MjJcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJSZWNhbGxcdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJpZFx1MDAyMjo2OTMxXHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIyUmV2aWV3IElDU1JzXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njk0MFx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMlJldmlldyBsaXRlcmF0dXJlXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njk0OVx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMlJpc2sgbWluaW1pemF0aW9uIG1lYXN1cmVzXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIyaWRcdTAwMjI6Njk1OFx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMlRlY2huaWNhbCBFdmFsdWF0aW9uXHUwMDIyXHUwMDdkXHUwMDVkXHUwMDJjXHUwMDIyYWxsU3RhdHVzXHUwMDIyOlx1MDA1Ylx1MDA3Ylx1MDAyMm5hbWVcdTAwMjI6XHUwMDIySW5Qcm9jZXNzXHUwMDIyXHUwMDJjXHUwMDIydmFsdWVcdTAwMjI6XHUwMDIySW4gUHJvZ3Jlc3NcdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJuYW1lXHUwMDIyOlx1MDAyMkRlbGV0ZWRcdTAwMjJcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJEZWxldGVkXHUwMDIyXHUwMDdkXHUwMDJjXHUwMDdiXHUwMDIybmFtZVx1MDAyMjpcdTAwMjJOZXdcdTAwMjJcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJOZXdcdTAwMjJcdTAwN2RcdTAwMmNcdTAwN2JcdTAwMjJuYW1lXHUwMDIyOlx1MDAyMkNsb3NlZFx1MDAyMlx1MDAyY1x1MDAyMnZhbHVlXHUwMDIyOlx1MDAyMkNsb3NlZFx1MDAyMlx1MDA3ZFx1MDAyY1x1MDA3Ylx1MDAyMm5hbWVcdTAwMjI6XHUwMDIyUmVPcGVuZWRcdTAwMjJcdTAwMmNcdTAwMjJ2YWx1ZVx1MDAyMjpcdTAwMjJSZS1vcGVuZWRcdTAwMjJcdTAwN2RcdTAwNWRcdTAwN2QiKQoNCjwvc2NyaXB0Pg0KCiAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvbnMKICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhY3Rpb24tbGlzdC1jb25haW50ZXIiIGNsYXNzPSJsaXN0Ij4KICAgIDx0YWJsZSBpZD0iYWN0aW9uLXRhYmxlIiBjbGFzcz0icm93LWJvcmRlciBob3ZlciBkYXRhVGFibGUgbm8tZm9vdGVyIiBzdHlsZT0id2lkdGg6IDEwMCUiPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aD5JZDwvdGg+CiAgICAgICAgICAgIDx0aD5UeXBlPC90aD4KICAgICAgICAgICAgPHRoPkFjdGlvbiAgPC90aD4KICAgICAgICAgICAgPHRoPkRldGFpbHM8L3RoPgogICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPgogICAgICAgICAgICA8dGg+QXNzaWduZWQgVG88L3RoPgogICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgPHRoPkNvbXBsZXRpb24gRGF0ZTwvdGg+CiAgICAgICAgPC90cj4KICAgICAgICA8L3RoZWFkPgogICAgPC90YWJsZT4KPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iY3JlYXRlQWN0aW9uTW9kYWwiIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJwcm9kdWN0RGljdGlvbmFyeUxhYmVsIgogICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJjcmVhdGVBY3Rpb25MYWJlbCI+Q3JlYXRlIEFjdGlvbjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvc2lnbmFsL2FjdGlvbi9zYXZlIiBtZXRob2Q9InBvc3QiIG5hbWU9InRlbXBGb3JtIiBpZD0idGVtcEZvcm0iID4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjcmVhdGUtdXJsIiB2YWx1ZT0iL3NpZ25hbC9hY3Rpb24vc2F2ZSIgaWQ9ImNyZWF0ZS11cmwiIC8+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYXBwVHlwZSIgaWQ9ImFwcFR5cGUiIHZhbHVlPSJTaWduYWwgTWFuYWdlbWVudCIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJleGVDb25maWdJZCIgaWQ9ImV4ZUNvbmZpZ0lkIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgIAo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZCIgdmFsdWU9IiIgaWQ9ImFjdGlvbklkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ2ZXJzaW9uIiB2YWx1ZT0iIiBpZD0idmVyc2lvbiIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWxlcnRJZCIgdmFsdWU9IjEyMTk2NTAiIGNsYXNzPSJhbGVydElkIiBpZD0iYWxlcnRJZCIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uLW1lZXRpbmctaWQiIHZhbHVlPSI2ODA1IiBjbGFzcz0iYWN0aW9uLW1lZXRpbmctaWQiIGlkPSJhY3Rpb24tbWVldGluZy1pZCIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZmV0Y2hNZWV0aW5nVGl0bGVVcmwiIHZhbHVlPSIvc2lnbmFsL21lZXRpbmcvZmV0Y2hNZWV0aW5nVGl0bGVzP2FsZXJ0SWQ9MTIxOTY1MCZhbXA7aXNUb3BpY0Zsb3c9IiBpZD0iZmV0Y2hNZWV0aW5nVGl0bGVVcmwiIC8+CjxzY3JpcHQ+CiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyICRjcmVhdGVBY3Rpb25Nb2RhbCA9ICQoIiNjcmVhdGVBY3Rpb25Nb2RhbCIpOwogICAgICAgIHZhciAkZWRpdEFjdGlvbk1vZGFsID0gJCgiI2VkaXRBY3Rpb25Nb2RhbCIpOwogICAgICAgICQoJy5hY3Rpb24tdmFsdWUnKS5jaGFuZ2UoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgJG1vZGFsOwogICAgICAgICAgICB2YXIgdGV4dCA9ICQodGhpcykuZGF0YSgndGV4dCcpOwogICAgICAgICAgICBpZih0ZXh0ID09ICdjcmVhdGUnKXsKICAgICAgICAgICAgICAgICRtb2RhbCA9ICRjcmVhdGVBY3Rpb25Nb2RhbDsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAkbW9kYWwgPSAkZWRpdEFjdGlvbk1vZGFsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzZWxlY3RlZEFjdGlvbklkID0gJCh0aGlzKS52YWwoKTsKICAgICAgICAgICAgdmFyIG1lZXRpbmdJZCA9ICQoJy5hY3Rpb24tbWVldGluZy1pZCcpLnZhbCgpOwogICAgICAgICAgICB2YXIgdmFsdWUgPSAkbW9kYWwuZmluZCgiI2NvbmZpZyIpLmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpLnRleHQoKTsKICAgICAgICAgICAgaWYodmFsdWUgPT0gJ01lZXRpbmcnKXsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCIjZmV0Y2hNZWV0aW5nVGl0bGVVcmwiKS52YWwoKSwKICAgICAgICAgICAgICAgICAgICBkYXRhOnt9LAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aXRsZVNlbGVjdCA9ICRtb2RhbC5maW5kKCcjbWVldGluZ0VsZW1lbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHRpdGxlU2VsZWN0LmZpbmQoJ29wdGlvbicpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZGF0YSwgZnVuY3Rpb24oIGluZGV4LCB2YWx1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aXRsZVNlbGVjdC5hcHBlbmQoIjxvcHRpb24gdmFsdWU9Iit2YWx1ZS5pZCsiPiIrdmFsdWUudGl0bGUrIjwvb3B0aW9uPiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgJHRpdGxlU2VsZWN0LnZhbCgkbW9kYWwuZmluZCgiI21lZXRpbmdWYWx1ZSIpLnZhbCgpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihtZWV0aW5nSWQgPT0gc2VsZWN0ZWRBY3Rpb25JZCkgewogICAgICAgICAgICAgICAgJCgnLm1lZXRpbmctZGVjaWRlcicpLnZhbCgndHJ1ZScpOwogICAgICAgICAgICAgICAgJCgnLmFjdGlvbi10eXBlLWxpc3QnKS5hZGRDbGFzcygnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAkKCcubWVldGluZy1saXN0JykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgnLm1lZXRpbmctZGVjaWRlcicpLnZhbCgnZmFsc2UnKTsKICAgICAgICAgICAgICAgICQoJy5hY3Rpb24tdHlwZS1saXN0JykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgJCgnLm1lZXRpbmctbGlzdCcpLmFkZENsYXNzKCdoaWRkZW4nKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgICQoJyNkdWUtZGF0ZS1waWNrZXInKS5kYXRlcGlja2VyKHsKICAgICAgICAgICAgZGF0ZTogJCgiI2R1ZS1kYXRlLXBpY2tlciIpLnZhbCgpID8gJCgiI2R1ZS1kYXRlLXBpY2tlciIpLnZhbCgpIDogbnVsbCwKICAgICAgICAgICAgbW9tZW50Q29uZmlnOiB7CiAgICAgICAgICAgICAgICBjdWx0dXJlOiB1c2VyTG9jYWxlLAogICAgICAgICAgICAgICAgdHo6IHVzZXJUaW1lWm9uZSwKICAgICAgICAgICAgICAgIGZvcm1hdDogREVGQVVMVF9EQVRFX0RJU1BMQVlfRk9STUFUCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgJCgnI2R1ZS1kYXRlLXBpY2tlcicpLmRhdGVwaWNrZXIoewogICAgICAgICAgICBkYXRlOiAkKCIjZHVlLWRhdGUtcGlja2VyIikudmFsKCkgPyBuZXcgRGF0ZSgkKCIjZHVlLWRhdGUtcGlja2VyIikudmFsKCkpIDogbnVsbCwKICAgICAgICAgICAgbW9tZW50Q29uZmlnOiB7CiAgICAgICAgICAgICAgICBjdWx0dXJlOiB1c2VyTG9jYWxlLAogICAgICAgICAgICAgICAgdHo6IHVzZXJUaW1lWm9uZSwKICAgICAgICAgICAgICAgIGZvcm1hdDogREVGQVVMVF9EQVRFX0RJU1BMQVlfRk9STUFUCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pCjwvc2NyaXB0Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJtZWV0aW5nVmFsdWUiIHZhbHVlPSIiIGlkPSJtZWV0aW5nVmFsdWUiIC8+CjxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29uZmlnLmlkIj4KICAgICAgICAgICAgICAgIEFjdGlvbgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIGFjdGlvbi12YWx1ZSIgbmFtZT0iY29uZmlnLmlkIiBpZD0iY29uZmlnIiBkYXRhLXRleHQ9ImNyZWF0ZSIgPg0KPG9wdGlvbiB2YWx1ZT0iIj48L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY4MTQiID5BZGRpdGlvbmFsIGludmVzdGlnYXRpb25zPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODIzIiA+Q2hhbmdlIHRvIFJNUDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjgzMiIgPkNoYW5nZXMgdG8gUkVNUzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg0MSIgPkNvbW11bmljYXRpb248L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY4NTAiID5FeGNoYW5nZSBvZiBJbmZvcm1hdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg1OSIgPkluZm9ybWVkIGNvbnNlbnQgbW9kaWZpY2F0aW9uPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODA1IiA+TWVldGluZzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg2OCIgPk1pZ3JhdGVkIEFjdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg3NyIgPk90aGVyPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODg2IiA+UGVyaW9kaWMgUmV2aWV3PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODk1IiA+UG9zdC1BdXRob3JpemF0aW9uIHN0dWR5PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTA0IiA+UHJvcG9zaXRpb24gb2YgTGFiZWxpbmcgdXBkYXRlPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTEzIiA+UmVhc3Nlc3NtZW50PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTIyIiA+UmVjYWxsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTMxIiA+UmV2aWV3IElDU1JzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTQwIiA+UmV2aWV3IGxpdGVyYXR1cmU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY5NDkiID5SaXNrIG1pbmltaXphdGlvbiBtZWFzdXJlczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjk1OCIgPlRlY2huaWNhbCBFdmFsdWF0aW9uPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgYWN0aW9uLXR5cGUtbGlzdCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InR5cGUuaWQiPgogICAgICAgICAgICAgICAgQWN0aW9uIFR5cGUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAiIG5hbWU9InR5cGUuaWQiIGlkPSJ0eXBlIiA+DQo8b3B0aW9uIHZhbHVlPSJudWxsIj48L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY0MjEiID5BRVNNPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2Nzg5IiA+QXV0byBBbGVydDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjc5NyIgPkZ1cnRoZXIgUmV2aWV3PC9vcHRpb24+DQo8L3NlbGVjdD4KCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJtZWV0aW5nLWRlY2lkZXIiIG5hbWU9ImlzTWVldGluZ0FjdGlvbiIgdmFsdWU9ImZhbHNlIi8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgaGlkZGVuIG1lZXRpbmctbGlzdCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1lZXRpbmcuaWQiPgogICAgICAgICAgICAgICAgTWVldGluZyBUaXRsZQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJtZWV0aW5nLmlkIiBpZD0ibWVldGluZ0VsZW1lbnQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj48L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoKICAgIHNoYXJlZFdpdGhMaXN0VXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnVzZXJcdTAwMmZzZWFyY2hVc2VyR3JvdXBMaXN0IjsKCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgYmluZFNoYXJlV2l0aCgkKCcuYXNzaWduZWRUb1ZhbHVlJyksIHNoYXJlZFdpdGhMaXN0VXJsLCAnJywgbnVsbCwgdHJ1ZSk7CiAgICB9KTsKDQo8L3NjcmlwdD4NCgoKPGRpdiBjbGFzcz0iY29sLWxnLTMiPgogICAgPGxhYmVsPgogICAgICAgIEFzc2lnbmVkIFRvCiAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgIDwvbGFiZWw+CiAgICA8c2VsZWN0IGlkPSJhc3NpZ25lZFRvIiBuYW1lPSJhc3NpZ25lZFRvVmFsdWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiBhc3NpZ25lZFRvVmFsdWUiPjwvc2VsZWN0Pgo8L2Rpdj4KCgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnVlbHV4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIiIGlkPSJkdWUtZGF0ZS1waWNrZXIiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5EdWUgRGF0ZTxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0iRHVlIERhdGUiIG5hbWU9ImR1ZURhdGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20iIGlkPSJkdWVEYXRlIiB0eXBlPSJ0ZXh0IiBkYXRhLWRhdGU9IiIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxicj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRldGFpbHMiPgogICAgICAgICAgICAgICAgQWN0aW9uIERldGFpbHMKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIHRhcmVhLTIwMCIgbmFtZT0iZGV0YWlscyIgaWQ9ImRldGFpbHMiID48L3RleHRhcmVhPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29tbWVudHMiPgogICAgICAgICAgICAgICAgQ29tbWVudHMKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgdGFyZWEtMjAwIiBuYW1lPSJjb21tZW50cyIgaWQ9ImNvbW1lbnRzIiA+PC90ZXh0YXJlYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCiAgICAgICAgPGRpdiBjbGFzcz0icm93IHN0YXR1cy1pY29uIGhpZGRlbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIGZvcm0tZ3JvdXAgIj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iYWN0aW9uU3RhdHVzIj4KICAgICAgICAgICAgICAgIEFjdGlvbiBTdGF0dXM6PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iYWN0aW9uU3RhdHVzIiBpZD0iYWN0aW9uU3RhdHVzIiA+DQo8b3B0aW9uIHZhbHVlPSJJblByb2Nlc3MiID5JbiBQcm9ncmVzczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iRGVsZXRlZCIgPkRlbGV0ZWQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9Ik5ldyIgPk5ldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iQ2xvc2VkIiA+Q2xvc2VkPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJSZU9wZW5lZCIgPlJlLW9wZW5lZDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDxkaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYmFja1VybCIgdmFsdWU9IiIgaWQ9ImJhY2tVcmwiIC8+CiAgICA8L2Rpdj4KCiAgICAKCiAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iY3JlYXRlLWFjdGlvbi1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgaWQtZWxlbWVudCI+Q3JlYXRlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DbG9zZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iZWRpdEFjdGlvbk1vZGFsIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0icHJvZHVjdERpY3Rpb25hcnlMYWJlbCIKICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iZWRpdEFjdGlvbkxhYmVsIj5FZGl0IEFjdGlvbjwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvc2lnbmFsL2FjdGlvbi9zYXZlIiBtZXRob2Q9InBvc3QiIG5hbWU9InRlbXBGb3JtIiBpZD0idGVtcEZvcm0iID4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjcmVhdGUtdXJsIiB2YWx1ZT0iL3NpZ25hbC9hY3Rpb24vdXBkYXRlIiBpZD0iY3JlYXRlLXVybCIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhcHBUeXBlIiBpZD0iYXBwVHlwZSIgdmFsdWU9IlNpZ25hbCBNYW5hZ2VtZW50IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImV4ZUNvbmZpZ0lkIiBpZD0iZXhlQ29uZmlnSWQiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiB2YWx1ZT0iIiBpZD0iYWN0aW9uSWQiIC8+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InZlcnNpb24iIHZhbHVlPSIiIGlkPSJ2ZXJzaW9uIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhbGVydElkIiB2YWx1ZT0iMTIxOTY1MCIgY2xhc3M9ImFsZXJ0SWQiIGlkPSJhbGVydElkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24tbWVldGluZy1pZCIgdmFsdWU9IjY4MDUiIGNsYXNzPSJhY3Rpb24tbWVldGluZy1pZCIgaWQ9ImFjdGlvbi1tZWV0aW5nLWlkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmZXRjaE1lZXRpbmdUaXRsZVVybCIgdmFsdWU9Ii9zaWduYWwvbWVldGluZy9mZXRjaE1lZXRpbmdUaXRsZXM/YWxlcnRJZD0xMjE5NjUwJmFtcDtpc1RvcGljRmxvdz0iIGlkPSJmZXRjaE1lZXRpbmdUaXRsZVVybCIgLz4KPHNjcmlwdD4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgJGNyZWF0ZUFjdGlvbk1vZGFsID0gJCgiI2NyZWF0ZUFjdGlvbk1vZGFsIik7CiAgICAgICAgdmFyICRlZGl0QWN0aW9uTW9kYWwgPSAkKCIjZWRpdEFjdGlvbk1vZGFsIik7CiAgICAgICAgJCgnLmFjdGlvbi12YWx1ZScpLmNoYW5nZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciAkbW9kYWw7CiAgICAgICAgICAgIHZhciB0ZXh0ID0gJCh0aGlzKS5kYXRhKCd0ZXh0Jyk7CiAgICAgICAgICAgIGlmKHRleHQgPT0gJ2NyZWF0ZScpewogICAgICAgICAgICAgICAgJG1vZGFsID0gJGNyZWF0ZUFjdGlvbk1vZGFsOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICRtb2RhbCA9ICRlZGl0QWN0aW9uTW9kYWw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNlbGVjdGVkQWN0aW9uSWQgPSAkKHRoaXMpLnZhbCgpOwogICAgICAgICAgICB2YXIgbWVldGluZ0lkID0gJCgnLmFjdGlvbi1tZWV0aW5nLWlkJykudmFsKCk7CiAgICAgICAgICAgIHZhciB2YWx1ZSA9ICRtb2RhbC5maW5kKCIjY29uZmlnIikuZmluZCgnb3B0aW9uOnNlbGVjdGVkJykudGV4dCgpOwogICAgICAgICAgICBpZih2YWx1ZSA9PSAnTWVldGluZycpewogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICB1cmw6ICQoIiNmZXRjaE1lZXRpbmdUaXRsZVVybCIpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgIGRhdGE6e30sCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHRpdGxlU2VsZWN0ID0gJG1vZGFsLmZpbmQoJyNtZWV0aW5nRWxlbWVudCcpOwogICAgICAgICAgICAgICAgICAgICAgICAkdGl0bGVTZWxlY3QuZmluZCgnb3B0aW9uJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbiggaW5kZXgsIHZhbHVlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpdGxlU2VsZWN0LmFwcGVuZCgiPG9wdGlvbiB2YWx1ZT0iK3ZhbHVlLmlkKyI+Iit2YWx1ZS50aXRsZSsiPC9vcHRpb24+Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAkdGl0bGVTZWxlY3QudmFsKCRtb2RhbC5maW5kKCIjbWVldGluZ1ZhbHVlIikudmFsKCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKG1lZXRpbmdJZCA9PSBzZWxlY3RlZEFjdGlvbklkKSB7CiAgICAgICAgICAgICAgICAkKCcubWVldGluZy1kZWNpZGVyJykudmFsKCd0cnVlJyk7CiAgICAgICAgICAgICAgICAkKCcuYWN0aW9uLXR5cGUtbGlzdCcpLmFkZENsYXNzKCdoaWRkZW4nKTsKICAgICAgICAgICAgICAgICQoJy5tZWV0aW5nLWxpc3QnKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCcubWVldGluZy1kZWNpZGVyJykudmFsKCdmYWxzZScpOwogICAgICAgICAgICAgICAgJCgnLmFjdGlvbi10eXBlLWxpc3QnKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAkKCcubWVldGluZy1saXN0JykuYWRkQ2xhc3MoJ2hpZGRlbicpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgJCgnI2R1ZS1kYXRlLXBpY2tlcicpLmRhdGVwaWNrZXIoewogICAgICAgICAgICBkYXRlOiAkKCIjZHVlLWRhdGUtcGlja2VyIikudmFsKCkgPyAkKCIjZHVlLWRhdGUtcGlja2VyIikudmFsKCkgOiBudWxsLAogICAgICAgICAgICBtb21lbnRDb25maWc6IHsKICAgICAgICAgICAgICAgIGN1bHR1cmU6IHVzZXJMb2NhbGUsCiAgICAgICAgICAgICAgICB0ejogdXNlclRpbWVab25lLAogICAgICAgICAgICAgICAgZm9ybWF0OiBERUZBVUxUX0RBVEVfRElTUExBWV9GT1JNQVQKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAkKCcjZHVlLWRhdGUtcGlja2VyJykuZGF0ZXBpY2tlcih7CiAgICAgICAgICAgIGRhdGU6ICQoIiNkdWUtZGF0ZS1waWNrZXIiKS52YWwoKSA/IG5ldyBEYXRlKCQoIiNkdWUtZGF0ZS1waWNrZXIiKS52YWwoKSkgOiBudWxsLAogICAgICAgICAgICBtb21lbnRDb25maWc6IHsKICAgICAgICAgICAgICAgIGN1bHR1cmU6IHVzZXJMb2NhbGUsCiAgICAgICAgICAgICAgICB0ejogdXNlclRpbWVab25lLAogICAgICAgICAgICAgICAgZm9ybWF0OiBERUZBVUxUX0RBVEVfRElTUExBWV9GT1JNQVQKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSkKPC9zY3JpcHQ+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1lZXRpbmdWYWx1ZSIgdmFsdWU9IiIgaWQ9Im1lZXRpbmdWYWx1ZSIgLz4KPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMiPgogICAgICAgICAgICA8bGFiZWwgZm9yPSJjb25maWcuaWQiPgogICAgICAgICAgICAgICAgQWN0aW9uCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgYWN0aW9uLXZhbHVlIiBuYW1lPSJjb25maWcuaWQiIGlkPSJjb25maWciIGRhdGEtdGV4dD0iZWRpdCIgPg0KPG9wdGlvbiB2YWx1ZT0iIj48L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY4MTQiID5BZGRpdGlvbmFsIGludmVzdGlnYXRpb25zPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODIzIiA+Q2hhbmdlIHRvIFJNUDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjgzMiIgPkNoYW5nZXMgdG8gUkVNUzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg0MSIgPkNvbW11bmljYXRpb248L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY4NTAiID5FeGNoYW5nZSBvZiBJbmZvcm1hdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg1OSIgPkluZm9ybWVkIGNvbnNlbnQgbW9kaWZpY2F0aW9uPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODA1IiA+TWVldGluZzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg2OCIgPk1pZ3JhdGVkIEFjdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjg3NyIgPk90aGVyPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODg2IiA+UGVyaW9kaWMgUmV2aWV3PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2ODk1IiA+UG9zdC1BdXRob3JpemF0aW9uIHN0dWR5PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTA0IiA+UHJvcG9zaXRpb24gb2YgTGFiZWxpbmcgdXBkYXRlPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTEzIiA+UmVhc3Nlc3NtZW50PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTIyIiA+UmVjYWxsPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTMxIiA+UmV2aWV3IElDU1JzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTQwIiA+UmV2aWV3IGxpdGVyYXR1cmU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY5NDkiID5SaXNrIG1pbmltaXphdGlvbiBtZWFzdXJlczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjk1OCIgPlRlY2huaWNhbCBFdmFsdWF0aW9uPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgYWN0aW9uLXR5cGUtbGlzdCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InR5cGUuaWQiPgogICAgICAgICAgICAgICAgQWN0aW9uIFR5cGUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAiIG5hbWU9InR5cGUuaWQiIGlkPSJ0eXBlIiA+DQo8b3B0aW9uIHZhbHVlPSJudWxsIj48L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY0MjEiID5BRVNNPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2Nzg5IiA+QXV0byBBbGVydDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjc5NyIgPkZ1cnRoZXIgUmV2aWV3PC9vcHRpb24+DQo8L3NlbGVjdD4KCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJtZWV0aW5nLWRlY2lkZXIiIG5hbWU9ImlzTWVldGluZ0FjdGlvbiIgdmFsdWU9ImZhbHNlIi8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgaGlkZGVuIG1lZXRpbmctbGlzdCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1lZXRpbmcuaWQiPgogICAgICAgICAgICAgICAgTWVldGluZyBUaXRsZQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJtZWV0aW5nLmlkIiBpZD0ibWVldGluZ0VsZW1lbnQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj48L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoKICAgIHNoYXJlZFdpdGhMaXN0VXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnVzZXJcdTAwMmZzZWFyY2hVc2VyR3JvdXBMaXN0IjsKCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgYmluZFNoYXJlV2l0aCgkKCcuYXNzaWduZWRUb1ZhbHVlJyksIHNoYXJlZFdpdGhMaXN0VXJsLCAnJywgbnVsbCwgdHJ1ZSk7CiAgICB9KTsKDQo8L3NjcmlwdD4NCgoKPGRpdiBjbGFzcz0iY29sLWxnLTMiPgogICAgPGxhYmVsPgogICAgICAgIEFzc2lnbmVkIFRvCiAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgIDwvbGFiZWw+CiAgICA8c2VsZWN0IGlkPSJhc3NpZ25lZFRvIiBuYW1lPSJhc3NpZ25lZFRvVmFsdWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiBhc3NpZ25lZFRvVmFsdWUiPjwvc2VsZWN0Pgo8L2Rpdj4KCgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnVlbHV4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIiIGlkPSJkdWUtZGF0ZS1waWNrZXIiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5EdWUgRGF0ZTxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0iRHVlIERhdGUiIG5hbWU9ImR1ZURhdGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20iIGlkPSJkdWVEYXRlIiB0eXBlPSJ0ZXh0IiBkYXRhLWRhdGU9IiIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxicj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRldGFpbHMiPgogICAgICAgICAgICAgICAgQWN0aW9uIERldGFpbHMKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIHRhcmVhLTIwMCIgbmFtZT0iZGV0YWlscyIgaWQ9ImRldGFpbHMiID48L3RleHRhcmVhPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29tbWVudHMiPgogICAgICAgICAgICAgICAgQ29tbWVudHMKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgdGFyZWEtMjAwIiBuYW1lPSJjb21tZW50cyIgaWQ9ImNvbW1lbnRzIiA+PC90ZXh0YXJlYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCiAgICAgICAgPGRpdiBjbGFzcz0icm93IHN0YXR1cy1pY29uIGhpZGRlbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIGZvcm0tZ3JvdXAgIj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iYWN0aW9uU3RhdHVzIj4KICAgICAgICAgICAgICAgIEFjdGlvbiBTdGF0dXM6PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iYWN0aW9uU3RhdHVzIiBpZD0iYWN0aW9uU3RhdHVzIiA+DQo8b3B0aW9uIHZhbHVlPSJJblByb2Nlc3MiID5JbiBQcm9ncmVzczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iRGVsZXRlZCIgPkRlbGV0ZWQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9Ik5ldyIgPk5ldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iQ2xvc2VkIiA+Q2xvc2VkPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJSZU9wZW5lZCIgPlJlLW9wZW5lZDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDxkaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYmFja1VybCIgdmFsdWU9IiIgaWQ9ImJhY2tVcmwiIC8+CiAgICA8L2Rpdj4KCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBmb3JtLWdyb3VwIGNlbGwtYnJlYWsiPgogICAgICAgICAgICAgICAgPGxhYmVsPlZhbGlkYXRlZCBTaWduYWw8L2xhYmVsPjxicj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2RldGFpbHM/aWQ9MTIxOTY1MCI+UGVyZlNpZ25hbDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGZvcm0tZ3JvdXAgY2VsbC1icmVhayI+CiAgICAgICAgICAgICAgICA8bGFiZWw+UHJvZHVjdCBOYW1lPC9sYWJlbD48YnI+CiAgICAgICAgICAgICAgICA8c3Bhbj5QRU5JQ0lMTElOIEc8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBmb3JtLWdyb3VwIGNlbGwtYnJlYWsiPgogICAgICAgICAgICAgICAgPGxhYmVsPkV2ZW50IE5hbWU8L2xhYmVsPjxicj4KICAgICAgICAgICAgICAgIDxzcGFuPk5lcGhyb3RpYyBzeW5kcm9tZSAoUFQpPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgaWQtZWxlbWVudCB1cGRhdGUtYWN0aW9uIiBkYXRhLWlkPSIiPlVwZGF0ZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxzdHlsZT4KLmRhdGFUYWJsZUhpZGVDZWxsQ29udGVudCB7CiAgICBkaXNwbGF5OiBibG9jazsKfQouZHJvcGRvd24tbWVudT5saT5idXR0b24gewogICAgZGlzcGxheTogYmxvY2s7CiAgICBjbGVhcjogYm90aDsKICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MzsKICAgIGNvbG9yOiAjMzMzOwogICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKfQoKPC9zdHlsZT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9zY2hlZHVsZXItODJkM2JlMDAyNjRlYTJlYTgxMmNiOTIxMTRkYjg5OWUuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9ib290Ym94Lm1pbi0wNWQyM2QzOTIwMDE1ODQ1Y2EwMDQxNDA4MWZkMGVjNi5qcyIgPjwvc2NyaXB0Pgo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zaWduYWwvYXNzZXRzL2Jvb3RzdHJhcC10aW1lcGlja2VyL2Jvb3RzdHJhcC10aW1lcGlja2VyLm1pbi01NDUwZmVhNDg4ZDlhYjNkZTYzNTllYmVlOWFiNTNkMi5jc3MiLz4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYm9vdHN0cmFwLXRpbWVwaWNrZXIvYm9vdHN0cmFwLXRpbWVwaWNrZXIubWluLWM2MTc1OWViYmYwYjljMzJkN2RkNGI1NzZhMDJiM2FmLmpzIiA+PC9zY3JpcHQ+CjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgcGFuZWwiPgogICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTciPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICBNZWV0aW5ncwogICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSBpY28tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1bGwtcmlnaHQgbS1sLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7IG1hcmdpbi1yaWdodDoxNXB4OyBjdXJzb3I6IHBvaW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIGV4cG9ydFBhbmVsIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHRhYmluZGV4PSIwIiBhY2Nlc3NrZXk9IngiIHRpdGxlPSJFeHBvcnQgdG8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZXhwb3J0IGZvbnQtMjQgYmx1ZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQgaGlkZGVuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGV4cG9ydC10eXBlLWxpc3QiIGlkPSJleHBvcnRUeXBlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJmb250LTEyIj5FeHBvcnQ8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9leHBvcnRNZWV0aW5nRGV0YWlsUmVwb3J0P291dHB1dEZvcm1hdD1ET0NYJmFtcDtzaWduYWxJZD0xMjE5NjUwJmFtcDthcHBUeXBlPVNpZ25hbCtNYW5hZ2VtZW50JmFtcDtjYWxsaW5nU2NyZWVuPXJldmlldyIgY2xhc3M9Im0tci0zMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3dvcmQtaWNvbi5wbmciIGNsYXNzPSJtLXItMTAiIGhlaWdodD0iMTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTYiLz5TYXZlIGFzIFdvcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvZXhwb3J0TWVldGluZ0RldGFpbFJlcG9ydD9vdXRwdXRGb3JtYXQ9WExTWCZhbXA7c2lnbmFsSWQ9MTIxOTY1MCZhbXA7YXBwVHlwZT1TaWduYWwrTWFuYWdlbWVudCZhbXA7Y2FsbGluZ1NjcmVlbj1yZXZpZXciIGNsYXNzPSJtLXItMzAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9leGNlbC5naWYiIGNsYXNzPSJtLXItMTAiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPlNhdmUgYXMgRXhjZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2V4cG9ydE1lZXRpbmdEZXRhaWxSZXBvcnQ/b3V0cHV0Rm9ybWF0PVBERiZhbXA7c2lnbmFsSWQ9MTIxOTY1MCZhbXA7YXBwVHlwZT1TaWduYWwrTWFuYWdlbWVudCZhbXA7Y2FsbGluZ1NjcmVlbj1yZXZpZXciIGNsYXNzPSJtLXItMzAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9wZGYtaWNvbi5qcGciIGNsYXNzPSJtLXItMTAiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPlNhdmUgYXMgUERGCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItY29udGVudCByb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFjdGlvbi1saXN0LWNvbmFpbnRlciIgY2xhc3M9Imxpc3QiPgogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0ibWVldGluZy10YWJsZSIgY2xhc3M9InJvdy1ib3JkZXIgaG92ZXIgZGF0YVRhYmxlIG5vLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVldGluZyBUaXRsZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVldGluZyBEYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5NZWV0aW5nIE1pbnV0ZXM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk93bmVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BZ2VuZGE8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhc3QgTW9kaWZpZWQgQnk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhc3QgTW9kaWZpZWQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjdGlvbiBTdGF0dXM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGlkPSJzY2hlZHVsYXJDb250YWluZXIiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAKCgoKPGRpdiBjbGFzcz0iY29sLXhzLTMgZnVlbHV4IiBpZD0iZGlzYWJsZWRTY2hlZHVsZXIiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNFbmFibGVkIiBpZD0iaXNFbmFibGVkIiB2YWx1ZT0idHJ1ZSIgLz4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciIHN0eWxlPSJ3aWR0aDogNjAwcHg7Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0taG9yaXpvbnRhbCBzY2hlZHVsZXIgbXlTY2hlZHVsZXIiIHJvbGU9ImZvcm0iIGlkPSJteVNjaGVkdWxlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBzdGFydC1kYXRldGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTIgY29udHJvbC1sYWJlbCBzY2hlZHVsZXItbGFiZWwiIGZvcj0ibXlTdGFydERhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQgRGF0ZTxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBjb2wtc20tMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTcgZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBzdGFydC1kYXRlIiBpZD0ibXlEYXRlUGlja2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJNeVN0YXJ0RGF0ZSIgdHlwZT0idGV4dCIgcmVhZG9ubHkvPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWJ0biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIHB2LWJ0bi1ncmV5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2FsZW5kYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IGRhdGVwaWNrZXItY2FsZW5kYXItd3JhcHBlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9Im1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPlByZXZpb3VzIE1vbnRoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmV4dCI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMSI+RmVicnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNCI+TWF5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI3Ij5BdWd1c3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTAiPk5vdmVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TW88L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGg8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1tb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SmFuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIzIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXByPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI2Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVsPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI5Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+T2N0PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPlllYXI8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtZm9vdGVyIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UmV0dXJuIHRvIENhbGVuZGFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TW9udGggYW5kIFllYXI8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBmb3JtLWdyb3VwIiBpZD0idGltZVNlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzci1vbmx5IiBmb3I9Ik15U3RhcnRUaW1lIj5TdGFydCBUaW1lPC9sYWJlbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgY29tYm9ib3ggc3RhcnQtdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ibXlTdGFydFRpbWUiIHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlYWRvbmx5Lz4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWJ0biAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcHYtYnRuLWdyZXkgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgRHJvcGRvd248L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCIgcm9sZT0ibWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGlkPSJ0aW1lIiBocmVmPSIjIj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZm9ybS1ncm91cCB0aW1lem9uZS1jb250YWluZXIgcC1iLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIHNjaGVkdWxlci1sYWJlbCI+VGltZXpvbmU8L2xhYmVsPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS0xMCBjb2wtbWQtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXJlc2l6ZT0iYXV0byIgY2xhc3M9ImJ0bi1ncm91cCBzZWxlY3RsaXN0IHRpbWV6b25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB2LWJ0bi1ncmV5IGRyb3Bkb3duLXRvZ2dsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZWxlY3RlZC1sYWJlbCIgc3R5bGU9IndpZHRoOiA2N3B4OyI+RXRjL0dNVCsxMiAoR01ULTEyOjAwKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgRHJvcGRvd248L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0FiaWRqYW4iIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9BYmlkamFuIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvQWNjcmEiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9BY2NyYSAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0FkZGlzX0FiYWJhIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvQWRkaXNfQWJhYmEgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9BbGdpZXJzIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvQWxnaWVycyAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0FzbWFyYSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0FzbWFyYSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0FzbWVyYSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0FzbWVyYSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0JhbWFrbyIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0JhbWFrbyAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0Jhbmd1aSIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0Jhbmd1aSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0Jhbmp1bCIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0Jhbmp1bCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0Jpc3NhdSIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0Jpc3NhdSAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0JsYW50eXJlIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvQmxhbnR5cmUgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9CcmF6emF2aWxsZSIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0JyYXp6YXZpbGxlIChHTVQrMDE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvQnVqdW1idXJhIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvQnVqdW1idXJhIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvQ2Fpcm8iIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9DYWlybyAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0Nhc2FibGFuY2EiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9DYXNhYmxhbmNhIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvQ2V1dGEiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9DZXV0YSAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0NvbmFrcnkiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9Db25ha3J5IChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvRGFrYXIiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9EYWthciAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0Rhcl9lc19TYWxhYW0iIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9EYXJfZXNfU2FsYWFtIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvRGppYm91dGkiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9Eamlib3V0aSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0RvdWFsYSIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0RvdWFsYSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0VsX0FhaXVuIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvRWxfQWFpdW4gKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9GcmVldG93biIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0ZyZWV0b3duIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvR2Fib3JvbmUiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9HYWJvcm9uZSAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0hhcmFyZSIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0hhcmFyZSAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0pvaGFubmVzYnVyZyIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0pvaGFubmVzYnVyZyAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0p1YmEiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9KdWJhIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvS2FtcGFsYSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0thbXBhbGEgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9LaGFydG91bSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0toYXJ0b3VtIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvS2lnYWxpIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvS2lnYWxpIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvS2luc2hhc2EiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9LaW5zaGFzYSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0xhZ29zIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTGFnb3MgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9MaWJyZXZpbGxlIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTGlicmV2aWxsZSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL0xvbWUiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9Mb21lIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvTHVhbmRhIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTHVhbmRhIChHTVQrMDE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvTHVidW1iYXNoaSIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL0x1YnVtYmFzaGkgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9MdXNha2EiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9MdXNha2EgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9NYWxhYm8iIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9NYWxhYm8gKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9NYXB1dG8iIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9NYXB1dG8gKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9NYXNlcnUiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9NYXNlcnUgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9NYmFiYW5lIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTWJhYmFuZSAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL01vZ2FkaXNodSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL01vZ2FkaXNodSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL01vbnJvdmlhIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTW9ucm92aWEgKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9OYWlyb2JpIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTmFpcm9iaSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL05kamFtZW5hIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTmRqYW1lbmEgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9OaWFtZXkiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9OaWFtZXkgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9Ob3Vha2Nob3R0IiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvTm91YWtjaG90dCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL091YWdhZG91Z291IiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvT3VhZ2Fkb3Vnb3UgKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9Qb3J0by1Ob3ZvIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvUG9ydG8tTm92byAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQWZyaWNhL1Nhb19Ub21lIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5BZnJpY2EvU2FvX1RvbWUgKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9UaW1idWt0dSIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL1RpbWJ1a3R1IChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvVHJpcG9saSIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL1RyaXBvbGkgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFmcmljYS9UdW5pcyIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+QWZyaWNhL1R1bmlzIChHTVQrMDE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBZnJpY2EvV2luZGhvZWsiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkFmcmljYS9XaW5kaG9layAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BZGFrIiBkYXRhLW9mZnNldD0iLTA5OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FkYWsgKEdNVC0wOTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQW5jaG9yYWdlIiBkYXRhLW9mZnNldD0iLTA4OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FuY2hvcmFnZSAoR01ULTA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Bbmd1aWxsYSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Bbmd1aWxsYSAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BbnRpZ3VhIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FudGlndWEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQXJhZ3VhaW5hIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FyYWd1YWluYSAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXMgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQXJnZW50aW5hL0NhdGFtYXJjYSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BcmdlbnRpbmEvQ2F0YW1hcmNhIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0FyZ2VudGluYS9Db21vZFJpdmFkYXZpYSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BcmdlbnRpbmEvQ29tb2RSaXZhZGF2aWEgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQXJnZW50aW5hL0NvcmRvYmEiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQXJnZW50aW5hL0NvcmRvYmEgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQXJnZW50aW5hL0p1anV5IiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FyZ2VudGluYS9KdWp1eSAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BcmdlbnRpbmEvTGFfUmlvamEiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQXJnZW50aW5hL0xhX1Jpb2phIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0FyZ2VudGluYS9NZW5kb3phIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FyZ2VudGluYS9NZW5kb3phIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0FyZ2VudGluYS9SaW9fR2FsbGVnb3MiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQXJnZW50aW5hL1Jpb19HYWxsZWdvcyAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BcmdlbnRpbmEvU2FsdGEiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQXJnZW50aW5hL1NhbHRhIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0FyZ2VudGluYS9TYW5fSnVhbiIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BcmdlbnRpbmEvU2FuX0p1YW4gKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQXJnZW50aW5hL1Nhbl9MdWlzIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0FyZ2VudGluYS9TYW5fTHVpcyAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BcmdlbnRpbmEvVHVjdW1hbiIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BcmdlbnRpbmEvVHVjdW1hbiAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BcmdlbnRpbmEvVXNodWFpYSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BcmdlbnRpbmEvVXNodWFpYSAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BcnViYSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BcnViYSAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Bc3VuY2lvbiIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Bc3VuY2lvbiAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BdGlrb2thbiIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9BdGlrb2thbiAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9BdGthIiBkYXRhLW9mZnNldD0iLTA5OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0F0a2EgKEdNVC0wOTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQmFoaWEiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQmFoaWEgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQmFoaWFfQmFuZGVyYXMiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQmFoaWFfQmFuZGVyYXMgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQmFyYmFkb3MiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQmFyYmFkb3MgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQmVsZW0iIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQmVsZW0gKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQmVsaXplIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0JlbGl6ZSAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9CbGFuYy1TYWJsb24iIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQmxhbmMtU2FibG9uIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0JvYV9WaXN0YSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Cb2FfVmlzdGEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQm9nb3RhIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0JvZ290YSAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Cb2lzZSIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Cb2lzZSAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9CdWVub3NfQWlyZXMiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQnVlbm9zX0FpcmVzIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0NhbWJyaWRnZV9CYXkiIGRhdGEtb2Zmc2V0PSItMDY6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQ2FtYnJpZGdlX0JheSAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9DYW1wb19HcmFuZGUiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQ2FtcG9fR3JhbmRlIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0NhbmN1biIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DYW5jdW4gKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQ2FyYWNhcyIgZGF0YS1vZmZzZXQ9Ii0wNDozMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DYXJhY2FzIChHTVQtMDQ6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0NhdGFtYXJjYSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DYXRhbWFyY2EgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQ2F5ZW5uZSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DYXllbm5lIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0NheW1hbiIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DYXltYW4gKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQ2hpY2FnbyIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DaGljYWdvIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0NoaWh1YWh1YSIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DaGlodWFodWEgKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQ29yYWxfSGFyYm91ciIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Db3JhbF9IYXJib3VyIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0NvcmRvYmEiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvQ29yZG9iYSAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Db3N0YV9SaWNhIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0Nvc3RhX1JpY2EgKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQ3Jlc3RvbiIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DcmVzdG9uIChHTVQtMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0N1aWFiYSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DdWlhYmEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvQ3VyYWNhbyIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9DdXJhY2FvIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0Rhbm1hcmtzaGF2biIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9EYW5tYXJrc2hhdm4gKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvRGF3c29uIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0Rhd3NvbiAoR01ULTA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9EYXdzb25fQ3JlZWsiIGRhdGEtb2Zmc2V0PSItMDc6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvRGF3c29uX0NyZWVrIChHTVQtMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0RlbnZlciIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9EZW52ZXIgKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvRGV0cm9pdCIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9EZXRyb2l0IChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0RvbWluaWNhIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0RvbWluaWNhIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0VkbW9udG9uIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0VkbW9udG9uIChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0VpcnVuZXBlIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0VpcnVuZXBlIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0VsX1NhbHZhZG9yIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0VsX1NhbHZhZG9yIChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0Vuc2VuYWRhIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0Vuc2VuYWRhIChHTVQtMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0ZvcnRfV2F5bmUiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvRm9ydF9XYXluZSAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Gb3J0YWxlemEiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvRm9ydGFsZXphIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0dsYWNlX0JheSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9HbGFjZV9CYXkgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvR29kdGhhYiIgZGF0YS1vZmZzZXQ9Ii0wMjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Hb2R0aGFiIChHTVQtMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0dvb3NlX0JheSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Hb29zZV9CYXkgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvR3JhbmRfVHVyayIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9HcmFuZF9UdXJrIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0dyZW5hZGEiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvR3JlbmFkYSAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9HdWFkZWxvdXBlIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0d1YWRlbG91cGUgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvR3VhdGVtYWxhIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0d1YXRlbWFsYSAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9HdWF5YXF1aWwiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvR3VheWFxdWlsIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0d1eWFuYSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9HdXlhbmEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvSGFsaWZheCIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9IYWxpZmF4IChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0hhdmFuYSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9IYXZhbmEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvSGVybW9zaWxsbyIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9IZXJtb3NpbGxvIChHTVQtMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0luZGlhbmEvSW5kaWFuYXBvbGlzIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0luZGlhbmEvSW5kaWFuYXBvbGlzIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0luZGlhbmEvS25veCIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9JbmRpYW5hL0tub3ggKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvSW5kaWFuYS9NYXJlbmdvIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0luZGlhbmEvTWFyZW5nbyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9JbmRpYW5hL1BldGVyc2J1cmciIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvSW5kaWFuYS9QZXRlcnNidXJnIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0luZGlhbmEvVGVsbF9DaXR5IiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0luZGlhbmEvVGVsbF9DaXR5IChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0luZGlhbmEvVmV2YXkiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvSW5kaWFuYS9WZXZheSAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9JbmRpYW5hL1ZpbmNlbm5lcyIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9JbmRpYW5hL1ZpbmNlbm5lcyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9JbmRpYW5hL1dpbmFtYWMiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvSW5kaWFuYS9XaW5hbWFjIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0luZGlhbmFwb2xpcyIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9JbmRpYW5hcG9saXMgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvSW51dmlrIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0ludXZpayAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9JcWFsdWl0IiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0lxYWx1aXQgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvSmFtYWljYSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9KYW1haWNhIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0p1anV5IiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0p1anV5IChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0p1bmVhdSIgZGF0YS1vZmZzZXQ9Ii0wODowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9KdW5lYXUgKEdNVC0wODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvS2VudHVja3kvTG91aXN2aWxsZSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9LZW50dWNreS9Mb3Vpc3ZpbGxlIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0tlbnR1Y2t5L01vbnRpY2VsbG8iIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvS2VudHVja3kvTW9udGljZWxsbyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Lbm94X0lOIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0tub3hfSU4gKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvS3JhbGVuZGlqayIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9LcmFsZW5kaWprIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0xhX1BheiIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9MYV9QYXogKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTGltYSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9MaW1hIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0xvc19BbmdlbGVzIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0xvc19BbmdlbGVzIChHTVQtMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL0xvdWlzdmlsbGUiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTG91aXN2aWxsZSAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Mb3dlcl9QcmluY2VzIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL0xvd2VyX1ByaW5jZXMgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWFjZWlvIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01hY2VpbyAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9NYW5hZ3VhIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01hbmFndWEgKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWFuYXVzIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01hbmF1cyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9NYXJpZ290IiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01hcmlnb3QgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWFydGluaXF1ZSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9NYXJ0aW5pcXVlIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL01hdGFtb3JvcyIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9NYXRhbW9yb3MgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWF6YXRsYW4iIGRhdGEtb2Zmc2V0PSItMDY6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTWF6YXRsYW4gKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWVuZG96YSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9NZW5kb3phIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL01lbm9taW5lZSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9NZW5vbWluZWUgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWVyaWRhIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01lcmlkYSAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9NZXRsYWthdGxhIiBkYXRhLW9mZnNldD0iLTA4OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01ldGxha2F0bGEgKEdNVC0wODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWV4aWNvX0NpdHkiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTWV4aWNvX0NpdHkgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTWlxdWVsb24iIGRhdGEtb2Zmc2V0PSItMDI6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTWlxdWVsb24gKEdNVC0wMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTW9uY3RvbiIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Nb25jdG9uIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL01vbnRlcnJleSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Nb250ZXJyZXkgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTW9udGV2aWRlbyIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Nb250ZXZpZGVvIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL01vbnRyZWFsIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL01vbnRyZWFsIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL01vbnRzZXJyYXQiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTW9udHNlcnJhdCAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9OYXNzYXUiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTmFzc2F1IChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL05ld19Zb3JrIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL05ld19Zb3JrIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL05pcGlnb24iIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTmlwaWdvbiAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Ob21lIiBkYXRhLW9mZnNldD0iLTA4OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL05vbWUgKEdNVC0wODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTm9yb25oYSIgZGF0YS1vZmZzZXQ9Ii0wMjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Ob3JvbmhhIChHTVQtMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL05vcnRoX0Rha290YS9CZXVsYWgiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvTm9ydGhfRGFrb3RhL0JldWxhaCAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Ob3J0aF9EYWtvdGEvQ2VudGVyIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL05vcnRoX0Rha290YS9DZW50ZXIgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvTm9ydGhfRGFrb3RhL05ld19TYWxlbSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Ob3J0aF9EYWtvdGEvTmV3X1NhbGVtIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL09qaW5hZ2EiIGRhdGEtb2Zmc2V0PSItMDY6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvT2ppbmFnYSAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9QYW5hbWEiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvUGFuYW1hIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1BhbmduaXJ0dW5nIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1BhbmduaXJ0dW5nIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1BhcmFtYXJpYm8iIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvUGFyYW1hcmlibyAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9QaG9lbml4IiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1Bob2VuaXggKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvUG9ydC1hdS1QcmluY2UiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvUG9ydC1hdS1QcmluY2UgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvUG9ydF9vZl9TcGFpbiIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Qb3J0X29mX1NwYWluIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1BvcnRvX0FjcmUiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvUG9ydG9fQWNyZSAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Qb3J0b19WZWxobyIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Qb3J0b19WZWxobyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9QdWVydG9fUmljbyIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9QdWVydG9fUmljbyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9SYWlueV9SaXZlciIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9SYWlueV9SaXZlciAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9SYW5raW5fSW5sZXQiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvUmFua2luX0lubGV0IChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1JlY2lmZSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9SZWNpZmUgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvUmVnaW5hIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1JlZ2luYSAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9SZXNvbHV0ZSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9SZXNvbHV0ZSAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9SaW9fQnJhbmNvIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1Jpb19CcmFuY28gKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvUm9zYXJpbyIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Sb3NhcmlvIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1NhbnRhX0lzYWJlbCIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9TYW50YV9Jc2FiZWwgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU2FudGFyZW0iIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvU2FudGFyZW0gKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU2FudGlhZ28iIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvU2FudGlhZ28gKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU2FudG9fRG9taW5nbyIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9TYW50b19Eb21pbmdvIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1Nhb19QYXVsbyIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9TYW9fUGF1bG8gKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU2NvcmVzYnlzdW5kIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1Njb3Jlc2J5c3VuZCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9TaGlwcm9jayIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9TaGlwcm9jayAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9TaXRrYSIgZGF0YS1vZmZzZXQ9Ii0wODowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9TaXRrYSAoR01ULTA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9TdF9CYXJ0aGVsZW15IiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1N0X0JhcnRoZWxlbXkgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU3RfSm9obnMiIGRhdGEtb2Zmc2V0PSItMDI6MzAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvU3RfSm9obnMgKEdNVC0wMjozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU3RfS2l0dHMiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvU3RfS2l0dHMgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU3RfTHVjaWEiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvU3RfTHVjaWEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU3RfVGhvbWFzIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1N0X1Rob21hcyAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9TdF9WaW5jZW50IiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1N0X1ZpbmNlbnQgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvU3dpZnRfQ3VycmVudCIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Td2lmdF9DdXJyZW50IChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1RlZ3VjaWdhbHBhIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1RlZ3VjaWdhbHBhIChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1RodWxlIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1RodWxlIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1RodW5kZXJfQmF5IiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1RodW5kZXJfQmF5IChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1RpanVhbmEiIGRhdGEtb2Zmc2V0PSItMDc6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvVGlqdWFuYSAoR01ULTA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9Ub3JvbnRvIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1Rvcm9udG8gKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvVG9ydG9sYSIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9Ub3J0b2xhIChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1ZhbmNvdXZlciIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9WYW5jb3V2ZXIgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvVmlyZ2luIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1ZpcmdpbiAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW1lcmljYS9XaGl0ZWhvcnNlIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1doaXRlaG9yc2UgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvV2lubmlwZWciIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkFtZXJpY2EvV2lubmlwZWcgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFtZXJpY2EvWWFrdXRhdCIgZGF0YS1vZmZzZXQ9Ii0wODowMCI+PGEgaHJlZj0iIyI+QW1lcmljYS9ZYWt1dGF0IChHTVQtMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbWVyaWNhL1llbGxvd2tuaWZlIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5BbWVyaWNhL1llbGxvd2tuaWZlIChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL0Nhc2V5IiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL0Nhc2V5IChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL0RhdmlzIiBkYXRhLW9mZnNldD0iKzA3OjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL0RhdmlzIChHTVQrMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL0R1bW9udERVcnZpbGxlIiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL0R1bW9udERVcnZpbGxlIChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL01hY3F1YXJpZSIgZGF0YS1vZmZzZXQ9IisxMTowMCI+PGEgaHJlZj0iIyI+QW50YXJjdGljYS9NYWNxdWFyaWUgKEdNVCsxMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFudGFyY3RpY2EvTWF3c29uIiBkYXRhLW9mZnNldD0iKzA1OjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL01hd3NvbiAoR01UKzA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW50YXJjdGljYS9NY011cmRvIiBkYXRhLW9mZnNldD0iKzEyOjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL01jTXVyZG8gKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFudGFyY3RpY2EvUGFsbWVyIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL1BhbG1lciAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQW50YXJjdGljYS9Sb3RoZXJhIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL1JvdGhlcmEgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFudGFyY3RpY2EvU291dGhfUG9sZSIgZGF0YS1vZmZzZXQ9IisxMjowMCI+PGEgaHJlZj0iIyI+QW50YXJjdGljYS9Tb3V0aF9Qb2xlIChHTVQrMTI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL1N5b3dhIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL1N5b3dhIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL1Ryb2xsIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5BbnRhcmN0aWNhL1Ryb2xsIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBbnRhcmN0aWNhL1Zvc3RvayIgZGF0YS1vZmZzZXQ9IiswNjowMCI+PGEgaHJlZj0iIyI+QW50YXJjdGljYS9Wb3N0b2sgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFyY3RpYy9Mb25neWVhcmJ5ZW4iIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkFyY3RpYy9Mb25neWVhcmJ5ZW4gKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQWRlbiIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QXNpYS9BZGVuIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0FsbWF0eSIgZGF0YS1vZmZzZXQ9IiswNjowMCI+PGEgaHJlZj0iIyI+QXNpYS9BbG1hdHkgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQW1tYW4iIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvQW1tYW4gKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQW5hZHlyIiBkYXRhLW9mZnNldD0iKzEyOjAwIj48YSBocmVmPSIjIj5Bc2lhL0FuYWR5ciAoR01UKzEyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9BcXRhdSIgZGF0YS1vZmZzZXQ9IiswNTowMCI+PGEgaHJlZj0iIyI+QXNpYS9BcXRhdSAoR01UKzA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9BcXRvYmUiIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkFzaWEvQXF0b2JlIChHTVQrMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0FzaGdhYmF0IiBkYXRhLW9mZnNldD0iKzA1OjAwIj48YSBocmVmPSIjIj5Bc2lhL0FzaGdhYmF0IChHTVQrMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0FzaGtoYWJhZCIgZGF0YS1vZmZzZXQ9IiswNTowMCI+PGEgaHJlZj0iIyI+QXNpYS9Bc2hraGFiYWQgKEdNVCswNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQmFnaGRhZCIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QXNpYS9CYWdoZGFkIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0JhaHJhaW4iIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvQmFocmFpbiAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9CYWt1IiBkYXRhLW9mZnNldD0iKzA1OjAwIj48YSBocmVmPSIjIj5Bc2lhL0Jha3UgKEdNVCswNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQmFuZ2tvayIgZGF0YS1vZmZzZXQ9IiswNzowMCI+PGEgaHJlZj0iIyI+QXNpYS9CYW5na29rIChHTVQrMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0JlaXJ1dCIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QXNpYS9CZWlydXQgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQmlzaGtlayIgZGF0YS1vZmZzZXQ9IiswNjowMCI+PGEgaHJlZj0iIyI+QXNpYS9CaXNoa2VrIChHTVQrMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0JydW5laSIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9CcnVuZWkgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQ2FsY3V0dGEiIGRhdGEtb2Zmc2V0PSIrMDU6MzAiPjxhIGhyZWY9IiMiPkFzaWEvQ2FsY3V0dGEgKEdNVCswNTozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQ2hpdGEiIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPkFzaWEvQ2hpdGEgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQ2hvaWJhbHNhbiIgZGF0YS1vZmZzZXQ9IiswOTowMCI+PGEgaHJlZj0iIyI+QXNpYS9DaG9pYmFsc2FuIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0Nob25ncWluZyIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9DaG9uZ3FpbmcgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvQ2h1bmdraW5nIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Bc2lhL0NodW5na2luZyAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9Db2xvbWJvIiBkYXRhLW9mZnNldD0iKzA1OjMwIj48YSBocmVmPSIjIj5Bc2lhL0NvbG9tYm8gKEdNVCswNTozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvRGFjY2EiIGRhdGEtb2Zmc2V0PSIrMDY6MDAiPjxhIGhyZWY9IiMiPkFzaWEvRGFjY2EgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvRGFtYXNjdXMiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvRGFtYXNjdXMgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvRGhha2EiIGRhdGEtb2Zmc2V0PSIrMDY6MDAiPjxhIGhyZWY9IiMiPkFzaWEvRGhha2EgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvRGlsaSIgZGF0YS1vZmZzZXQ9IiswOTowMCI+PGEgaHJlZj0iIyI+QXNpYS9EaWxpIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0R1YmFpIiBkYXRhLW9mZnNldD0iKzA0OjAwIj48YSBocmVmPSIjIj5Bc2lhL0R1YmFpIChHTVQrMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0R1c2hhbmJlIiBkYXRhLW9mZnNldD0iKzA1OjAwIj48YSBocmVmPSIjIj5Bc2lhL0R1c2hhbmJlIChHTVQrMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0dhemEiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvR2F6YSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9IYXJiaW4iIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPkFzaWEvSGFyYmluIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0hlYnJvbiIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QXNpYS9IZWJyb24gKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvSG9fQ2hpX01pbmgiIGRhdGEtb2Zmc2V0PSIrMDc6MDAiPjxhIGhyZWY9IiMiPkFzaWEvSG9fQ2hpX01pbmggKEdNVCswNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvSG9uZ19Lb25nIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Bc2lhL0hvbmdfS29uZyAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9Ib3ZkIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Bc2lhL0hvdmQgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvSXJrdXRzayIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9Jcmt1dHNrIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0lzdGFuYnVsIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5Bc2lhL0lzdGFuYnVsIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0pha2FydGEiIGRhdGEtb2Zmc2V0PSIrMDc6MDAiPjxhIGhyZWY9IiMiPkFzaWEvSmFrYXJ0YSAoR01UKzA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9KYXlhcHVyYSIgZGF0YS1vZmZzZXQ9IiswOTowMCI+PGEgaHJlZj0iIyI+QXNpYS9KYXlhcHVyYSAoR01UKzA5OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9KZXJ1c2FsZW0iIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvSmVydXNhbGVtIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0thYnVsIiBkYXRhLW9mZnNldD0iKzA0OjMwIj48YSBocmVmPSIjIj5Bc2lhL0thYnVsIChHTVQrMDQ6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0thbWNoYXRrYSIgZGF0YS1vZmZzZXQ9IisxMjowMCI+PGEgaHJlZj0iIyI+QXNpYS9LYW1jaGF0a2EgKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvS2FyYWNoaSIgZGF0YS1vZmZzZXQ9IiswNTowMCI+PGEgaHJlZj0iIyI+QXNpYS9LYXJhY2hpIChHTVQrMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0thc2hnYXIiIGRhdGEtb2Zmc2V0PSIrMDY6MDAiPjxhIGhyZWY9IiMiPkFzaWEvS2FzaGdhciAoR01UKzA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9LYXRobWFuZHUiIGRhdGEtb2Zmc2V0PSIrMDU6NDUiPjxhIGhyZWY9IiMiPkFzaWEvS2F0aG1hbmR1IChHTVQrMDU6NDUpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0thdG1hbmR1IiBkYXRhLW9mZnNldD0iKzA1OjQ1Ij48YSBocmVmPSIjIj5Bc2lhL0thdG1hbmR1IChHTVQrMDU6NDUpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0toYW5keWdhIiBkYXRhLW9mZnNldD0iKzA5OjAwIj48YSBocmVmPSIjIj5Bc2lhL0toYW5keWdhIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0tvbGthdGEiIGRhdGEtb2Zmc2V0PSIrMDU6MzAiPjxhIGhyZWY9IiMiPkFzaWEvS29sa2F0YSAoR01UKzA1OjMwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9LcmFzbm95YXJzayIgZGF0YS1vZmZzZXQ9IiswNzowMCI+PGEgaHJlZj0iIyI+QXNpYS9LcmFzbm95YXJzayAoR01UKzA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9LdWFsYV9MdW1wdXIiIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPkFzaWEvS3VhbGFfTHVtcHVyIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL0t1Y2hpbmciIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPkFzaWEvS3VjaGluZyAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9LdXdhaXQiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvS3V3YWl0IChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL01hY2FvIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Bc2lhL01hY2FvIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL01hY2F1IiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Bc2lhL01hY2F1IChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL01hZ2FkYW4iIGRhdGEtb2Zmc2V0PSIrMTA6MDAiPjxhIGhyZWY9IiMiPkFzaWEvTWFnYWRhbiAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9NYWthc3NhciIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9NYWthc3NhciAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9NYW5pbGEiIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPkFzaWEvTWFuaWxhIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL011c2NhdCIgZGF0YS1vZmZzZXQ9IiswNDowMCI+PGEgaHJlZj0iIyI+QXNpYS9NdXNjYXQgKEdNVCswNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvTmljb3NpYSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QXNpYS9OaWNvc2lhIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL05vdm9rdXpuZXRzayIgZGF0YS1vZmZzZXQ9IiswNzowMCI+PGEgaHJlZj0iIyI+QXNpYS9Ob3Zva3V6bmV0c2sgKEdNVCswNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvTm92b3NpYmlyc2siIGRhdGEtb2Zmc2V0PSIrMDY6MDAiPjxhIGhyZWY9IiMiPkFzaWEvTm92b3NpYmlyc2sgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvT21zayIgZGF0YS1vZmZzZXQ9IiswNjowMCI+PGEgaHJlZj0iIyI+QXNpYS9PbXNrIChHTVQrMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL09yYWwiIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkFzaWEvT3JhbCAoR01UKzA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9QaG5vbV9QZW5oIiBkYXRhLW9mZnNldD0iKzA3OjAwIj48YSBocmVmPSIjIj5Bc2lhL1Bobm9tX1BlbmggKEdNVCswNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvUG9udGlhbmFrIiBkYXRhLW9mZnNldD0iKzA3OjAwIj48YSBocmVmPSIjIj5Bc2lhL1BvbnRpYW5hayAoR01UKzA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9QeW9uZ3lhbmciIGRhdGEtb2Zmc2V0PSIrMDk6MDAiPjxhIGhyZWY9IiMiPkFzaWEvUHlvbmd5YW5nIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1FhdGFyIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5Bc2lhL1FhdGFyIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1F5enlsb3JkYSIgZGF0YS1vZmZzZXQ9IiswNjowMCI+PGEgaHJlZj0iIyI+QXNpYS9ReXp5bG9yZGEgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvUmFuZ29vbiIgZGF0YS1vZmZzZXQ9IiswNjozMCI+PGEgaHJlZj0iIyI+QXNpYS9SYW5nb29uIChHTVQrMDY6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1JpeWFkaCIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+QXNpYS9SaXlhZGggKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvU2FpZ29uIiBkYXRhLW9mZnNldD0iKzA3OjAwIj48YSBocmVmPSIjIj5Bc2lhL1NhaWdvbiAoR01UKzA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9TYWtoYWxpbiIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+QXNpYS9TYWtoYWxpbiAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9TYW1hcmthbmQiIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkFzaWEvU2FtYXJrYW5kIChHTVQrMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1Nlb3VsIiBkYXRhLW9mZnNldD0iKzA5OjAwIj48YSBocmVmPSIjIj5Bc2lhL1Nlb3VsIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1NoYW5naGFpIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Bc2lhL1NoYW5naGFpIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1NpbmdhcG9yZSIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9TaW5nYXBvcmUgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvU3JlZG5la29seW1zayIgZGF0YS1vZmZzZXQ9IisxMTowMCI+PGEgaHJlZj0iIyI+QXNpYS9TcmVkbmVrb2x5bXNrIChHTVQrMTE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1RhaXBlaSIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9UYWlwZWkgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVGFzaGtlbnQiIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkFzaWEvVGFzaGtlbnQgKEdNVCswNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVGJpbGlzaSIgZGF0YS1vZmZzZXQ9IiswNDowMCI+PGEgaHJlZj0iIyI+QXNpYS9UYmlsaXNpIChHTVQrMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1RlaHJhbiIgZGF0YS1vZmZzZXQ9IiswNDozMCI+PGEgaHJlZj0iIyI+QXNpYS9UZWhyYW4gKEdNVCswNDozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVGVsX0F2aXYiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkFzaWEvVGVsX0F2aXYgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVGhpbWJ1IiBkYXRhLW9mZnNldD0iKzA2OjAwIj48YSBocmVmPSIjIj5Bc2lhL1RoaW1idSAoR01UKzA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9UaGltcGh1IiBkYXRhLW9mZnNldD0iKzA2OjAwIj48YSBocmVmPSIjIj5Bc2lhL1RoaW1waHUgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVG9reW8iIGRhdGEtb2Zmc2V0PSIrMDk6MDAiPjxhIGhyZWY9IiMiPkFzaWEvVG9reW8gKEdNVCswOTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVWp1bmdfUGFuZGFuZyIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXNpYS9VanVuZ19QYW5kYW5nIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1VsYWFuYmFhdGFyIiBkYXRhLW9mZnNldD0iKzA5OjAwIj48YSBocmVmPSIjIj5Bc2lhL1VsYWFuYmFhdGFyIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1VsYW5fQmF0b3IiIGRhdGEtb2Zmc2V0PSIrMDk6MDAiPjxhIGhyZWY9IiMiPkFzaWEvVWxhbl9CYXRvciAoR01UKzA5OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9VcnVtcWkiIGRhdGEtb2Zmc2V0PSIrMDY6MDAiPjxhIGhyZWY9IiMiPkFzaWEvVXJ1bXFpIChHTVQrMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1VzdC1OZXJhIiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5Bc2lhL1VzdC1OZXJhIChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1ZpZW50aWFuZSIgZGF0YS1vZmZzZXQ9IiswNzowMCI+PGEgaHJlZj0iIyI+QXNpYS9WaWVudGlhbmUgKEdNVCswNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvVmxhZGl2b3N0b2siIGRhdGEtb2Zmc2V0PSIrMTA6MDAiPjxhIGhyZWY9IiMiPkFzaWEvVmxhZGl2b3N0b2sgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkFzaWEvWWFrdXRzayIgZGF0YS1vZmZzZXQ9IiswOTowMCI+PGEgaHJlZj0iIyI+QXNpYS9ZYWt1dHNrIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBc2lhL1lla2F0ZXJpbmJ1cmciIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkFzaWEvWWVrYXRlcmluYnVyZyAoR01UKzA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXNpYS9ZZXJldmFuIiBkYXRhLW9mZnNldD0iKzA0OjAwIj48YSBocmVmPSIjIj5Bc2lhL1llcmV2YW4gKEdNVCswNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF0bGFudGljL0F6b3JlcyIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QXRsYW50aWMvQXpvcmVzIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdGxhbnRpYy9CZXJtdWRhIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5BdGxhbnRpYy9CZXJtdWRhIChHTVQtMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdGxhbnRpYy9DYW5hcnkiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkF0bGFudGljL0NhbmFyeSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXRsYW50aWMvQ2FwZV9WZXJkZSIgZGF0YS1vZmZzZXQ9Ii0wMTowMCI+PGEgaHJlZj0iIyI+QXRsYW50aWMvQ2FwZV9WZXJkZSAoR01ULTAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXRsYW50aWMvRmFlcm9lIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BdGxhbnRpYy9GYWVyb2UgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF0bGFudGljL0Zhcm9lIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5BdGxhbnRpYy9GYXJvZSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXRsYW50aWMvSmFuX01heWVuIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5BdGxhbnRpYy9KYW5fTWF5ZW4gKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF0bGFudGljL01hZGVpcmEiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkF0bGFudGljL01hZGVpcmEgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF0bGFudGljL1JleWtqYXZpayIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+QXRsYW50aWMvUmV5a2phdmlrIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdGxhbnRpYy9Tb3V0aF9HZW9yZ2lhIiBkYXRhLW9mZnNldD0iLTAyOjAwIj48YSBocmVmPSIjIj5BdGxhbnRpYy9Tb3V0aF9HZW9yZ2lhIChHTVQtMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdGxhbnRpYy9TdF9IZWxlbmEiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkF0bGFudGljL1N0X0hlbGVuYSAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXRsYW50aWMvU3RhbmxleSIgZGF0YS1vZmZzZXQ9Ii0wMzowMCI+PGEgaHJlZj0iIyI+QXRsYW50aWMvU3RhbmxleSAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL0FDVCIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL0FDVCAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL0FkZWxhaWRlIiBkYXRhLW9mZnNldD0iKzA5OjMwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvQWRlbGFpZGUgKEdNVCswOTozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9CcmlzYmFuZSIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL0JyaXNiYW5lIChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvQnJva2VuX0hpbGwiIGRhdGEtb2Zmc2V0PSIrMDk6MzAiPjxhIGhyZWY9IiMiPkF1c3RyYWxpYS9Ccm9rZW5fSGlsbCAoR01UKzA5OjMwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL0NhbmJlcnJhIiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvQ2FuYmVycmEgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9DdXJyaWUiIGRhdGEtb2Zmc2V0PSIrMTA6MDAiPjxhIGhyZWY9IiMiPkF1c3RyYWxpYS9DdXJyaWUgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9EYXJ3aW4iIGRhdGEtb2Zmc2V0PSIrMDk6MzAiPjxhIGhyZWY9IiMiPkF1c3RyYWxpYS9EYXJ3aW4gKEdNVCswOTozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9FdWNsYSIgZGF0YS1vZmZzZXQ9IiswODo0NSI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL0V1Y2xhIChHTVQrMDg6NDUpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvSG9iYXJ0IiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvSG9iYXJ0IChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvTEhJIiBkYXRhLW9mZnNldD0iKzEwOjMwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvTEhJIChHTVQrMTA6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvTGluZGVtYW4iIGRhdGEtb2Zmc2V0PSIrMTA6MDAiPjxhIGhyZWY9IiMiPkF1c3RyYWxpYS9MaW5kZW1hbiAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL0xvcmRfSG93ZSIgZGF0YS1vZmZzZXQ9IisxMDozMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL0xvcmRfSG93ZSAoR01UKzEwOjMwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL01lbGJvdXJuZSIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL01lbGJvdXJuZSAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL05TVyIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL05TVyAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL05vcnRoIiBkYXRhLW9mZnNldD0iKzA5OjMwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvTm9ydGggKEdNVCswOTozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9QZXJ0aCIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL1BlcnRoIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvUXVlZW5zbGFuZCIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL1F1ZWVuc2xhbmQgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9Tb3V0aCIgZGF0YS1vZmZzZXQ9IiswOTozMCI+PGEgaHJlZj0iIyI+QXVzdHJhbGlhL1NvdXRoIChHTVQrMDk6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvU3lkbmV5IiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvU3lkbmV5IChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJBdXN0cmFsaWEvVGFzbWFuaWEiIGRhdGEtb2Zmc2V0PSIrMTA6MDAiPjxhIGhyZWY9IiMiPkF1c3RyYWxpYS9UYXNtYW5pYSAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL1ZpY3RvcmlhIiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvVmljdG9yaWEgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkF1c3RyYWxpYS9XZXN0IiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5BdXN0cmFsaWEvV2VzdCAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQXVzdHJhbGlhL1lhbmNvd2lubmEiIGRhdGEtb2Zmc2V0PSIrMDk6MzAiPjxhIGhyZWY9IiMiPkF1c3RyYWxpYS9ZYW5jb3dpbm5hIChHTVQrMDk6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJCcmF6aWwvQWNyZSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+QnJhemlsL0FjcmUgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkJyYXppbC9EZU5vcm9uaGEiIGRhdGEtb2Zmc2V0PSItMDI6MDAiPjxhIGhyZWY9IiMiPkJyYXppbC9EZU5vcm9uaGEgKEdNVC0wMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkJyYXppbC9FYXN0IiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5CcmF6aWwvRWFzdCAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQnJhemlsL1dlc3QiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkJyYXppbC9XZXN0IChHTVQtMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJDRVQiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkNFVCAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ1NUNkNEVCIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+Q1NUNkNEVCAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ2FuYWRhL0F0bGFudGljIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5DYW5hZGEvQXRsYW50aWMgKEdNVC0wMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkNhbmFkYS9DZW50cmFsIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5DYW5hZGEvQ2VudHJhbCAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ2FuYWRhL0Vhc3QtU2Fza2F0Y2hld2FuIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5DYW5hZGEvRWFzdC1TYXNrYXRjaGV3YW4gKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkNhbmFkYS9FYXN0ZXJuIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5DYW5hZGEvRWFzdGVybiAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ2FuYWRhL01vdW50YWluIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5DYW5hZGEvTW91bnRhaW4gKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkNhbmFkYS9OZXdmb3VuZGxhbmQiIGRhdGEtb2Zmc2V0PSItMDI6MzAiPjxhIGhyZWY9IiMiPkNhbmFkYS9OZXdmb3VuZGxhbmQgKEdNVC0wMjozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkNhbmFkYS9QYWNpZmljIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5DYW5hZGEvUGFjaWZpYyAoR01ULTA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ2FuYWRhL1Nhc2thdGNoZXdhbiIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+Q2FuYWRhL1Nhc2thdGNoZXdhbiAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ2FuYWRhL1l1a29uIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5DYW5hZGEvWXVrb24gKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkNoaWxlL0NvbnRpbmVudGFsIiBkYXRhLW9mZnNldD0iLTAzOjAwIj48YSBocmVmPSIjIj5DaGlsZS9Db250aW5lbnRhbCAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iQ2hpbGUvRWFzdGVySXNsYW5kIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5DaGlsZS9FYXN0ZXJJc2xhbmQgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkN1YmEiIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPkN1YmEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkVFVCIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RUVUIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFU1QiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPkVTVCAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRVNUNUVEVCIgZGF0YS1vZmZzZXQ9Ii0wNDowMCI+PGEgaHJlZj0iIyI+RVNUNUVEVCAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRWd5cHQiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkVneXB0IChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFaXJlIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5FaXJlIChHTVQrMDE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01UIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5FdGMvR01UIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01UKzAiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrMCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVCsxIiBkYXRhLW9mZnNldD0iLTAxOjAwIj48YSBocmVmPSIjIj5FdGMvR01UKzEgKEdNVC0wMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQrMTAiIGRhdGEtb2Zmc2V0PSItMTA6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrMTAgKEdNVC0xMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQrMTEiIGRhdGEtb2Zmc2V0PSItMTE6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrMTEgKEdNVC0xMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQrMTIiIGRhdGEtb2Zmc2V0PSItMTI6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrMTIgKEdNVC0xMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQrMiIgZGF0YS1vZmZzZXQ9Ii0wMjowMCI+PGEgaHJlZj0iIyI+RXRjL0dNVCsyIChHTVQtMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01UKzMiIGRhdGEtb2Zmc2V0PSItMDM6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrMyAoR01ULTAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVCs0IiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5FdGMvR01UKzQgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQrNSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+RXRjL0dNVCs1IChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01UKzYiIGRhdGEtb2Zmc2V0PSItMDY6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrNiAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVCs3IiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5FdGMvR01UKzcgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQrOCIgZGF0YS1vZmZzZXQ9Ii0wODowMCI+PGEgaHJlZj0iIyI+RXRjL0dNVCs4IChHTVQtMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01UKzkiIGRhdGEtb2Zmc2V0PSItMDk6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQrOSAoR01ULTA5OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVC0wIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTAgKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQtMSIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+RXRjL0dNVC0xIChHTVQrMDE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTEwIiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTEwIChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTExIiBkYXRhLW9mZnNldD0iKzExOjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTExIChHTVQrMTE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTEyIiBkYXRhLW9mZnNldD0iKzEyOjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTEyIChHTVQrMTI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTEzIiBkYXRhLW9mZnNldD0iKzEzOjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTEzIChHTVQrMTM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTE0IiBkYXRhLW9mZnNldD0iKzE0OjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTE0IChHTVQrMTQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTIiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQtMiAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVC0zIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTMgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQtNCIgZGF0YS1vZmZzZXQ9IiswNDowMCI+PGEgaHJlZj0iIyI+RXRjL0dNVC00IChHTVQrMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTUiIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQtNSAoR01UKzA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVC02IiBkYXRhLW9mZnNldD0iKzA2OjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTYgKEdNVCswNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQtNyIgZGF0YS1vZmZzZXQ9IiswNzowMCI+PGEgaHJlZj0iIyI+RXRjL0dNVC03IChHTVQrMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdGMvR01ULTgiIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPkV0Yy9HTVQtOCAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dNVC05IiBkYXRhLW9mZnNldD0iKzA5OjAwIj48YSBocmVmPSIjIj5FdGMvR01ULTkgKEdNVCswOTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV0Yy9HTVQwIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5FdGMvR01UMCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL0dyZWVud2ljaCIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+RXRjL0dyZWVud2ljaCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL1VDVCIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+RXRjL1VDVCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL1VUQyIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+RXRjL1VUQyAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL1VuaXZlcnNhbCIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+RXRjL1VuaXZlcnNhbCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXRjL1p1bHUiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkV0Yy9adWx1IChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvQW1zdGVyZGFtIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQW1zdGVyZGFtIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvQW5kb3JyYSIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0FuZG9ycmEgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9BdGhlbnMiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9BdGhlbnMgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9CZWxmYXN0IiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQmVsZmFzdCAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0JlbGdyYWRlIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQmVsZ3JhZGUgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9CZXJsaW4iIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9CZXJsaW4gKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9CcmF0aXNsYXZhIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQnJhdGlzbGF2YSAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0JydXNzZWxzIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQnJ1c3NlbHMgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9CdWNoYXJlc3QiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9CdWNoYXJlc3QgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9CdWRhcGVzdCIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0J1ZGFwZXN0IChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvQnVzaW5nZW4iIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9CdXNpbmdlbiAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0NoaXNpbmF1IiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQ2hpc2luYXUgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9Db3BlbmhhZ2VuIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvQ29wZW5oYWdlbiAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0R1YmxpbiIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0R1YmxpbiAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0dpYnJhbHRhciIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0dpYnJhbHRhciAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0d1ZXJuc2V5IiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvR3Vlcm5zZXkgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9IZWxzaW5raSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0hlbHNpbmtpIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvSXNsZV9vZl9NYW4iIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9Jc2xlX29mX01hbiAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL0lzdGFuYnVsIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvSXN0YW5idWwgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9KZXJzZXkiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9KZXJzZXkgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9LYWxpbmluZ3JhZCIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0thbGluaW5ncmFkIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvS2lldiIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL0tpZXYgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9MaXNib24iIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9MaXNib24gKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9ManVibGphbmEiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9ManVibGphbmEgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9Mb25kb24iIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9Mb25kb24gKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9MdXhlbWJvdXJnIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvTHV4ZW1ib3VyZyAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL01hZHJpZCIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL01hZHJpZCAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL01hbHRhIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvTWFsdGEgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9NYXJpZWhhbW4iIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9NYXJpZWhhbW4gKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9NaW5zayIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL01pbnNrIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvTW9uYWNvIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvTW9uYWNvIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvTW9zY293IiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvTW9zY293IChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvTmljb3NpYSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL05pY29zaWEgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9Pc2xvIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvT3NsbyAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL1BhcmlzIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvUGFyaXMgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9Qb2Rnb3JpY2EiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9Qb2Rnb3JpY2EgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9QcmFndWUiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9QcmFndWUgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9SaWdhIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvUmlnYSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL1JvbWUiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9Sb21lIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvU2FtYXJhIiBkYXRhLW9mZnNldD0iKzA0OjAwIj48YSBocmVmPSIjIj5FdXJvcGUvU2FtYXJhIChHTVQrMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvU2FuX01hcmlubyIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1Nhbl9NYXJpbm8gKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9TYXJhamV2byIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1NhcmFqZXZvIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvU2ltZmVyb3BvbCIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1NpbWZlcm9wb2wgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9Ta29wamUiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9Ta29wamUgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9Tb2ZpYSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1NvZmlhIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvU3RvY2tob2xtIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvU3RvY2tob2xtIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvVGFsbGlubiIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1RhbGxpbm4gKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9UaXJhbmUiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9UaXJhbmUgKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9UaXJhc3BvbCIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1RpcmFzcG9sIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvVXpoZ29yb2QiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9Vemhnb3JvZCAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL1ZhZHV6IiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvVmFkdXogKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9WYXRpY2FuIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvVmF0aWNhbiAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL1ZpZW5uYSIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1ZpZW5uYSAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iRXVyb3BlL1ZpbG5pdXMiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9WaWxuaXVzIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvVm9sZ29ncmFkIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvVm9sZ29ncmFkIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvV2Fyc2F3IiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvV2Fyc2F3IChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvWmFncmViIiBkYXRhLW9mZnNldD0iKzAyOjAwIj48YSBocmVmPSIjIj5FdXJvcGUvWmFncmViIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJFdXJvcGUvWmFwb3Jvemh5ZSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+RXVyb3BlL1phcG9yb3poeWUgKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkV1cm9wZS9adXJpY2giIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkV1cm9wZS9adXJpY2ggKEdNVCswMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkdCIiBkYXRhLW9mZnNldD0iKzAxOjAwIj48YSBocmVmPSIjIj5HQiAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iR0ItRWlyZSIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+R0ItRWlyZSAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iR01UIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5HTVQgKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkdNVCswIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5HTVQrMCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iR01ULTAiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkdNVC0wIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJHTVQwIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5HTVQwIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJHcmVlbndpY2giIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPkdyZWVud2ljaCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSFNUIiBkYXRhLW9mZnNldD0iLTEwOjAwIj48YSBocmVmPSIjIj5IU1QgKEdNVC0xMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9Ikhvbmdrb25nIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5Ib25na29uZyAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSWNlbGFuZCIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+SWNlbGFuZCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSW5kaWFuL0FudGFuYW5hcml2byIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+SW5kaWFuL0FudGFuYW5hcml2byAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSW5kaWFuL0NoYWdvcyIgZGF0YS1vZmZzZXQ9IiswNjowMCI+PGEgaHJlZj0iIyI+SW5kaWFuL0NoYWdvcyAoR01UKzA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSW5kaWFuL0NocmlzdG1hcyIgZGF0YS1vZmZzZXQ9IiswNzowMCI+PGEgaHJlZj0iIyI+SW5kaWFuL0NocmlzdG1hcyAoR01UKzA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSW5kaWFuL0NvY29zIiBkYXRhLW9mZnNldD0iKzA2OjMwIj48YSBocmVmPSIjIj5JbmRpYW4vQ29jb3MgKEdNVCswNjozMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkluZGlhbi9Db21vcm8iIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPkluZGlhbi9Db21vcm8gKEdNVCswMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkluZGlhbi9LZXJndWVsZW4iIGRhdGEtb2Zmc2V0PSIrMDU6MDAiPjxhIGhyZWY9IiMiPkluZGlhbi9LZXJndWVsZW4gKEdNVCswNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkluZGlhbi9NYWhlIiBkYXRhLW9mZnNldD0iKzA0OjAwIj48YSBocmVmPSIjIj5JbmRpYW4vTWFoZSAoR01UKzA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSW5kaWFuL01hbGRpdmVzIiBkYXRhLW9mZnNldD0iKzA1OjAwIj48YSBocmVmPSIjIj5JbmRpYW4vTWFsZGl2ZXMgKEdNVCswNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkluZGlhbi9NYXVyaXRpdXMiIGRhdGEtb2Zmc2V0PSIrMDQ6MDAiPjxhIGhyZWY9IiMiPkluZGlhbi9NYXVyaXRpdXMgKEdNVCswNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IkluZGlhbi9NYXlvdHRlIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5JbmRpYW4vTWF5b3R0ZSAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSW5kaWFuL1JldW5pb24iIGRhdGEtb2Zmc2V0PSIrMDQ6MDAiPjxhIGhyZWY9IiMiPkluZGlhbi9SZXVuaW9uIChHTVQrMDQ6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJJcmFuIiBkYXRhLW9mZnNldD0iKzA0OjMwIj48YSBocmVmPSIjIj5JcmFuIChHTVQrMDQ6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJJc3JhZWwiIGRhdGEtb2Zmc2V0PSIrMDM6MDAiPjxhIGhyZWY9IiMiPklzcmFlbCAoR01UKzAzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSmFtYWljYSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+SmFtYWljYSAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iSmFwYW4iIGRhdGEtb2Zmc2V0PSIrMDk6MDAiPjxhIGhyZWY9IiMiPkphcGFuIChHTVQrMDk6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJLd2FqYWxlaW4iIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPkt3YWphbGVpbiAoR01UKzEyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iTGlieWEiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPkxpYnlhIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJNRVQiIGRhdGEtb2Zmc2V0PSIrMDI6MDAiPjxhIGhyZWY9IiMiPk1FVCAoR01UKzAyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iTVNUIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5NU1QgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9Ik1TVDdNRFQiIGRhdGEtb2Zmc2V0PSItMDY6MDAiPjxhIGhyZWY9IiMiPk1TVDdNRFQgKEdNVC0wNjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9Ik1leGljby9CYWphTm9ydGUiIGRhdGEtb2Zmc2V0PSItMDc6MDAiPjxhIGhyZWY9IiMiPk1leGljby9CYWphTm9ydGUgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9Ik1leGljby9CYWphU3VyIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5NZXhpY28vQmFqYVN1ciAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iTWV4aWNvL0dlbmVyYWwiIGRhdGEtb2Zmc2V0PSItMDU6MDAiPjxhIGhyZWY9IiMiPk1leGljby9HZW5lcmFsIChHTVQtMDU6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJOWiIgZGF0YS1vZmZzZXQ9IisxMjowMCI+PGEgaHJlZj0iIyI+TlogKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9Ik5aLUNIQVQiIGRhdGEtb2Zmc2V0PSIrMTI6NDUiPjxhIGhyZWY9IiMiPk5aLUNIQVQgKEdNVCsxMjo0NSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9Ik5hdmFqbyIgZGF0YS1vZmZzZXQ9Ii0wNjowMCI+PGEgaHJlZj0iIyI+TmF2YWpvIChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQUkMiIGRhdGEtb2Zmc2V0PSIrMDg6MDAiPjxhIGhyZWY9IiMiPlBSQyAoR01UKzA4OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUFNUOFBEVCIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+UFNUOFBEVCAoR01ULTA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9BcGlhIiBkYXRhLW9mZnNldD0iKzEzOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0FwaWEgKEdNVCsxMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvQXVja2xhbmQiIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvQXVja2xhbmQgKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvQm91Z2FpbnZpbGxlIiBkYXRhLW9mZnNldD0iKzExOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0JvdWdhaW52aWxsZSAoR01UKzExOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9DaGF0aGFtIiBkYXRhLW9mZnNldD0iKzEyOjQ1Ij48YSBocmVmPSIjIj5QYWNpZmljL0NoYXRoYW0gKEdNVCsxMjo0NSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvQ2h1dWsiIGRhdGEtb2Zmc2V0PSIrMTA6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvQ2h1dWsgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvRWFzdGVyIiBkYXRhLW9mZnNldD0iLTA1OjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0Vhc3RlciAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9FZmF0ZSIgZGF0YS1vZmZzZXQ9IisxMTowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9FZmF0ZSAoR01UKzExOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9FbmRlcmJ1cnkiIGRhdGEtb2Zmc2V0PSIrMTM6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvRW5kZXJidXJ5IChHTVQrMTM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL0Zha2FvZm8iIGRhdGEtb2Zmc2V0PSIrMTM6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvRmFrYW9mbyAoR01UKzEzOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9GaWppIiBkYXRhLW9mZnNldD0iKzEyOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0ZpamkgKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvRnVuYWZ1dGkiIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvRnVuYWZ1dGkgKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvR2FsYXBhZ29zIiBkYXRhLW9mZnNldD0iLTA2OjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0dhbGFwYWdvcyAoR01ULTA2OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9HYW1iaWVyIiBkYXRhLW9mZnNldD0iLTA5OjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0dhbWJpZXIgKEdNVC0wOTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvR3VhZGFsY2FuYWwiIGRhdGEtb2Zmc2V0PSIrMTE6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvR3VhZGFsY2FuYWwgKEdNVCsxMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvR3VhbSIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9HdWFtIChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL0hvbm9sdWx1IiBkYXRhLW9mZnNldD0iLTEwOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0hvbm9sdWx1IChHTVQtMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL0pvaG5zdG9uIiBkYXRhLW9mZnNldD0iLTEwOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL0pvaG5zdG9uIChHTVQtMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL0tpcml0aW1hdGkiIGRhdGEtb2Zmc2V0PSIrMTQ6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvS2lyaXRpbWF0aSAoR01UKzE0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9Lb3NyYWUiIGRhdGEtb2Zmc2V0PSIrMTE6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvS29zcmFlIChHTVQrMTE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL0t3YWphbGVpbiIgZGF0YS1vZmZzZXQ9IisxMjowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9Ld2FqYWxlaW4gKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvTWFqdXJvIiBkYXRhLW9mZnNldD0iKzEyOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL01hanVybyAoR01UKzEyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9NYXJxdWVzYXMiIGRhdGEtb2Zmc2V0PSItMDk6MzAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvTWFycXVlc2FzIChHTVQtMDk6MzApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL01pZHdheSIgZGF0YS1vZmZzZXQ9Ii0xMTowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9NaWR3YXkgKEdNVC0xMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvTmF1cnUiIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvTmF1cnUgKEdNVCsxMjowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvTml1ZSIgZGF0YS1vZmZzZXQ9Ii0xMTowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9OaXVlIChHTVQtMTE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL05vcmZvbGsiIGRhdGEtb2Zmc2V0PSIrMTE6MzAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvTm9yZm9sayAoR01UKzExOjMwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9Ob3VtZWEiIGRhdGEtb2Zmc2V0PSIrMTE6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvTm91bWVhIChHTVQrMTE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL1BhZ29fUGFnbyIgZGF0YS1vZmZzZXQ9Ii0xMTowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9QYWdvX1BhZ28gKEdNVC0xMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvUGFsYXUiIGRhdGEtb2Zmc2V0PSIrMDk6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvUGFsYXUgKEdNVCswOTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvUGl0Y2Fpcm4iIGRhdGEtb2Zmc2V0PSItMDg6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvUGl0Y2Fpcm4gKEdNVC0wODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvUG9obnBlaSIgZGF0YS1vZmZzZXQ9IisxMTowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9Qb2hucGVpIChHTVQrMTE6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL1BvbmFwZSIgZGF0YS1vZmZzZXQ9IisxMTowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9Qb25hcGUgKEdNVCsxMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvUG9ydF9Nb3Jlc2J5IiBkYXRhLW9mZnNldD0iKzEwOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL1BvcnRfTW9yZXNieSAoR01UKzEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9SYXJvdG9uZ2EiIGRhdGEtb2Zmc2V0PSItMTA6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvUmFyb3RvbmdhIChHTVQtMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL1NhaXBhbiIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9TYWlwYW4gKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvU2Ftb2EiIGRhdGEtb2Zmc2V0PSItMTE6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvU2Ftb2EgKEdNVC0xMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvVGFoaXRpIiBkYXRhLW9mZnNldD0iLTEwOjAwIj48YSBocmVmPSIjIj5QYWNpZmljL1RhaGl0aSAoR01ULTEwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9UYXJhd2EiIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvVGFyYXdhIChHTVQrMTI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL1RvbmdhdGFwdSIgZGF0YS1vZmZzZXQ9IisxMzowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9Ub25nYXRhcHUgKEdNVCsxMzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBhY2lmaWMvVHJ1ayIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9UcnVrIChHTVQrMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL1dha2UiIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvV2FrZSAoR01UKzEyOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iUGFjaWZpYy9XYWxsaXMiIGRhdGEtb2Zmc2V0PSIrMTI6MDAiPjxhIGhyZWY9IiMiPlBhY2lmaWMvV2FsbGlzIChHTVQrMTI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQYWNpZmljL1lhcCIgZGF0YS1vZmZzZXQ9IisxMDowMCI+PGEgaHJlZj0iIyI+UGFjaWZpYy9ZYXAgKEdNVCsxMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlBvbGFuZCIgZGF0YS1vZmZzZXQ9IiswMjowMCI+PGEgaHJlZj0iIyI+UG9sYW5kIChHTVQrMDI6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJQb3J0dWdhbCIgZGF0YS1vZmZzZXQ9IiswMTowMCI+PGEgaHJlZj0iIyI+UG9ydHVnYWwgKEdNVCswMTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlJPQyIgZGF0YS1vZmZzZXQ9IiswODowMCI+PGEgaHJlZj0iIyI+Uk9DIChHTVQrMDg6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJST0siIGRhdGEtb2Zmc2V0PSIrMDk6MDAiPjxhIGhyZWY9IiMiPlJPSyAoR01UKzA5OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iU2luZ2Fwb3JlIiBkYXRhLW9mZnNldD0iKzA4OjAwIj48YSBocmVmPSIjIj5TaW5nYXBvcmUgKEdNVCswODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlR1cmtleSIgZGF0YS1vZmZzZXQ9IiswMzowMCI+PGEgaHJlZj0iIyI+VHVya2V5IChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJVQ1QiIGRhdGEtb2Zmc2V0PSIrMDA6MDAiPjxhIGhyZWY9IiMiPlVDVCAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iVVMvQWxhc2thIiBkYXRhLW9mZnNldD0iLTA4OjAwIj48YSBocmVmPSIjIj5VUy9BbGFza2EgKEdNVC0wODowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlVTL0FsZXV0aWFuIiBkYXRhLW9mZnNldD0iLTA5OjAwIj48YSBocmVmPSIjIj5VUy9BbGV1dGlhbiAoR01ULTA5OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iVVMvQXJpem9uYSIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+VVMvQXJpem9uYSAoR01ULTA3OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iVVMvQ2VudHJhbCIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+VVMvQ2VudHJhbCAoR01ULTA1OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iVVMvRWFzdC1JbmRpYW5hIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5VUy9FYXN0LUluZGlhbmEgKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlVTL0Vhc3Rlcm4iIGRhdGEtb2Zmc2V0PSItMDQ6MDAiPjxhIGhyZWY9IiMiPlVTL0Vhc3Rlcm4gKEdNVC0wNDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlVTL0hhd2FpaSIgZGF0YS1vZmZzZXQ9Ii0xMDowMCI+PGEgaHJlZj0iIyI+VVMvSGF3YWlpIChHTVQtMTA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJVUy9JbmRpYW5hLVN0YXJrZSIgZGF0YS1vZmZzZXQ9Ii0wNTowMCI+PGEgaHJlZj0iIyI+VVMvSW5kaWFuYS1TdGFya2UgKEdNVC0wNTowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlVTL01pY2hpZ2FuIiBkYXRhLW9mZnNldD0iLTA0OjAwIj48YSBocmVmPSIjIj5VUy9NaWNoaWdhbiAoR01ULTA0OjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iVVMvTW91bnRhaW4iIGRhdGEtb2Zmc2V0PSItMDY6MDAiPjxhIGhyZWY9IiMiPlVTL01vdW50YWluIChHTVQtMDY6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJVUy9QYWNpZmljIiBkYXRhLW9mZnNldD0iLTA3OjAwIj48YSBocmVmPSIjIj5VUy9QYWNpZmljIChHTVQtMDc6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJVUy9QYWNpZmljLU5ldyIgZGF0YS1vZmZzZXQ9Ii0wNzowMCI+PGEgaHJlZj0iIyI+VVMvUGFjaWZpYy1OZXcgKEdNVC0wNzowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlVTL1NhbW9hIiBkYXRhLW9mZnNldD0iLTExOjAwIj48YSBocmVmPSIjIj5VUy9TYW1vYSAoR01ULTExOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iVVRDIiBkYXRhLW9mZnNldD0iKzAwOjAwIj48YSBocmVmPSIjIj5VVEMgKEdNVCswMDowMCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW5hbWU9IlVuaXZlcnNhbCIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+VW5pdmVyc2FsIChHTVQrMDA6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJXLVNVIiBkYXRhLW9mZnNldD0iKzAzOjAwIj48YSBocmVmPSIjIj5XLVNVIChHTVQrMDM6MDApPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1uYW1lPSJXRVQiIGRhdGEtb2Zmc2V0PSIrMDE6MDAiPjxhIGhyZWY9IiMiPldFVCAoR01UKzAxOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbmFtZT0iWnVsdSIgZGF0YS1vZmZzZXQ9IiswMDowMCI+PGEgaHJlZj0iIyI+WnVsdSAoR01UKzAwOjAwKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0idGltZXpvbmVTZWxlY3QiIGFyaWEtaGlkZGVuPSJ0cnVlIiByZWFkb25seT0icmVhZG9ubHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9IlRpbWVab25lU2VsZWN0bGlzdCIgY2xhc3M9ImhpZGRlbiBoaWRkZW4tZmllbGQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByZXBlYXQtY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIHNjaGVkdWxlci1sYWJlbCI+UmVwZWF0PC9sYWJlbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByZXBlYXQtaW50ZXJ2YWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1yZXNpemU9ImF1dG8iIGNsYXNzPSJidG4tZ3JvdXAgc2VsZWN0bGlzdCBwdWxsLWxlZnQgcmVwZWF0LW9wdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB2LWJ0bi1ncmV5IGRyb3Bkb3duLXRvZ2dsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2VsZWN0ZWQtbGFiZWwiPk5vbmUgKHJ1biBvbmNlKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJub25lIj48YSBocmVmPSIjIj5Ob25lIChydW4gb25jZSk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJob3VybHkiIGRhdGEtdGV4dD0iaG91cihzKSI+PGEgaHJlZj0iIyI+SG91cmx5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iZGFpbHkiIGRhdGEtdGV4dD0iZGF5KHMpIj48YSBocmVmPSIjIj5EYWlseTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IndlZWtkYXlzIj48YSBocmVmPSIjIj5XZWVrZGF5czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IndlZWtseSIgZGF0YS10ZXh0PSJ3ZWVrKHMpIj48YSBocmVmPSIjIj5XZWVrbHk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJtb250aGx5IiBkYXRhLXRleHQ9Im1vbnRoKHMpIj48YSBocmVmPSIjIj5Nb250aGx5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0ieWVhcmx5Ij48YSBocmVmPSIjIj5ZZWFybHk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGFyaWEtaGlkZGVuPSJ0cnVlIiByZWFkb25seT0icmVhZG9ubHkiIG5hbWU9ImludGVydmFsU2VsZWN0bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoaWRkZW4gaGlkZGVuLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVwZWF0LXBhbmVsIHJlcGVhdC1ldmVyeS1wYW5lbCByZXBlYXQtaG91cmx5IHJlcGVhdC1kYWlseSByZXBlYXQtd2Vla2x5IHJlcGVhdC1tb250aGx5IGhpZGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBpZD0iTXlTY2hlZHVsZXJFdmVyeUxhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubGluZS1mb3JtLXRleHQgcmVwZWF0LWV2ZXJ5LXByZXRleHQiPmV2ZXJ5PC9sYWJlbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5ib3ggZGlnaXRzLTMgcmVwZWF0LWV2ZXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LW1pbmkgc3BpbmJveC1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9Ik15U2NoZWR1bGVyRXZlcnlMYWJlbCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3BpbmJveC1idXR0b25zIGJ0bi1ncm91cCBidG4tZ3JvdXAtdmVydGljYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB2LWJ0bi1ncmV5IHNwaW5ib3gtdXAgYnRuLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+SW5jcmVhc2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcHYtYnRuLWdyZXkgc3BpbmJveC1kb3duIGJ0bi14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93biI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+RGVjcmVhc2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmxpbmUtZm9ybS10ZXh0IHJlcGVhdC1ldmVyeS10ZXh0Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcmVwZWF0LXBhbmVsIHJlcGVhdC13ZWVrbHkgcmVwZWF0LWRheXMtb2YtdGhlLXdlZWsgaGlkZSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0iYnRuLWdyb3VwICIgZGF0YS10b2dnbGU9ImJ1dHRvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlNVIj5TdW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iTU8iPk1vbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlRVIj5UdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJXRSI+IFdlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlRIIj4gVGh1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iRlIiPiBGcmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJTQSI+IFNhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVwZWF0LXBhbmVsIHJlcGVhdC1tb250aGx5IGhpZGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJlcGVhdC1tb250aGx5LWRhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyYWRpby1jdXN0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0ic3Itb25seSIgdHlwZT0icmFkaW8iIGNoZWNrZWQ9ImNoZWNrZWQiIG5hbWU9InJlcGVhdC1tb250aGx5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iYnltb250aGRheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhZGlvLWxhYmVsIj5vbiBkYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1yZXNpemU9ImF1dG8iIGNsYXNzPSJidG4tZ3JvdXAgc2VsZWN0bGlzdCBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZWxlY3RlZC1sYWJlbCI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51IiBzdHlsZT0iaGVpZ2h0OjIwMHB4OyBvdmVyZmxvdzphdXRvOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEiPjxhIGhyZWY9IiMiPjE8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMiI+PGEgaHJlZj0iIyI+MjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIzIj48YSBocmVmPSIjIj4zPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiPjxhIGhyZWY9IiMiPjQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNSI+PGEgaHJlZj0iIyI+NTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI2Ij48YSBocmVmPSIjIj42PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjciPjxhIGhyZWY9IiMiPjc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iOCI+PGEgaHJlZj0iIyI+ODwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI5Ij48YSBocmVmPSIjIj45PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEwIj48YSBocmVmPSIjIj4xMDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxMSI+PGEgaHJlZj0iIyI+MTE8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTIiPjxhIGhyZWY9IiMiPjEyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEzIj48YSBocmVmPSIjIj4xMzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxNCI+PGEgaHJlZj0iIyI+MTQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTUiPjxhIGhyZWY9IiMiPjE1PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjE2Ij48YSBocmVmPSIjIj4xNjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxNyI+PGEgaHJlZj0iIyI+MTc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTgiPjxhIGhyZWY9IiMiPjE4PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjE5Ij48YSBocmVmPSIjIj4xOTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyMCI+PGEgaHJlZj0iIyI+MjA8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjEiPjxhIGhyZWY9IiMiPjIxPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIyIj48YSBocmVmPSIjIj4yMjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyMyI+PGEgaHJlZj0iIyI+MjM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjQiPjxhIGhyZWY9IiMiPjI0PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjI1Ij48YSBocmVmPSIjIj4yNTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyNiI+PGEgaHJlZj0iIyI+MjY8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjciPjxhIGhyZWY9IiMiPjI3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjI4Ij48YSBocmVmPSIjIj4yODwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyOSI+PGEgaHJlZj0iIyI+Mjk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMzAiPjxhIGhyZWY9IiMiPjMwPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjMxIj48YSBocmVmPSIjIj4zMTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBhcmlhLWhpZGRlbj0idHJ1ZSIgcmVhZG9ubHk9InJlYWRvbmx5IiBuYW1lPSJtb250aGx5U2VsZWN0bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaGlkZGVuIGhpZGRlbi1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXBlYXQtbW9udGhseS1kYXkgZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJhZGlvLWN1c3RvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJzci1vbmx5IiB0eXBlPSJyYWRpbyIgY2hlY2tlZD0iY2hlY2tlZCIgbmFtZT0icmVwZWF0LW1vbnRobHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJieXNldHBvcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhZGlvLWxhYmVsIj5vbiB0aGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1yZXNpemU9ImF1dG8iIGNsYXNzPSJidG4tZ3JvdXAgc2VsZWN0bGlzdCBtb250aC1kYXktcG9zIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNlbGVjdGVkLWxhYmVsIj5GaXJzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMSI+PGEgaHJlZj0iIyI+Rmlyc3Q8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMiI+PGEgaHJlZj0iIyI+U2Vjb25kPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjMiPjxhIGhyZWY9IiMiPlRoaXJkPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiPjxhIGhyZWY9IiMiPkZvdXJ0aDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSItMSI+PGEgaHJlZj0iIyI+TGFzdDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBhcmlhLWhpZGRlbj0idHJ1ZSIgcmVhZG9ubHk9InJlYWRvbmx5IiBuYW1lPSJtb250aGx5U2VsZWN0bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaGlkZGVuIGhpZGRlbi1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXJlc2l6ZT0iYXV0byIgY2xhc3M9ImJ0bi1ncm91cCBzZWxlY3RsaXN0IG1vbnRoLWRheXMgcHVsbC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2VsZWN0ZWQtbGFiZWwiPlN1bmRheTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iU1UiPjxhIGhyZWY9IiMiPlN1bmRheTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJNTyI+PGEgaHJlZj0iIyI+TW9uZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IlRVIj48YSBocmVmPSIjIj5UdWVzZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IldFIj48YSBocmVmPSIjIj5XZWRuZXNkYXk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iVEgiPjxhIGhyZWY9IiMiPlRodXJzZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IkZSIj48YSBocmVmPSIjIj5GcmlkYXk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iU0EiPjxhIGhyZWY9IiMiPlNhdHVyZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IlNVLE1PLFRVLFdFLFRILEZSLFNBIj48YSBocmVmPSIjIj5EYXk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iTU8sVFUsV0UsVEgsRlIiPjxhIGhyZWY9IiMiPldlZWtkYXk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iU1UsU0EiPjxhIGhyZWY9IiMiPldlZWtlbmQgZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGFyaWEtaGlkZGVuPSJ0cnVlIiByZWFkb25seT0icmVhZG9ubHkiIG5hbWU9Im1vbnRobHlTZWxlY3RsaXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoaWRkZW4gaGlkZGVuLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVwZWF0LXBhbmVsIHJlcGVhdC15ZWFybHkgaGlkZSIgYXJpYS1oaWRkZW49InRydWUiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJlcGVhdC15ZWFybHktZGF0ZSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyYWRpby1jdXN0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0ic3Itb25seSIgdHlwZT0icmFkaW8iIGNoZWNrZWQ9ImNoZWNrZWQiIG5hbWU9InJlcGVhdC15ZWFybHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJieW1vbnRoZGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmFkaW8tbGFiZWwiPm9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtcmVzaXplPSJhdXRvIiBjbGFzcz0iYnRuLWdyb3VwIHNlbGVjdGxpc3QgeWVhci1tb250aCBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZWxlY3RlZC1sYWJlbCI+SmFudWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMSI+PGEgaHJlZj0iIyI+SmFudWFyeTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyIj48YSBocmVmPSIjIj5GZWJydWFyeTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIzIj48YSBocmVmPSIjIj5NYXJjaDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI0Ij48YSBocmVmPSIjIj5BcHJpbDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI1Ij48YSBocmVmPSIjIj5NYXk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNiI+PGEgaHJlZj0iIyI+SnVuZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI3Ij48YSBocmVmPSIjIj5KdWx5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjgiPjxhIGhyZWY9IiMiPkF1Z3VzdDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI5Ij48YSBocmVmPSIjIj5TZXB0ZW1iZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTAiPjxhIGhyZWY9IiMiPk9jdG9iZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTEiPjxhIGhyZWY9IiMiPk5vdmVtYmVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEyIj48YSBocmVmPSIjIj5EZWNlbWJlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBhcmlhLWhpZGRlbj0idHJ1ZSIgcmVhZG9ubHk9InJlYWRvbmx5IiBuYW1lPSJtb250aGx5U2VsZWN0bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaGlkZGVuIGhpZGRlbi1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXJlc2l6ZT0iYXV0byIgY2xhc3M9ImJ0bi1ncm91cCBzZWxlY3RsaXN0IHllYXItbW9udGgtZGF5IHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNlbGVjdGVkLWxhYmVsIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiIHJvbGU9Im1lbnUiIHN0eWxlPSJoZWlnaHQ6MjAwcHg7IG92ZXJmbG93OmF1dG87Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMSI+PGEgaHJlZj0iIyI+MTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyIj48YSBocmVmPSIjIj4yPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjMiPjxhIGhyZWY9IiMiPjM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNCI+PGEgaHJlZj0iIyI+NDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI1Ij48YSBocmVmPSIjIj41PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjYiPjxhIGhyZWY9IiMiPjY8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNyI+PGEgaHJlZj0iIyI+NzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI4Ij48YSBocmVmPSIjIj44PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjkiPjxhIGhyZWY9IiMiPjk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTAiPjxhIGhyZWY9IiMiPjEwPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjExIj48YSBocmVmPSIjIj4xMTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxMiI+PGEgaHJlZj0iIyI+MTI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTMiPjxhIGhyZWY9IiMiPjEzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjE0Ij48YSBocmVmPSIjIj4xNDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxNSI+PGEgaHJlZj0iIyI+MTU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTYiPjxhIGhyZWY9IiMiPjE2PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjE3Ij48YSBocmVmPSIjIj4xNzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxOCI+PGEgaHJlZj0iIyI+MTg8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTkiPjxhIGhyZWY9IiMiPjE5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIwIj48YSBocmVmPSIjIj4yMDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyMSI+PGEgaHJlZj0iIyI+MjE8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjIiPjxhIGhyZWY9IiMiPjIyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIzIj48YSBocmVmPSIjIj4yMzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyNCI+PGEgaHJlZj0iIyI+MjQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjUiPjxhIGhyZWY9IiMiPjI1PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjI2Ij48YSBocmVmPSIjIj4yNjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyNyI+PGEgaHJlZj0iIyI+Mjc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjgiPjxhIGhyZWY9IiMiPjI4PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjI5Ij48YSBocmVmPSIjIj4yOTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIzMCI+PGEgaHJlZj0iIyI+MzA8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMzEiPjxhIGhyZWY9IiMiPjMxPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGFyaWEtaGlkZGVuPSJ0cnVlIiByZWFkb25seT0icmVhZG9ubHkiIG5hbWU9Im1vbnRobHlTZWxlY3RsaXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoaWRkZW4gaGlkZGVuLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcmVwZWF0LXllYXJseS1kYXkiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFkaW8gcHVsbC1sZWZ0Ij48bGFiZWwgY2xhc3M9InJhZGlvLWN1c3RvbSI+PGlucHV0IGNsYXNzPSJzci1vbmx5IiB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InJlcGVhdC15ZWFybHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iYnlzZXRwb3MiPiBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1yZXNpemU9ImF1dG8iIGNsYXNzPSJidG4tZ3JvdXAgc2VsZWN0bGlzdCB5ZWFyLW1vbnRoLWRheS1wb3MgcHVsbC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2VsZWN0ZWQtbGFiZWwiPkZpcnN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5GaXJzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMSI+PGEgaHJlZj0iIyI+Rmlyc3Q8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMiI+PGEgaHJlZj0iIyI+U2Vjb25kPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjMiPjxhIGhyZWY9IiMiPlRoaXJkPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiPjxhIGhyZWY9IiMiPkZvdXJ0aDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI1Ij48YSBocmVmPSIjIj5MYXN0PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGFyaWEtaGlkZGVuPSJ0cnVlIiByZWFkb25seT0icmVhZG9ubHkiIG5hbWU9InllYXJseURhdGVTZWxlY3RsaXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoaWRkZW4gaGlkZGVuLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtcmVzaXplPSJhdXRvIiBjbGFzcz0iYnRuLWdyb3VwIHNlbGVjdGxpc3QgeWVhci1tb250aC1kYXlzIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNlbGVjdGVkLWxhYmVsIj5TdW5kYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlN1bmRheTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51IiBzdHlsZT0iaGVpZ2h0OjIwMHB4OyBvdmVyZmxvdzphdXRvOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IlNVIj48YSBocmVmPSIjIj5TdW5kYXk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iTU8iPjxhIGhyZWY9IiMiPk1vbmRheTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJUVSI+PGEgaHJlZj0iIyI+VHVlc2RheTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJXRSI+PGEgaHJlZj0iIyI+V2VkbmVzZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IlRIIj48YSBocmVmPSIjIj5UaHVyc2RheTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJGUiI+PGEgaHJlZj0iIyI+RnJpZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IlNBIj48YSBocmVmPSIjIj5TYXR1cmRheTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJTVSxNTyxUVSxXRSxUSCxGUixTQSI+PGEgaHJlZj0iIyI+RGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Ik1PLFRVLFdFLFRILEZSIj48YSBocmVmPSIjIj5XZWVrZGF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IlNVLFNBIj48YSBocmVmPSIjIj5XZWVrZW5kIGRheTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBhcmlhLWhpZGRlbj0idHJ1ZSIgcmVhZG9ubHk9InJlYWRvbmx5IiBuYW1lPSJ5ZWFybHlEYXlTZWxlY3RsaXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoaWRkZW4gaGlkZGVuLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmxpbmUtZm9ybS10ZXh0IHJlcGVhdC15ZWFybHktZGF5LXRleHQiPm9mPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtcmVzaXplPSJhdXRvIiBjbGFzcz0iYnRuLWdyb3VwIHNlbGVjdGxpc3QgeWVhci1tb250aCBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZWxlY3RlZC1sYWJlbCI+SmFudWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+SmFudWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IiByb2xlPSJtZW51IiBzdHlsZT0iaGVpZ2h0OjIwMHB4OyBvdmVyZmxvdzphdXRvOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEiPjxhIGhyZWY9IiMiPkphbnVhcnk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMiI+PGEgaHJlZj0iIyI+RmVicnVhcnk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMyI+PGEgaHJlZj0iIyI+TWFyY2g8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNCI+PGEgaHJlZj0iIyI+QXByaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNSI+PGEgaHJlZj0iIyI+TWF5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjYiPjxhIGhyZWY9IiMiPkp1bmU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNyI+PGEgaHJlZj0iIyI+SnVseTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI4Ij48YSBocmVmPSIjIj5BdWd1c3Q8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iOSI+PGEgaHJlZj0iIyI+U2VwdGVtYmVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEwIj48YSBocmVmPSIjIj5PY3RvYmVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjExIj48YSBocmVmPSIjIj5Ob3ZlbWJlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxMiI+PGEgaHJlZj0iIyI+RGVjZW1iZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgYXJpYS1oaWRkZW49InRydWUiIHJlYWRvbmx5PSJyZWFkb25seSIgbmFtZT0ieWVhcmx5RGF5U2VsZWN0bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaGlkZGVuIGhpZGRlbi1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByZXBlYXQtZW5kIGhpZGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIHNjaGVkdWxlci1sYWJlbCI+RW5kPC9sYWJlbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCByb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXJlc2l6ZT0iYXV0byIgY2xhc3M9ImJ0bi1ncm91cCBzZWxlY3RsaXN0IGVuZC1vcHRpb25zIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZWxlY3RlZC1sYWJlbCI+TmV2ZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5OZXZlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSIgcm9sZT0ibWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0ibmV2ZXIiPjxhIGhyZWY9IiMiPk5ldmVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iYWZ0ZXIiPjxhIGhyZWY9IiMiPkFmdGVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iZGF0ZSI+PGEgaHJlZj0iIyI+T24gZGF0ZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgYXJpYS1oaWRkZW49InRydWUiIHJlYWRvbmx5PSJyZWFkb25seSIgbmFtZT0iRW5kU2VsZWN0bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoaWRkZW4gaGlkZGVuLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02IGZvcm0tZ3JvdXAgZW5kLW9wdGlvbi1wYW5lbCBlbmQtYWZ0ZXItcGFuZWwgcHVsbC1sZWZ0IGhpZGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGluYm94IGRpZ2l0cy0zIGVuZC1hZnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBpZD0iTXlFbmRBZnRlciIgY2xhc3M9InNyLW9ubHkiPkVuZCBBZnRlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LW1pbmkgc3BpbmJveC1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0iTXlFbmRBZnRlciI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGluYm94LWJ1dHRvbnMgYnRuLWdyb3VwIGJ0bi1ncm91cC12ZXJ0aWNhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBzcGluYm94LXVwIGJ0bi14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5JbmNyZWFzZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgc3BpbmJveC1kb3duIGJ0bi14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duIj48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPkRlY3JlYXNlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmxpbmUtZm9ybS10ZXh0IGVuZC1hZnRlci10ZXh0Ij5vY2N1cnJlbmNlKHMpPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCBmb3JtLWdyb3VwIGVuZC1vcHRpb24tcGFuZWwgZW5kLW9uLWRhdGUtcGFuZWwgcHVsbC1sZWZ0IGhpZGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGlucHV0LWdyb3VwIGVuZC1vbi1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiLz4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5OZXh0IE1vbnRoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMCI+SmFudWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIzIj5BcHJpbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI2Ij5KdWx5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOSI+T2N0b2Jlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiA8c3BhbiBjbGFzcz0ieWVhciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZGF5cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN1PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPldlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNhPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PjwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImRhdGVwaWNrZXItdG9kYXkiPlRvZGF5PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjIiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjUiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjgiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5TZXA8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkRlYzwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLXllYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1zZWxlY3QiPlNlbGVjdCA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNjaGVkdWxlclRpbWUiIHZhbHVlPSIyMDIwLTAyLTA3IDE0OjEyOjI0IiBpZD0ic2NoZWR1bGVyVGltZSIgLz4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzY2hlZHVsZURhdGVKU09OIiB2YWx1ZT0iIiBpZD0ic2NoZWR1bGVEYXRlSlNPTiIgLz4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb25maWdTZWxlY3RlZFRpbWVab25lIiBpZD0iY29uZmlnU2VsZWN0ZWRUaW1lWm9uZSIKICAgICAgICAgICAgICAgdmFsdWU9IlVUQyIvPgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJ0aW1lem9uZUZyb21TZXJ2ZXIiIG5hbWU9InRpbWV6b25lIgogICAgICAgICAgICAgICB2YWx1ZT0ibmFtZSA6IFVUQyxvZmZzZXQgOiArMDA6MDAgIi8+CjwvZGl2PgoKPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJjcmVhdGVNZWV0aW5nTW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9InByb2R1Y3REaWN0aW9uYXJ5TGFiZWwiCiAgICAgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9ImNyZWF0ZU1vZGFsTGFiZWwiPkNyZWF0ZSBNZWV0aW5nIE1pbnV0ZXM8L2g0PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibXNnLWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPjwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL3NpZ25hbC9tZWV0aW5nL3NhdmUiIG1ldGhvZD0icG9zdCIgbmFtZT0idGVtcEZvcm0iIGlkPSJ0ZW1wRm9ybSIgPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNyZWF0ZS11cmwiIHZhbHVlPSIvc2lnbmFsL21lZXRpbmcvc2F2ZSIgaWQ9ImNyZWF0ZS11cmwiIC8+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYXBwVHlwZSIgaWQ9ImFwcFR5cGUiIHZhbHVlPSJTaWduYWwgTWFuYWdlbWVudCIgLz4KICAgICAgICAgICAgICAgICAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWQiIHZhbHVlPSJbXSIgaWQ9ImlkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ2ZXJzaW9uIiB2YWx1ZT0iW10iIGlkPSJ2ZXJzaW9uIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhbGVydElkIiB2YWx1ZT0iMTIxOTY1MCIgY2xhc3M9ImFsZXJ0SWQiIGlkPSJhbGVydElkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmaW5kTWVldGluZ1RpbWVzVXJsIiB2YWx1ZT0iL3NpZ25hbC9tZWV0aW5nL2ZpbmRNZWV0aW5nVGltZXMiIGlkPSJmaW5kTWVldGluZ1RpbWVzVXJsIiAvPgo8c3R5bGU+Ci5pbnB1dC1ncm91cC1hZGRvbiB7CiAgICBib3JkZXItcmFkaXVzOiAyNnB4OwogICAgYm9yZGVyOiAxcHggc29saWQgI2VlZWVlZTsKfQoKLnNlbGVjdFRpbWVTbG90IHsKICAgIGZsb2F0OiByaWdodDsKfQoKLm1lZXRpbmctc2xvdC1jb250YWluZXIgewogICAgY29sb3I6ICM4YTZkM2I7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzOwogICAgYm9yZGVyLWNvbG9yOiAjZmFlYmNjOwogICAgYm9yZGVyLXJhZGl1czogNXB4Owp9CgoubW9kYWwtZm9vdGVyIHsKICAgIGJhY2tncm91bmQ6ICNmZmZmZmY7Cn0KPC9zdHlsZT4KPHNjcmlwdD4KCiAgICB0cnkgewogICAgICAgICQoJy50aW1lcGlja2VyMScpLnRpbWVwaWNrZXIoewogICAgICAgICAgICBzaG93TWVyaWRpYW46IGZhbHNlCiAgICAgICAgfSk7CgogICAgICAgICQoIiNkdWUtZGF0ZS1waWNrZXItY3JlYXRlIikuZGF0ZXBpY2tlcignc2V0RGF0ZScsIG5ldyBEYXRlKCkpOwoKICAgICAgICAkKCIjaXNSZWN1cnJpbmdNZWV0aW5nIikub24oImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWVldGluZ0RhdGUgPSAkKCIjbWVldGluZ0RhdGUiKS52YWwoKTsKICAgICAgICAgICAgdmFyIG1lZXRpbmdUaW1lID0gJCgiI21lZXRpbmdUaW1lIikudmFsKCk7CiAgICAgICAgICAgIHZhciBwcmVmVGltZXpvbmUgPSAkKCIjdGltZXpvbmVGcm9tU2VydmVyIikudmFsKCk7CiAgICAgICAgICAgIHZhciBtb21lbnREYXRlOwogICAgICAgICAgICBpZiAobWVldGluZ0RhdGUpIHsKICAgICAgICAgICAgICAgIG1vbWVudERhdGUgPSBtb21lbnQobWVldGluZ0RhdGUgKyAnICcgKyBtZWV0aW5nVGltZSkuZm9ybWF0KCJZWVlZLU1NLUREVEhIOm1tOnNzLnNUWkQiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG1vbWVudERhdGUgPSAobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdGltZVpvbmVEYXRhID0gbnVsbDsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmVmVGltZXpvbmUgIT0gInVuZGVmaW5lZCIgJiYgcHJlZlRpbWV6b25lICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHRpbWVab25lRGF0YSA9IHByZWZUaW1lem9uZS5zcGxpdCgiLCIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGltZVpvbmVEYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRpbWVab25lRGF0YVswXS5zcGxpdCgiOiIpWzFdLnRyaW0oKTsKICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aW1lWm9uZURhdGFbMV0uc3Vic3RyaW5nKDgpLnRyaW0oKTsKICAgICAgICAgICAgICAgICQoJyNteVNjaGVkdWxlcicpLnNjaGVkdWxlcigndmFsdWUnLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlVGltZTogbW9tZW50RGF0ZSwKICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZTogewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0gY2F0Y2ggKGVycikgewoKICAgIH0KCgo8L3NjcmlwdD4KCjxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+CiAgICA8ZGl2IGNsYXNzPSJyb3cgZm9ybS1ncm91cCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBNZWV0aW5nIFRpdGxlCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibWVldGluZ1RpdGxlIiBpZD0ibWVldGluZ1RpdGxlIiBjbGFzcz0iZm9ybS1jb250cm9sIGNsZWFyLWZpZWxkIj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBNZWV0aW5nIE93bmVyCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY2xlYXItZmllbGQiIG5hbWU9Im1lZXRpbmdPd25lciIgaWQ9Im1lZXRpbmdPd25lciIgPg0KPG9wdGlvbiB2YWx1ZT0iMjM1IiA+UFZTIEFkbWluPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyNjciID5TaWduYWwgRGV2PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTc5IiA+YmhhZ3lhPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI1Mzc5OTkiID5BZG1pbiBVc2VyPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBNZWV0aW5nIEF0dGVuZGVlcwogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJtZWV0aW5nQXR0ZW5kZWVzIiBpZD0ibWVldGluZ0F0dGVuZGVlcy1jcmVhdGUiIG11bHRpcGxlPSJ0cnVlIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYWN0aXZlIGNsZWFyLWZpZWxkIG1lZXRpbmdBdHRlbmRlZXMiID4NCjxvcHRpb24gdmFsdWU9IjIzNSIgPlBWUyBBZG1pbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjY3IiA+U2lnbmFsIERldjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjk3OSIgPmJoYWd5YTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNTM3OTk5IiA+QWRtaW4gVXNlcjwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93IGZvcm0tZ3JvdXAiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIERhdGUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmdWVsdXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBmb3JtLWdyb3VwIiBkYXRhLWluaXRpYWxpemU9ImRhdGVwaWNrZXIiIGlkPSJkdWUtZGF0ZS1waWNrZXItY3JlYXRlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0iTWVldGluZyBEYXRlIiBuYW1lPSJkdWVEYXRlIiByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSBtZWV0aW5nRGF0ZSBjbGVhci1maWVsZCIgaWQ9Im1lZXRpbmdEYXRlIiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kYXRlPSJbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIFN0YXJ0IFRpbWUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBib290c3RyYXAtdGltZXBpY2tlciB0aW1lcGlja2VyIj4KICAgICAgICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0iTWVldGluZ1RpbWUiIGlkPSJtZWV0aW5nVGltZSIgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGltZXBpY2tlcjEgbWVldGluZ1RpbWUgZm9ybS1jb250cm9sIGNsZWFyLWZpZWxkIiB0eXBlPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+PGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tdGltZSI+PC9pPjwvc3Bhbj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIER1cmF0aW9uCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImR1cmF0aW9uIiBpZD0iZHVyYXRpb24iIGNsYXNzPSJmb3JtLWNvbnRyb2wgY2xlYXItZmllbGQiPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNSI+NSBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwIj4xMCBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE1Ij4xNSBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjMwIj4zMCBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjQ1Ij40NSBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjYwIj4xIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjkwIj4xLjUgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTIwIj4yIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE4MCI+MyBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyNDAiPjQgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMzAwIj41IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjM2MCI+NiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI0MjAiPjcgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNDgwIj44IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjU0MCI+OSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI2MDAiPjEwIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjY2MCI+MTEgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNzIwIj4xMiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI3ODAiPjEzIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijg0MCI+MTQgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iOTAwIj4xNSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI5NjAiPjE2IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwMjAiPjE3IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwODAiPjE4IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjExNDAiPjE5IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyMDAiPjIwIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyNjAiPjIxIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEzMjAiPjIyIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEzODAiPjIzIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE0NDAiPjI0IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyb3cgcmVjdXJyZW5jZS1jaGVja2JveC1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImlzUmVjdXJyaW5nTWVldGluZyIgY2xhc3M9ImlzUmVjdXJyaW5nTWVldGluZyIgbmFtZT0iaXNSZWN1cnJpbmdNZWV0aW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0cnVlIi8+UmVjdXJyZW5jZQogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ibWVldGluZ1N1Z2dlc3Rpb25Db250YWluZXIgY29sbGFwc2UiIHN0eWxlPSJtYXJnaW46IDIwcHgiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBmb3JtLWdyb3VwIj4KICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4KICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgIFN0YXJ0IERhdGUKICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgZm9ybS1ncm91cCIgZGF0YS1pbml0aWFsaXplPSJkYXRlcGlja2VyIiBpZD0iZm10LXN0YXJ0LWRhdGUtcGlja2VyLWNyZWF0ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9ImZtdFN0YXJ0RGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9ImZtdFN0YXJ0RGF0ZS1jcmVhdGUiIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGF0ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgRW5kIERhdGUKICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgZm9ybS1ncm91cCIgZGF0YS1pbml0aWFsaXplPSJkYXRlcGlja2VyIiBpZD0iZm10LXN0YXJ0LWRhdGUtcGlja2VyLWNyZWF0ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9ImZtdEVuZERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20iIGlkPSJmbXRFbmREYXRlLWNyZWF0ZSIgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kYXRlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgPGEgY2xhc3M9ImZpbmRNZWV0aW5nVGltZXMgYnRuIGJ0bi1wcmltYXJ5IHVzZXItYWN0aW9uIiBkYXRhLXRleHQ9ImNyZWF0ZSIgc3R5bGU9ImZsb2F0OnJpZ2h0OyI+U2VhcmNoPC9hPgogICAgPC9kaXY+Cgo8L2Rpdj4KCjxkaXYgY2xhc3M9InRpbWUtc2xvdC1jb250YWluZXIiPgo8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIHNjaGVkdWxhci1jb250YWluZXIgc2NoZWR1bGFyLWNvbnRhaW5lci1jcmVhdGUiPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJvdyI+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgQWdlbmRhCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDx0ZXh0YXJlYSBzdHlsZT0iaGVpZ2h0OiAxNTBweCIgY2xhc3M9ImNvbC1sZy00IGZvcm0tY29udHJvbCBjbGVhci1maWVsZCIgbmFtZT0ibWVldGluZ0FnZW5kYSIgaWQ9Im1lZXRpbmdBZ2VuZGEiID48L3RleHRhcmVhPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhdHRhY2htZW50cyI+CiAgICAgICAgICAgICAgICAgICAgQWRkIEF0dGFjaG1lbnRzCiAgICAgICAgICAgICAgICA8L2xhYmVsPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIgYXR0YWNobWVudCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIGF0dGFjaG1lbnRzIj4KICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgIDxpbnB1dCBtdWx0aXBsZSBjbGFzcz0ibXVsdGkiIHR5cGU9ImZpbGUiIG5hbWU9ImF0dGFjaG1lbnRzIiBpZD0iYXR0YWNobWVudHMiLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgCgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtYm9keSI+CgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCjwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZm9ybT4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iY3JlYXRlLWlDYWxhbmRlciIgZGF0YS1pY3MtZmlsZT0idHJ1ZSIgZGF0YS1pZD0iY3JlYXRlTWVldGluZ01vZGFsIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGlkLWlDYWxlbmRlciI+U2F2ZSBhcyBpQ2FsZW5kYXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJjcmVhdGUtbWVldGluZy1idG4iIGRhdGEtaWNzLWZpbGU9ImZhbHNlIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGlkLWVsZW1lbnQiPkNyZWF0ZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBjbG9zZU1lZXRpbmdNb2RhbCIgZGF0YS1kaXNzbWlzcz0ibW9kYWwiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJlZGl0TWVldGluZ01vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJwcm9kdWN0RGljdGlvbmFyeUxhYmVsIgogICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJlZGl0TW9kYWxMYWJlbCI+PHNwYW4gaWQ9ImVkaXQtbWVldGluZy10aXRsZS1jb250YWluZXIiPkVkaXQgTWVldGluZzwvc3Bhbj48L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvc2lnbmFsL21lZXRpbmcvc2F2ZSIgbWV0aG9kPSJwb3N0IiBuYW1lPSJ0ZW1wRm9ybSIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgaWQ9InRlbXBGb3JtIiA+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3JlYXRlLXVybCIgdmFsdWU9Ii9zaWduYWwvbWVldGluZy91cGRhdGUiIGlkPSJjcmVhdGUtdXJsIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFwcFR5cGUiIGlkPSJhcHBUeXBlIiB2YWx1ZT0iU2lnbmFsIE1hbmFnZW1lbnQiIC8+CiAgICAgICAgICAgICAgICAgICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiB2YWx1ZT0iW10iIGlkPSJpZCIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idmVyc2lvbiIgdmFsdWU9IltdIiBpZD0idmVyc2lvbiIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWxlcnRJZCIgdmFsdWU9IjEyMTk2NTAiIGNsYXNzPSJhbGVydElkIiBpZD0iYWxlcnRJZCIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZmluZE1lZXRpbmdUaW1lc1VybCIgdmFsdWU9Ii9zaWduYWwvbWVldGluZy9maW5kTWVldGluZ1RpbWVzIiBpZD0iZmluZE1lZXRpbmdUaW1lc1VybCIgLz4KPHN0eWxlPgouaW5wdXQtZ3JvdXAtYWRkb24gewogICAgYm9yZGVyLXJhZGl1czogMjZweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNlZWVlZWU7Cn0KCi5zZWxlY3RUaW1lU2xvdCB7CiAgICBmbG9hdDogcmlnaHQ7Cn0KCi5tZWV0aW5nLXNsb3QtY29udGFpbmVyIHsKICAgIGNvbG9yOiAjOGE2ZDNiOwogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMzsKICAgIGJvcmRlci1jb2xvcjogI2ZhZWJjYzsKICAgIGJvcmRlci1yYWRpdXM6IDVweDsKfQoKLm1vZGFsLWZvb3RlciB7CiAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwp9Cjwvc3R5bGU+CjxzY3JpcHQ+CgogICAgdHJ5IHsKICAgICAgICAkKCcudGltZXBpY2tlcjEnKS50aW1lcGlja2VyKHsKICAgICAgICAgICAgc2hvd01lcmlkaWFuOiBmYWxzZQogICAgICAgIH0pOwoKICAgICAgICAkKCIjZHVlLWRhdGUtcGlja2VyLWVkaXQiKS5kYXRlcGlja2VyKCdzZXREYXRlJywgbmV3IERhdGUoKSk7CgogICAgICAgICQoIiNpc1JlY3VycmluZ01lZXRpbmciKS5vbigiY2xpY2siLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBtZWV0aW5nRGF0ZSA9ICQoIiNtZWV0aW5nRGF0ZSIpLnZhbCgpOwogICAgICAgICAgICB2YXIgbWVldGluZ1RpbWUgPSAkKCIjbWVldGluZ1RpbWUiKS52YWwoKTsKICAgICAgICAgICAgdmFyIHByZWZUaW1lem9uZSA9ICQoIiN0aW1lem9uZUZyb21TZXJ2ZXIiKS52YWwoKTsKICAgICAgICAgICAgdmFyIG1vbWVudERhdGU7CiAgICAgICAgICAgIGlmIChtZWV0aW5nRGF0ZSkgewogICAgICAgICAgICAgICAgbW9tZW50RGF0ZSA9IG1vbWVudChtZWV0aW5nRGF0ZSArICcgJyArIG1lZXRpbmdUaW1lKS5mb3JtYXQoIllZWVktTU0tRERUSEg6bW06c3Muc1RaRCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbW9tZW50RGF0ZSA9IChuZXcgRGF0ZSgpKS50b0lTT1N0cmluZygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB0aW1lWm9uZURhdGEgPSBudWxsOwogICAgICAgICAgICBpZiAodHlwZW9mIHByZWZUaW1lem9uZSAhPSAidW5kZWZpbmVkIiAmJiBwcmVmVGltZXpvbmUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGltZVpvbmVEYXRhID0gcHJlZlRpbWV6b25lLnNwbGl0KCIsIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aW1lWm9uZURhdGEpIHsKICAgICAgICAgICAgICAgIHZhciBuYW1lID0gdGltZVpvbmVEYXRhWzBdLnNwbGl0KCI6IilbMV0udHJpbSgpOwogICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRpbWVab25lRGF0YVsxXS5zdWJzdHJpbmcoOCkudHJpbSgpOwogICAgICAgICAgICAgICAgJCgnI215U2NoZWR1bGVyJykuc2NoZWR1bGVyKCd2YWx1ZScsIHsKICAgICAgICAgICAgICAgICAgICBzdGFydERhdGVUaW1lOiBtb21lbnREYXRlLAogICAgICAgICAgICAgICAgICAgIHRpbWVab25lOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSBjYXRjaCAoZXJyKSB7CgogICAgfQoKCjwvc2NyaXB0PgoKPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICAgIDxkaXYgY2xhc3M9InJvdyBmb3JtLWdyb3VwIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIE1lZXRpbmcgVGl0bGUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJtZWV0aW5nVGl0bGUiIGlkPSJtZWV0aW5nVGl0bGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgY2xlYXItZmllbGQiPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIE1lZXRpbmcgT3duZXIKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBjbGVhci1maWVsZCIgbmFtZT0ibWVldGluZ093bmVyIiBpZD0ibWVldGluZ093bmVyIiA+DQo8b3B0aW9uIHZhbHVlPSIyMzUiID5QVlMgQWRtaW48L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjI2NyIgPlNpZ25hbCBEZXY8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjY5NzkiID5iaGFneWE8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjUzNzk5OSIgPkFkbWluIFVzZXI8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIE1lZXRpbmcgQXR0ZW5kZWVzCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IG5hbWU9Im1lZXRpbmdBdHRlbmRlZXMiIGlkPSJtZWV0aW5nQXR0ZW5kZWVzLWVkaXQiIG11bHRpcGxlPSJ0cnVlIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYWN0aXZlIGNsZWFyLWZpZWxkIG1lZXRpbmdBdHRlbmRlZXMiID4NCjxvcHRpb24gdmFsdWU9IjIzNSIgPlBWUyBBZG1pbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjY3IiA+U2lnbmFsIERldjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjk3OSIgPmJoYWd5YTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNTM3OTk5IiA+QWRtaW4gVXNlcjwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93IGZvcm0tZ3JvdXAiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIERhdGUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmdWVsdXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBmb3JtLWdyb3VwIiBkYXRhLWluaXRpYWxpemU9ImRhdGVwaWNrZXIiIGlkPSJkdWUtZGF0ZS1waWNrZXItZWRpdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9Ik1lZXRpbmcgRGF0ZSIgbmFtZT0iZHVlRGF0ZSIgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20gbWVldGluZ0RhdGUgY2xlYXItZmllbGQiIGlkPSJtZWV0aW5nRGF0ZSIgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGF0ZT0iW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWJ0biI+CiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2FsZW5kYXIiPjwvc3Bhbj4KICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIENhbGVuZGFyPC9zcGFuPgogICAgPC9idXR0b24+CgogICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IGRhdGVwaWNrZXItY2FsZW5kYXItd3JhcHBlciIgcm9sZT0ibWVudSI+CiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0icHJldiI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPlByZXZpb3VzIE1vbnRoaDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmV4dCI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5OZXh0IE1vbnRoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1vbnRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMCI+SmFudWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMSI+RmVicnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjIiPk1hcmNoPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIzIj5BcHJpbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNCI+TWF5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI1Ij5KdW5lPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI2Ij5KdWx5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI3Ij5BdWd1c3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjgiPlNlcHRlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOSI+T2N0b2Jlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTAiPk5vdmVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMSI+RGVjZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiA8c3BhbiBjbGFzcz0ieWVhciI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8dGFibGUgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZGF5cyI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoPlN1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+TW88L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPldlPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VGg8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5GcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlNhPC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PjwvdGJvZHk+CiAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImRhdGVwaWNrZXItdG9kYXkiPlRvZGF5PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1tb250aCI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+TW9udGg8L2gyPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SmFuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkZlYjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjIiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIzIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXByPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1heTwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjUiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI2Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVsPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkF1ZzwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjgiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5TZXA8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI5Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+T2N0PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5Ob3Y8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkRlYzwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLXllYXIiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPlllYXI8L2gyPgogICAgICAgICAgICAgICAgPHVsPjwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtZm9vdGVyIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLWJhY2siPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LWxlZnQiPjwvc3Bhbj48c3BhbiBjbGFzcz0ic3Itb25seSI+UmV0dXJuIHRvIENhbGVuZGFyPC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1zZWxlY3QiPlNlbGVjdCA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TW9udGggYW5kIFllYXI8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBTdGFydCBUaW1lCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgYm9vdHN0cmFwLXRpbWVwaWNrZXIgdGltZXBpY2tlciI+CiAgICAgICAgICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9Ik1lZXRpbmdUaW1lIiBpZD0ibWVldGluZ1RpbWUiIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRpbWVwaWNrZXIxIG1lZXRpbmdUaW1lIGZvcm0tY29udHJvbCBjbGVhci1maWVsZCIgdHlwZT0idGV4dCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24iPjxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXRpbWUiPjwvaT48L3NwYW4+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBEdXJhdGlvbgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJkdXJhdGlvbiIgaWQ9ImR1cmF0aW9uIiBjbGFzcz0iZm9ybS1jb250cm9sIGNsZWFyLWZpZWxkIj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUiPjUgbWluPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMCI+MTAgbWluPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxNSI+MTUgbWluPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzMCI+MzAgbWluPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI0NSI+NDUgbWluPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI2MCI+MSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI5MCI+MS41IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyMCI+MiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxODAiPjMgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjQwIj40IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjMwMCI+NSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzNjAiPjYgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNDIwIj43IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjQ4MCI+OCBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI1NDAiPjkgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNjAwIj4xMCBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI2NjAiPjExIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjcyMCI+MTIgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNzgwIj4xMyBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI4NDAiPjE0IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjkwMCI+MTUgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iOTYwIj4xNiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMDIwIj4xNyBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMDgwIj4xOCBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMTQwIj4xOSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMjAwIj4yMCBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMjYwIj4yMSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMzIwIj4yMiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMzgwIj4yMyBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxNDQwIj4yNCBob3VyPC9vcHRpb24+CiAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93IHJlY3VycmVuY2UtY2hlY2tib3gtY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJpc1JlY3VycmluZ01lZXRpbmciIGNsYXNzPSJpc1JlY3VycmluZ01lZXRpbmciIG5hbWU9ImlzUmVjdXJyaW5nTWVldGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0idHJ1ZSIvPlJlY3VycmVuY2UKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im1lZXRpbmdTdWdnZXN0aW9uQ29udGFpbmVyIGNvbGxhcHNlIiBzdHlsZT0ibWFyZ2luOiAyMHB4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZm9ybS1ncm91cCI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgPGxhYmVsPgogICAgICAgICAgICBTdGFydCBEYXRlCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSJmdWVsdXgiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGZvcm0tZ3JvdXAiIGRhdGEtaW5pdGlhbGl6ZT0iZGF0ZXBpY2tlciIgaWQ9ImZtdC1zdGFydC1kYXRlLXBpY2tlci1lZGl0Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0iZm10U3RhcnREYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXNtIiBpZD0iZm10U3RhcnREYXRlLWVkaXQiIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGF0ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgRW5kIERhdGUKICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgZm9ybS1ncm91cCIgZGF0YS1pbml0aWFsaXplPSJkYXRlcGlja2VyIiBpZD0iZm10LXN0YXJ0LWRhdGUtcGlja2VyLWVkaXQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJmbXRFbmREYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXNtIiBpZD0iZm10RW5kRGF0ZS1lZGl0IiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRhdGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWJ0biI+CiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2FsZW5kYXIiPjwvc3Bhbj4KICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIENhbGVuZGFyPC9zcGFuPgogICAgPC9idXR0b24+CgogICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IGRhdGVwaWNrZXItY2FsZW5kYXItd3JhcHBlciIgcm9sZT0ibWVudSI+CiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0icHJldiI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPlByZXZpb3VzIE1vbnRoaDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmV4dCI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5OZXh0IE1vbnRoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1vbnRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMCI+SmFudWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMSI+RmVicnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjIiPk1hcmNoPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIzIj5BcHJpbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNCI+TWF5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI1Ij5KdW5lPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI2Ij5KdWx5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI3Ij5BdWd1c3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjgiPlNlcHRlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOSI+T2N0b2Jlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTAiPk5vdmVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMSI+RGVjZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiA8c3BhbiBjbGFzcz0ieWVhciI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8dGFibGUgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZGF5cyI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoPlN1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+TW88L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPldlPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VGg8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5GcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlNhPC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PjwvdGJvZHk+CiAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImRhdGVwaWNrZXItdG9kYXkiPlRvZGF5PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1tb250aCI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+TW9udGg8L2gyPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SmFuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkZlYjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjIiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIzIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXByPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1heTwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjUiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI2Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVsPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkF1ZzwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjgiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5TZXA8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI5Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+T2N0PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5Ob3Y8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkRlYzwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLXllYXIiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPlllYXI8L2gyPgogICAgICAgICAgICAgICAgPHVsPjwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtZm9vdGVyIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLWJhY2siPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LWxlZnQiPjwvc3Bhbj48c3BhbiBjbGFzcz0ic3Itb25seSI+UmV0dXJuIHRvIENhbGVuZGFyPC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1zZWxlY3QiPlNlbGVjdCA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TW9udGggYW5kIFllYXI8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4KICAgICAgICA8YSBjbGFzcz0iZmluZE1lZXRpbmdUaW1lcyBidG4gYnRuLXByaW1hcnkgdXNlci1hY3Rpb24iIGRhdGEtdGV4dD0iZWRpdCIgc3R5bGU9ImZsb2F0OnJpZ2h0OyI+U2VhcmNoPC9hPgogICAgPC9kaXY+Cgo8L2Rpdj4KCjxkaXYgY2xhc3M9InRpbWUtc2xvdC1jb250YWluZXIiPgo8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIHNjaGVkdWxhci1jb250YWluZXIgc2NoZWR1bGFyLWNvbnRhaW5lci1lZGl0Ij4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyb3ciPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIEFnZW5kYQogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8dGV4dGFyZWEgc3R5bGU9ImhlaWdodDogMTUwcHgiIGNsYXNzPSJjb2wtbGctNCBmb3JtLWNvbnRyb2wgY2xlYXItZmllbGQiIG5hbWU9Im1lZXRpbmdBZ2VuZGEiIGlkPSJtZWV0aW5nQWdlbmRhIiA+PC90ZXh0YXJlYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIGZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXR0YWNobWVudHMiPgogICAgICAgICAgICAgICAgICAgIEFkZCBBdHRhY2htZW50cwogICAgICAgICAgICAgICAgPC9sYWJlbD4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyIGF0dGFjaG1lbnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaW5uZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCBhdHRhY2htZW50cyI+CiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICA8aW5wdXQgbXVsdGlwbGUgY2xhc3M9Im11bHRpIiB0eXBlPSJmaWxlIiBuYW1lPSJhdHRhY2htZW50cyIgaWQ9ImF0dGFjaG1lbnRzIi8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIAoKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWJvZHkiPgoKICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+Cgo8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbnMgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJlZGl0LWlDYWxhbmRlciIgZGF0YS1pY3MtZmlsZT0idHJ1ZSIgZGF0YS1pZD0iZWRpdE1lZXRpbmdNb2RhbCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBpZC1pQ2FsZW5kZXIiPmlDYWxlbmRhcjwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgaWQtZWxlbWVudCB1cGRhdGUtbWVldGluZyIgZGF0YS1pY3MtZmlsZT0iZmFsc2UiIGRhdGEtaWQ9IiI+VXBkYXRlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9tZWV0aW5nL2NhbmNlbE1lZXRpbmc/YXBwVHlwZT1TaWduYWwrTWFuYWdlbWVudCZhbXA7YWxlcnRJZD0xMjE5NjUwIiBpZD0iY2FuY2VsTWVldGluZ0xpbmsiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgbWVldGluZy1pZC1lbGVtZW50IGNhbmNlbE1lZXRpbmdMaW5rIj5DYW5jZWwgTWVldGluZzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC9tZWV0aW5nL2NhbmNlbE1lZXRpbmdTZXJpZXMiIGlkPSJjYW5jZWxNZWV0aW5nU2VyaWVzTGluayIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBtZWV0aW5nLWlkLWVsZW1lbnQgY2FuY2VsTWVldGluZ0xpbmsiPkNhbmNlbCBNZWV0aW5nIFNlcmllczwvYT4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+Q2xvc2U8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9Im1lZXRpbmdNaW51dGVzTW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9InByb2R1Y3REaWN0aW9uYXJ5TGFiZWwiCiAgICAgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9ImNyZWF0ZU1vZGFsTGFiZWwiPkFkZCBNaW51dGVzPC9oND4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9zaWduYWwvbWVldGluZy9zYXZlIiBtZXRob2Q9InBvc3QiIG5hbWU9Im1lZXRpbmdNb2RhbEZvcm0iIGlkPSJtZWV0aW5nTW9kYWxGb3JtIiA+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3JlYXRlLXVybCIgdmFsdWU9Ii9zaWduYWwvbWVldGluZy9zYXZlIiBpZD0iY3JlYXRlLXVybCIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhcHBUeXBlIiBpZD0iYXBwVHlwZSIgdmFsdWU9IlNpZ25hbCBNYW5hZ2VtZW50IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFsZXJ0SWQiIGlkPSJhbGVydElkIiB2YWx1ZT0iMTIxOTY1MCIgLz4KICAgICAgICAgICAgICAgICAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWQiIHZhbHVlPSJbXSIgaWQ9ImlkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ2ZXJzaW9uIiB2YWx1ZT0iW10iIGlkPSJ2ZXJzaW9uIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhbGVydElkIiB2YWx1ZT0iMTIxOTY1MCIgY2xhc3M9ImFsZXJ0SWQiIGlkPSJhbGVydElkIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmaW5kTWVldGluZ1RpbWVzVXJsIiB2YWx1ZT0iL3NpZ25hbC9tZWV0aW5nL2ZpbmRNZWV0aW5nVGltZXMiIGlkPSJmaW5kTWVldGluZ1RpbWVzVXJsIiAvPgo8c3R5bGU+Ci5pbnB1dC1ncm91cC1hZGRvbiB7CiAgICBib3JkZXItcmFkaXVzOiAyNnB4OwogICAgYm9yZGVyOiAxcHggc29saWQgI2VlZWVlZTsKfQoKLnNlbGVjdFRpbWVTbG90IHsKICAgIGZsb2F0OiByaWdodDsKfQoKLm1lZXRpbmctc2xvdC1jb250YWluZXIgewogICAgY29sb3I6ICM4YTZkM2I7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzOwogICAgYm9yZGVyLWNvbG9yOiAjZmFlYmNjOwogICAgYm9yZGVyLXJhZGl1czogNXB4Owp9CgoubW9kYWwtZm9vdGVyIHsKICAgIGJhY2tncm91bmQ6ICNmZmZmZmY7Cn0KPC9zdHlsZT4KPHNjcmlwdD4KCiAgICB0cnkgewogICAgICAgICQoJy50aW1lcGlja2VyMScpLnRpbWVwaWNrZXIoewogICAgICAgICAgICBzaG93TWVyaWRpYW46IGZhbHNlCiAgICAgICAgfSk7CgogICAgICAgICQoIiNkdWUtZGF0ZS1waWNrZXItbWVldGluZy1taW51dGVzIikuZGF0ZXBpY2tlcignc2V0RGF0ZScsIG5ldyBEYXRlKCkpOwoKICAgICAgICAkKCIjaXNSZWN1cnJpbmdNZWV0aW5nIikub24oImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWVldGluZ0RhdGUgPSAkKCIjbWVldGluZ0RhdGUiKS52YWwoKTsKICAgICAgICAgICAgdmFyIG1lZXRpbmdUaW1lID0gJCgiI21lZXRpbmdUaW1lIikudmFsKCk7CiAgICAgICAgICAgIHZhciBwcmVmVGltZXpvbmUgPSAkKCIjdGltZXpvbmVGcm9tU2VydmVyIikudmFsKCk7CiAgICAgICAgICAgIHZhciBtb21lbnREYXRlOwogICAgICAgICAgICBpZiAobWVldGluZ0RhdGUpIHsKICAgICAgICAgICAgICAgIG1vbWVudERhdGUgPSBtb21lbnQobWVldGluZ0RhdGUgKyAnICcgKyBtZWV0aW5nVGltZSkuZm9ybWF0KCJZWVlZLU1NLUREVEhIOm1tOnNzLnNUWkQiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG1vbWVudERhdGUgPSAobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdGltZVpvbmVEYXRhID0gbnVsbDsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmVmVGltZXpvbmUgIT0gInVuZGVmaW5lZCIgJiYgcHJlZlRpbWV6b25lICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHRpbWVab25lRGF0YSA9IHByZWZUaW1lem9uZS5zcGxpdCgiLCIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGltZVpvbmVEYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRpbWVab25lRGF0YVswXS5zcGxpdCgiOiIpWzFdLnRyaW0oKTsKICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aW1lWm9uZURhdGFbMV0uc3Vic3RyaW5nKDgpLnRyaW0oKTsKICAgICAgICAgICAgICAgICQoJyNteVNjaGVkdWxlcicpLnNjaGVkdWxlcigndmFsdWUnLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlVGltZTogbW9tZW50RGF0ZSwKICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZTogewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0gY2F0Y2ggKGVycikgewoKICAgIH0KCgo8L3NjcmlwdD4KCjxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+CiAgICA8ZGl2IGNsYXNzPSJyb3cgZm9ybS1ncm91cCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBNZWV0aW5nIFRpdGxlCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibWVldGluZ1RpdGxlIiBpZD0ibWVldGluZ1RpdGxlIiBjbGFzcz0iZm9ybS1jb250cm9sIGNsZWFyLWZpZWxkIj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBNZWV0aW5nIE93bmVyCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY2xlYXItZmllbGQiIG5hbWU9Im1lZXRpbmdPd25lciIgaWQ9Im1lZXRpbmdPd25lciIgPg0KPG9wdGlvbiB2YWx1ZT0iMjM1IiA+UFZTIEFkbWluPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyNjciID5TaWduYWwgRGV2PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI2OTc5IiA+YmhhZ3lhPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI1Mzc5OTkiID5BZG1pbiBVc2VyPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBNZWV0aW5nIEF0dGVuZGVlcwogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJtZWV0aW5nQXR0ZW5kZWVzIiBpZD0ibWVldGluZ0F0dGVuZGVlcy1tZWV0aW5nLW1pbnV0ZXMiIG11bHRpcGxlPSJ0cnVlIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYWN0aXZlIGNsZWFyLWZpZWxkIG1lZXRpbmdBdHRlbmRlZXMiID4NCjxvcHRpb24gdmFsdWU9IjIzNSIgPlBWUyBBZG1pbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjY3IiA+U2lnbmFsIERldjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNjk3OSIgPmJoYWd5YTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNTM3OTk5IiA+QWRtaW4gVXNlcjwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93IGZvcm0tZ3JvdXAiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIERhdGUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmdWVsdXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBmb3JtLWdyb3VwIiBkYXRhLWluaXRpYWxpemU9ImRhdGVwaWNrZXIiIGlkPSJkdWUtZGF0ZS1waWNrZXItbWVldGluZy1taW51dGVzIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0iTWVldGluZyBEYXRlIiBuYW1lPSJkdWVEYXRlIiByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSBtZWV0aW5nRGF0ZSBjbGVhci1maWVsZCIgaWQ9Im1lZXRpbmdEYXRlIiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kYXRlPSJbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIFN0YXJ0IFRpbWUKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXF1aXJlZC1pbmRpY2F0b3IiPio8L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBib290c3RyYXAtdGltZXBpY2tlciB0aW1lcGlja2VyIj4KICAgICAgICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0iTWVldGluZ1RpbWUiIGlkPSJtZWV0aW5nVGltZSIgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGltZXBpY2tlcjEgbWVldGluZ1RpbWUgZm9ybS1jb250cm9sIGNsZWFyLWZpZWxkIiB0eXBlPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+PGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tdGltZSI+PC9pPjwvc3Bhbj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIER1cmF0aW9uCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVxdWlyZWQtaW5kaWNhdG9yIj4qPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImR1cmF0aW9uIiBpZD0iZHVyYXRpb24iIGNsYXNzPSJmb3JtLWNvbnRyb2wgY2xlYXItZmllbGQiPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNSI+NSBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwIj4xMCBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE1Ij4xNSBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjMwIj4zMCBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjQ1Ij40NSBtaW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjYwIj4xIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjkwIj4xLjUgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTIwIj4yIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE4MCI+MyBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyNDAiPjQgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMzAwIj41IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjM2MCI+NiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI0MjAiPjcgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNDgwIj44IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjU0MCI+OSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI2MDAiPjEwIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjY2MCI+MTEgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNzIwIj4xMiBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI3ODAiPjEzIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijg0MCI+MTQgaG91cjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iOTAwIj4xNSBob3VyPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI5NjAiPjE2IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwMjAiPjE3IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwODAiPjE4IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjExNDAiPjE5IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyMDAiPjIwIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyNjAiPjIxIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEzMjAiPjIyIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEzODAiPjIzIGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE0NDAiPjI0IGhvdXI8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyb3cgcmVjdXJyZW5jZS1jaGVja2JveC1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImlzUmVjdXJyaW5nTWVldGluZyIgY2xhc3M9ImlzUmVjdXJyaW5nTWVldGluZyIgbmFtZT0iaXNSZWN1cnJpbmdNZWV0aW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0cnVlIi8+UmVjdXJyZW5jZQogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ibWVldGluZ1N1Z2dlc3Rpb25Db250YWluZXIgY29sbGFwc2UiIHN0eWxlPSJtYXJnaW46IDIwcHgiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBmb3JtLWdyb3VwIj4KICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4KICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgIFN0YXJ0IERhdGUKICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgZm9ybS1ncm91cCIgZGF0YS1pbml0aWFsaXplPSJkYXRlcGlja2VyIiBpZD0iZm10LXN0YXJ0LWRhdGUtcGlja2VyLW1lZXRpbmctbWludXRlcyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9ImZtdFN0YXJ0RGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9ImZtdFN0YXJ0RGF0ZS1tZWV0aW5nLW1pbnV0ZXMiIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGF0ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhciI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgQ2FsZW5kYXI8L3NwYW4+CiAgICA8L2J1dHRvbj4KCiAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQgZGF0ZXBpY2tlci1jYWxlbmRhci13cmFwcGVyIiByb2xlPSJtZW51Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJwcmV2Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+UHJldmlvdXMgTW9udGhoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXh0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Ij48L3NwYW4+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk5leHQgTW9udGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIwIj5KYW51YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxIj5GZWJydWFyeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMiI+TWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjMiPkFwcmlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI0Ij5NYXk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjUiPkp1bmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjYiPkp1bHk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjciPkF1Z3VzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iOCI+U2VwdGVtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI5Ij5PY3RvYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIxMCI+Tm92ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjExIj5EZWNlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxzcGFuIGNsYXNzPSJ5ZWFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1kYXlzIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+U3U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5NbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlR1PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+V2U8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkZyPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+U2E8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXItZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iZGF0ZXBpY2tlci10b2RheSI+VG9kYXk8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLW1vbnRoIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5Nb250aDwvaDI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjAiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KYW48L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RmViPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk1hcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjMiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BcHI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI0Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWF5PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjYiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5KdWw8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI3Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+QXVnPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPlNlcDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjkiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5PY3Q8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIxMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk5vdjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjExIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+RGVjPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMteWVhciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImhlYWRlciI+WWVhcjwvaDI+CiAgICAgICAgICAgICAgICA8dWw+PC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy1mb290ZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtYmFjayI+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctbGVmdCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5SZXR1cm4gdG8gQ2FsZW5kYXI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGRhdGVwaWNrZXItd2hlZWxzLXNlbGVjdCI+U2VsZWN0IDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5Nb250aCBhbmQgWWVhcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgRW5kIERhdGUKICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlcXVpcmVkLWluZGljYXRvciI+Kjwvc3Bhbj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgZm9ybS1ncm91cCIgZGF0YS1pbml0aWFsaXplPSJkYXRlcGlja2VyIiBpZD0iZm10LXN0YXJ0LWRhdGUtcGlja2VyLW1lZXRpbmctbWludXRlcyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9ImZtdEVuZERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20iIGlkPSJmbXRFbmREYXRlLW1lZXRpbmctbWludXRlcyIgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kYXRlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1idG4iPgogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBDYWxlbmRhcjwvc3Bhbj4KICAgIDwvYnV0dG9uPgoKICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCBkYXRlcGlja2VyLWNhbGVuZGFyLXdyYXBwZXIiIHJvbGU9Im1lbnUiPgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItY2FsZW5kYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InByZXYiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCI+PC9zcGFuPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91cyBNb250aGg8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5leHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQiPjwvc3Bhbj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3Itb25seSI+TmV4dCBNb250aDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb250aCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjAiPkphbnVhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEiPkZlYnJ1YXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSIyIj5NYXJjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMyI+QXByaWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjQiPk1heTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNSI+SnVuZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNiI+SnVseTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iNyI+QXVndXN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW1vbnRoPSI4Ij5TZXB0ZW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjkiPk9jdG9iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbW9udGg9IjEwIj5Ob3ZlbWJlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1tb250aD0iMTEiPkRlY2VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gPHNwYW4gY2xhc3M9InllYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRlcGlja2VyLWNhbGVuZGFyLWRheXMiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD5TdTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk1vPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+VHU8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5XZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlRoPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+RnI8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5TYTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jYWxlbmRhci1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJkYXRlcGlja2VyLXRvZGF5Ij5Ub2RheTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci13aGVlbHMtbW9udGgiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXIiPk1vbnRoPC9oMj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMCI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkphbjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5GZWI8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSIyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+TWFyPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMyI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkFwcjwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjQiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5NYXk8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI1Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+SnVuPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iNiI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPkp1bDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjciPjxidXR0b24gdHlwZT0iYnV0dG9uIj5BdWc8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW1vbnRoPSI4Ij48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+U2VwPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iOSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iPk9jdDwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtbW9udGg9IjEwIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiI+Tm92PC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1tb250aD0iMTEiPjxidXR0b24gdHlwZT0iYnV0dG9uIj5EZWM8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyLXdoZWVscy15ZWFyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGVhZGVyIj5ZZWFyPC9oMj4KICAgICAgICAgICAgICAgIDx1bD48L3VsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItd2hlZWxzLWZvb3RlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBkYXRlcGlja2VyLXdoZWVscy1iYWNrIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0Ij48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlJldHVybiB0byBDYWxlbmRhcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gZGF0ZXBpY2tlci13aGVlbHMtc2VsZWN0Ij5TZWxlY3QgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNyLW9ubHkiPk1vbnRoIGFuZCBZZWFyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+CiAgICAgICAgPGEgY2xhc3M9ImZpbmRNZWV0aW5nVGltZXMgYnRuIGJ0bi1wcmltYXJ5IHVzZXItYWN0aW9uIiBkYXRhLXRleHQ9Im1lZXRpbmctbWludXRlcyIgc3R5bGU9ImZsb2F0OnJpZ2h0OyI+U2VhcmNoPC9hPgogICAgPC9kaXY+Cgo8L2Rpdj4KCjxkaXYgY2xhc3M9InRpbWUtc2xvdC1jb250YWluZXIiPgo8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIHNjaGVkdWxhci1jb250YWluZXIgc2NoZWR1bGFyLWNvbnRhaW5lci1tZWV0aW5nLW1pbnV0ZXMiPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIGZvcm0tZ3JvdXAgbWVldGluZ01pbnV0ZXMiPgogICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIE1lZXRpbmcgTWludXRlcwogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBzdHlsZT0iaGVpZ2h0OiAxNTBweCIgY2xhc3M9ImNvbC1sZy00IGZvcm0tY29udHJvbCBtZWV0aW5nTWludXRlcyIgbmFtZT0ibWVldGluZ01pbnV0ZXMiIGlkPSJtZWV0aW5nTWludXRlcyIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icm93Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIGZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICBBZ2VuZGEKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPHRleHRhcmVhIHN0eWxlPSJoZWlnaHQ6IDE1MHB4IiBjbGFzcz0iY29sLWxnLTQgZm9ybS1jb250cm9sIGNsZWFyLWZpZWxkIiBuYW1lPSJtZWV0aW5nQWdlbmRhIiBpZD0ibWVldGluZ0FnZW5kYSIgPjwvdGV4dGFyZWE+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImF0dGFjaG1lbnRzIj4KICAgICAgICAgICAgICAgICAgICBBZGQgQXR0YWNobWVudHMKICAgICAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciBhdHRhY2htZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWlubmVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgYXR0YWNobWVudHMiPgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgPGlucHV0IG11bHRpcGxlIGNsYXNzPSJtdWx0aSIgdHlwZT0iZmlsZSIgbmFtZT0iYXR0YWNobWVudHMiIGlkPSJhdHRhY2htZW50cyIvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1ib2R5Ij4KCiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDwvZGl2PgoKPC9kaXY+CgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgaWQtZWxlbWVudCB1cGRhdGUtbWVldGluZyIgZGF0YS1pZD0iIj5VcGRhdGU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCgoKCgoKCgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRvY01hbmFnZW1lbnQiIGNsYXNzPSJ0YWItcGFuZSBmYWRlIG0tYi0xMCIgcm9sZT0idGFicGFuZWwiPgogICAgICAgICAgICAgICAgICAgIAo8c2NyaXB0PgogICAgdmFyIHNpZ25hbElkID0gIjEyMTk2NTAiOwogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgewogICAgICAgICQoIiNnZW5lcmF0ZS1yZXBvcnQiKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoIiNnZW5lcmF0aW5nLXJlcG9ydCIpLnJlbW92ZUNsYXNzKCJoaWRlIik7CiAgICAgICAgfSk7CgogICAgICAgICQoJy5zZW5kVG9EbXMnKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoJyNzZW5kVG9EbXNNb2RhbCcpLm1vZGFsKCk7CiAgICAgICAgICAgICQoJyNkb2NUeXBlVmFsdWUnKS52YWwoJCh0aGlzKS5kYXRhKCdkb2MtdHlwZScpKTsKICAgICAgICAgICAgJCgnI3Byb2R1Y3RTZWxlY3Rpb25ETVMnKS52YWwoJCgnI3Byb2R1Y3RTZWxlY3Rpb25Bc3Nlc3NtZW50JykudmFsKCkpOwogICAgICAgICAgICAkKCcjZXZlbnRTZWxlY3Rpb25ETVMnKS52YWwoJCgnI2V2ZW50U2VsZWN0aW9uQXNzZXNzbWVudCcpLnZhbCgpKTsKICAgICAgICAgICAgJCgnI2RhdGFTb3VyY2VETVMnKS52YWwoJCgnI2RhdGFTb3VyY2VzJykudmFsKCkpOwogICAgICAgICAgICAkKCcjZGF0ZVJhbmdlRE1TJykudmFsKCQoJyNkYXRlUmFuZ2UnKS52YWwoKSk7CiAgICAgICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ3JlcG9ydC10eXBlJykpIHsKICAgICAgICAgICAgICAgICQoJyNyZXBvcnRUeXBlRE1TJykudmFsKCQodGhpcykuZGF0YSgncmVwb3J0LXR5cGUnKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwogICAgJCgnYSNkb2N1bWVudE1hbmFnZW1lbnQnKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYoISQoJyNwcm9kdWN0U2VsZWN0aW9uQXNzZXNzbWVudCcpLnZhbCgpKSB7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IFZBTElEQVRFRC5hc3Nlc3NtZW50RmlsdGVyVXJsICsgIj9pZD0iICsgJCgiI3NpZ25hbElkIikudmFsKCksCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgJCgnI3Byb2R1Y3RTZWxlY3Rpb25Bc3Nlc3NtZW50JykudmFsKCd7IjEiOltdLCIyIjpbXSwiMyI6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5wcm9kdWN0TGlzdCkgKyAnLCI0IjpbXSwiNSI6W119Jyk7CiAgICAgICAgICAgICAgICAgICAgJCgnI2V2ZW50U2VsZWN0aW9uQXNzZXNzbWVudCcpLnZhbCgneyIxIjpbXSwiMiI6W10sIjQiOicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQuZXZlbnRMaXN0KSArICcsIjMiOltdLCI1IjpbXSwiNiI6W119Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0pOwo8L3NjcmlwdD4KCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3NpZ25hbC9hc3NldHMvanF1ZXJ5LXBpY2tsaXN0LTIwNDhjMWY0YTAzM2M5N2EzOWE2NWY0YWNjZDM0ZTBmLmNzcyIvPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9kb2N1bWVudE1hbmFnZW1lbnQvZG9jdW1lbnQtNzJlOGRlYzE1MTZhZjU4NDNkZWRhMGNjMzdjZTVjNmIuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvYXBwL3B2cy9kb2N1bWVudE1hbmFnZW1lbnQvc3VtbWFyeVJlcG9ydFByZWZlcmVuY2UtZTJhOGM2YmRhM2Y5M2U2M2Y1MTZlNzA3ODc3MWYyZWUuanMiID48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvanF1ZXJ5L2pxdWVyeS1waWNrbGlzdC03ZjkwMWMzMDQzNzMxZTIwOGIxMzE2MzM0ODcyZTgwOS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoKICAgdmFyIGRvd25sb2FkU3VtbWFyeVJlcG9ydFBERlVybCA9ICJcdTAwMmZzaWduYWxcdTAwMmZ2YWxpZGF0ZWRTaWduYWxcdTAwMmZnZW5lcmF0ZVNpZ25hbFN1bW1hcnlSZXBvcnQ/b3V0cHV0Rm9ybWF0PVBERlx1MDAyNnNpZ25hbElkPTEyMTk2NTBcdTAwMjZyZXBvcnRUeXBlPXNpZ25hbFN1bW1hcnlcdTAwMjZhc3Nlc3NtZW50UmVxdWlyZWQ9dHJ1ZSI7CiAgIHZhciBkb3dubG9hZFN1bW1hcnlSZXBvcnRYTFNYVXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnZhbGlkYXRlZFNpZ25hbFx1MDAyZmdlbmVyYXRlU2lnbmFsU3VtbWFyeVJlcG9ydD9vdXRwdXRGb3JtYXQ9WExTWFx1MDAyNnNpZ25hbElkPTEyMTk2NTBcdTAwMjZyZXBvcnRUeXBlPXNpZ25hbFN1bW1hcnlcdTAwMjZhc3Nlc3NtZW50UmVxdWlyZWQ9dHJ1ZSI7CiAgIHZhciBkb3dubG9hZFN1bW1hcnlSZXBvcnREb2NYVXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZnZhbGlkYXRlZFNpZ25hbFx1MDAyZmdlbmVyYXRlU2lnbmFsU3VtbWFyeVJlcG9ydD9vdXRwdXRGb3JtYXQ9RE9DWFx1MDAyNnNpZ25hbElkPTEyMTk2NTBcdTAwMjZyZXBvcnRUeXBlPXNpZ25hbFN1bW1hcnlcdTAwMjZhc3Nlc3NtZW50UmVxdWlyZWQ9dHJ1ZSI7Cg0KPC9zY3JpcHQ+DQoKPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1pbm5lciI+PGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXIgaWNvLW1lbnUiPjxkaXYgY2xhc3M9ImRyb3Bkb3duIj48bGFiZWwgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj5TaWduYWwgUmVwb3J0czwvbGFiZWw+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0icm93IHJ4bWFpbi1jb250YWluZXItY29udGVudCI+CiAgICA8ZGl2PiZuYnNwOzwvZGl2PgoKICAgIDxkaXYgaWQ9ImdlbmVyYXRlZC1yZXBvcnRzIiBjbGFzcz0icm93Ij4KICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIj4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICA8dGggY2xhc3M9ImNvbC1tZC0yIj5SZXBvcnQgTmFtZTwvdGg+CiAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLW1kLTIiPkRvd25sb2FkPC90aD4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+U2lnbmFsIFN1bW1hcnkgUmVwb3J0PC9zcGFuPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZG93bmxvYWRSZXBvcnQgcGRmIG0tci0xNSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9wZGYtaWNvbi1hNmU3ZDdkOWI5YzQ3ZmI2Y2ZkNTYxMWE5MTRiMmRiNS5qcGciIGNsYXNzPSJwZGYtaWNvbiIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJkb3dubG9hZFJlcG9ydCB4bHN4IG0tci0xNSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9leGNlbC1hNDBjZTc4Y2RkODZjYWM4MDA0MTYzYmY3MzY4MDJkYS5naWYiIGNsYXNzPSJleGNlbC1pY29uIiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImRvd25sb2FkUmVwb3J0IHdvcmQgbS1yLTE1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3dvcmQtaWNvbi1kNWRhZDMxMTFkYWYwMTUyMGYwM2Q5NzA3MmZhMDI0Ny5wbmciIGNsYXNzPSJ3b3JkLWljb24iIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjc2lnbmFsU3VtbWFyeVJlcG9ydFByZWZlcmVuY2VNb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9zZXR0aW5ncy1pY29uLWIwYTMxN2E3ZjIxNDY5MjBiZTcwNDZiZGRhMWM3ZmU0LnBuZyIgY2xhc3M9InNldHRpbmdzLWljb24gbS1yLTE1IiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtbWQtMiI+T3RoZXIgUmVwb3J0czwvdGg+CiAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLW1kLTIiPkRvd25sb2FkPC90aD4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+UEJSRVIgU2lnbmFsIFN1bW1hcnkgUmVwb3J0PC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvZ2VuZXJhdGVTaWduYWxSZXBvcnRzP291dHB1dEZvcm1hdD1QREYmYW1wO3NpZ25hbElkPTEyMTk2NTAmYW1wO3JlcG9ydFR5cGU9cGViZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvcGRmLWljb24tYTZlN2Q3ZDliOWM0N2ZiNmNmZDU2MTFhOTE0YjJkYjUuanBnIiBjbGFzcz0icGRmLWljb24gbS1yLTE1IiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2dlbmVyYXRlU2lnbmFsUmVwb3J0cz9vdXRwdXRGb3JtYXQ9WExTWCZhbXA7c2lnbmFsSWQ9MTIxOTY1MCZhbXA7cmVwb3J0VHlwZT1wZWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9leGNlbC1hNDBjZTc4Y2RkODZjYWM4MDA0MTYzYmY3MzY4MDJkYS5naWYiIGNsYXNzPSJleGNlbC1pY29uIG0tci0xNSIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9nZW5lcmF0ZVNpZ25hbFJlcG9ydHM/b3V0cHV0Rm9ybWF0PURPQ1gmYW1wO3NpZ25hbElkPTEyMTk2NTAmYW1wO3JlcG9ydFR5cGU9cGViZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvd29yZC1pY29uLWQ1ZGFkMzExMWRhZjAxNTIwZjAzZDk3MDcyZmEwMjQ3LnBuZyIgY2xhc3M9IndvcmQtaWNvbiBtLXItMTUiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPjxzcGFuPlNpZ25hbCBBc3Nlc3NtZW50IFJlcG9ydDwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2dlbmVyYXRlU2lnbmFsQXNzZXNzbWVudFJlcG9ydD9vdXRwdXRGb3JtYXQ9UERGJmFtcDtzaWduYWxJZD0xMjE5NjUwJmFtcDtyZXBvcnRUeXBlPXBlYmVyIiBpZD0iYXNzZXNzbWVudFRvUGRmIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3BkZi1pY29uLWE2ZTdkN2Q5YjljNDdmYjZjZmQ1NjExYTkxNGIyZGI1LmpwZyIgY2xhc3M9InBkZi1pY29uIG0tci0xNSIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9nZW5lcmF0ZVNpZ25hbEFzc2Vzc21lbnRSZXBvcnQ/b3V0cHV0Rm9ybWF0PVhMU1gmYW1wO3NpZ25hbElkPTEyMTk2NTAmYW1wO3JlcG9ydFR5cGU9cGViZXIiIGlkPSJhc3Nlc3NtZW50VG9YbHN4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL2V4Y2VsLWE0MGNlNzhjZGQ4NmNhYzgwMDQxNjNiZjczNjgwMmRhLmdpZiIgY2xhc3M9ImV4Y2VsLWljb24gbS1yLTE1IiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2dlbmVyYXRlU2lnbmFsQXNzZXNzbWVudFJlcG9ydD9vdXRwdXRGb3JtYXQ9RE9DWCZhbXA7c2lnbmFsSWQ9MTIxOTY1MCZhbXA7cmVwb3J0VHlwZT1wZWJlciIgaWQ9ImFzc2Vzc21lbnRUb0RvY3giPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvd29yZC1pY29uLWQ1ZGFkMzExMWRhZjAxNTIwZjAzZDk3MDcyZmEwMjQ3LnBuZyIgY2xhc3M9IndvcmQtaWNvbiBtLXItMTUiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+QWxsIFNpZ25hbCBBY3Rpb25zPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvZXhwb3J0U2lnbmFsQWN0aW9uRGV0YWlsUmVwb3J0P291dHB1dEZvcm1hdD1QREYmYW1wO3NpZ25hbElkPTEyMTk2NTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvcGRmLWljb24tYTZlN2Q3ZDliOWM0N2ZiNmNmZDU2MTFhOTE0YjJkYjUuanBnIiBjbGFzcz0icGRmLWljb24gbS1yLTE1IiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zaWduYWwvdmFsaWRhdGVkU2lnbmFsL2V4cG9ydFNpZ25hbEFjdGlvbkRldGFpbFJlcG9ydD9vdXRwdXRGb3JtYXQ9WExTWCZhbXA7c2lnbmFsSWQ9MTIxOTY1MCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9leGNlbC1hNDBjZTc4Y2RkODZjYWM4MDA0MTYzYmY3MzY4MDJkYS5naWYiIGNsYXNzPSJleGNlbC1pY29uIG0tci0xNSIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2lnbmFsL3ZhbGlkYXRlZFNpZ25hbC9leHBvcnRTaWduYWxBY3Rpb25EZXRhaWxSZXBvcnQ/b3V0cHV0Rm9ybWF0PURPQ1gmYW1wO3NpZ25hbElkPTEyMTk2NTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvd29yZC1pY29uLWQ1ZGFkMzExMWRhZjAxNTIwZjAzZDk3MDcyZmEwMjQ3LnBuZyIgY2xhc3M9IndvcmQtaWNvbiBtLXItMTUiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+Cgo8L2Rpdj48L2Rpdj48L2Rpdj4KCjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXIiPjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaW5uZXIiPjxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyIGljby1tZW51Ij48ZGl2IGNsYXNzPSJkcm9wZG93biI+PGxhYmVsIGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+RG9jdW1lbnQgTWFuYWdlbWVudDwvbGFiZWw+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0icm93IHJ4bWFpbi1jb250YWluZXItY29udGVudCI+CiAgICA8ZGl2IGlkPSJ0YWJsZSIgY2xhc3M9InRhYmxlLWVkaXRhYmxlIj4KICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgogICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJhbGVydCIgYXJpYS1sYWJlbD0iY2xvc2UiPiZ0aW1lczs8L2E+CiAgICAgICAgPHN0cm9uZz5TdWNjZXNzITwvc3Ryb25nPjxzcGFuIGlkPSJzdWNjZXNzTWVzc2FnZSI+RG9jdW1lbnQgdXBkYXRlZCE8L3NwYW4+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgogICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJhbGVydCIgYXJpYS1sYWJlbD0iY2xvc2UiPiZ0aW1lczs8L2E+CiAgICAgICAgPHN0cm9uZz5FcnJvciE8L3N0cm9uZz48c3BhbiBpZD0iZXJyb3JNZXNzYWdlIj48L3NwYW4+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJkdC1idXR0b25zIGJ0bi1ncm91cCI+CiAgICAgICAgPGEgaWQ9InNob3ctZG9jLWxpc3QtYnQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgZG9jdW1lbnQtY3JlYXRlIgogICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZG9jdW1lbnRNb2RhbCIgZGF0YS10YXJnZXQ9IiNkb2N1bWVudE1vZGFsIj4KICAgICAgICAgICAgTmV3IERvY3VtZW50CiAgICAgICAgPC9hPgogICAgPC9kaXY+CiAgICAKICAgIDx0YWJsZSBjbGFzcz0idGFibGUiIGlkPSJhbGVydC1kb2N1bWVudC10YWJsZSIgc3R5bGU9IndpZHRoOiAxMDAlIj4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+SWQ8L3RoPgogICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+CiAgICAgICAgICAgIDx0aD5Eb2N1bWVudDwvdGg+CiAgICAgICAgICAgIDx0aD5Qcm9kdWN0IE5hbWU8L3RoPgogICAgICAgICAgICA8dGg+U3RhcnQgRGF0ZTwvdGg+CiAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBTdGF0dXM8L3RoPgogICAgICAgICAgICA8dGg+QXV0aG9yPC90aD4KICAgICAgICAgICAgPHRoPlN0YXR1cyBEYXRlPC90aD4KICAgICAgICAgICAgPHRoPlRhcmdldCBEYXRlPC90aD4KICAgICAgICAgICAgPHRoPkNvbW1lbnRzPC90aD4KICAgICAgICAgICAgPHRoPjwvdGg+CiAgICAgICAgPC90cj4KICAgICAgICA8L3RoZWFkPgoKICAgICAgICA8dGJvZHkgY2xhc3M9InRhYmxlQm9keSI+CiAgICAgICAgPC90Ym9keT4KCiAgICA8L3RhYmxlPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImFsZXJ0SWQiIHZhbHVlPSIiLz4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJkb2N1bWVudFR5cGVsaXN0IiB2YWx1ZT0iIiAvPgogICAgPGRpdj4KCgogICAgPC9kaXY+Cgo8L2Rpdj4KCiAgICA8c3R5bGU+Ci5yeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCB7CiAgICBjdXJzb3I6IHBvaW50ZXIKfQo8L3N0eWxlPgoKPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImRvY3VtZW50TW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtb2RhbC10aXRsZSI+U2VsZWN0IHRoZSBkb2N1bWVudHM8L2xhYmVsPgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZpbHRlcnMiIGNsYXNzPSJmdWVsdXgiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2ZpbHRlci1wYW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ic2hvdy1maWx0ZXIgZmEgZmEtbGcgY2xpY2sgZmEtY2FyZXQtcmlnaHQgZmlsdGVyX2ljb24iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPkZpbHRlcnM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJmaWx0ZXItcGFuZSIgY2xhc3M9ImNvbGxhcHNlIGZpbHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNCBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IndvcmtmbG93U3RhdGVGaWx0ZXIiIGNsYXNzPSIiPlByb2R1Y3QgTmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgZmlsdGVyQ29tYm9Cb3giIGlkPSJwcm9kdWN0TmFtZUZpbHRlciIgbmFtZT0icHJvZHVjdE5hbWVGaWx0ZXIiID4NCjxvcHRpb24gdmFsdWU9IiI+PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIiID48L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy00IGZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJpb3JpdHlGaWx0ZXIiIGNsYXNzPSIiPkRvY3VtZW50IFR5cGU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIGZpbHRlckNvbWJvQm94IiBpZD0iZG9jdW1lbnRUeXBlRmlsdGVyIiBuYW1lPSJkb2N1bWVudFR5cGVGaWx0ZXIiID4NCjxvcHRpb24gdmFsdWU9IiI+PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIiID48L29wdGlvbj4NCjwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTQgZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkdC1idXR0b25zIGJ0bi1ncm91cCBtLXItMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJzaG93LWRvYy1saXN0LWJ0IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGZpbHRlckRvY3VtZW50cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbHRlciBEb2N1bWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkdC1idXR0b25zIGJ0bi1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9InNob3ctZG9jLWxpc3QtYnQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcmVzZXRGaWx0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXNldCBGaWx0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRvY3VtZW50LWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkYXRhVGFibGUgYXV0by1zY2FsZSIgaWQ9ImRvY3VtZW50TW9kYWxUYWJsZSIgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPklkPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UHJvZHVjdCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGFydCBEYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBTdGF0dXM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkF1dGhvcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzIERhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBpZD0iZG9jdW1lbnRNb2RhbFRhYmxlQm9keSI+PC90Ym9keT4KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbnMiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG1vZGFsLWFkZC1idG4iPkFkZDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8L2Rpdj48L2Rpdj48L2Rpdj4KCjxzdHlsZT4KLnNvcnRhYmxlLWxpc3QgewogICAgbGlzdC1zdHlsZTogbm9uZTsKICAgIG1hcmdpbjogMDsKICAgIG1pbi1oZWlnaHQ6IDYwcHg7CiAgICBwYWRkaW5nOiAxMHB4Owp9Cgouc29ydGFibGUtbGlzdC5yZXF1aXJlZCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2JlYTg2Owp9Cgouc29ydGFibGUtbGlzdC5pZ25vcmUgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYjI5ZjsKfQo8L3N0eWxlPgoKPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InNpZ25hbFN1bW1hcnlSZXBvcnRQcmVmZXJlbmNlTW9kYWwiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiPkNob29zZSBSZXBvcnQgU2VjdGlvbjwvbGFiZWw+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0iZmlsdGVycyIgY2xhc3M9ImZ1ZWx1eCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCIgc3R5bGU9InBhZGRpbmc6IDEwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMTBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic2lnbmFsU3VtbWFyeVJlcG9ydFVzZXJQcmVmZXJlbmNlIiBpZD0ic2lnbmFsU3VtbWFyeVJlcG9ydFVzZXJQcmVmZXJlbmNlIiA+DQo8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0yMjBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImhlaWdodDogMTYwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIHN0eWxlPSJtYXJnaW4tdG9wOiAxMjNweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljaz0iJChzZWxlY3RlZEVsZW1lbnQpLm1vdmVVcCgpOyI+JiM5NjUwOzwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgb25jbGljaz0iJChzZWxlY3RlZEVsZW1lbnQpLm1vdmVEb3duKCk7Ij4mIzk2NjA7PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9ucyAiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCI+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgc2lnbmFsU3VtbWFyeVJlcG9ydFByZWZlcmVuY2VTYXZlIj5TYXZlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8Zm9ybSBhY3Rpb249Ii9zaWduYWwvRE1TSW50ZWdyYXRpb24vc2VuZFRvRG1zIiBtZXRob2Q9InBvc3QiID4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNpZ25hbElkIiB2YWx1ZT0iMTIxOTY1MCIgaWQ9InNpZ25hbElkIiAvPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZXZlbnRTZWxlY3Rpb24iIHZhbHVlPSIiIGlkPSJldmVudFNlbGVjdGlvbkRNUyIgLz4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InByb2R1Y3RTZWxlY3Rpb24iIHZhbHVlPSIiIGlkPSJwcm9kdWN0U2VsZWN0aW9uRE1TIiAvPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGF0YVNvdXJjZSIgdmFsdWU9IiIgaWQ9ImRhdGFTb3VyY2VETVMiIC8+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRlUmFuZ2UiIHZhbHVlPSIiIGlkPSJkYXRlUmFuZ2VETVMiIC8+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXBvcnRUeXBlIiB2YWx1ZT0icGViZXIiIGlkPSJyZXBvcnRUeXBlRE1TIiAvPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZG9jVHlwZVZhbHVlIiB2YWx1ZT0iIiBpZD0iZG9jVHlwZVZhbHVlIiAvPgogICAgCjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzZW5kVG9EbXNNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIj5VcGxvYWQgVG8gRG9jdW1lbnQgTWFuYWdlbWVudCBTeXN0ZW08L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFkaW8gcmFkaW8taW5saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBpZD0iZm9ybWF0UERGIiBjaGVja2VkIG5hbWU9ImRtc0NvbmZpZ3VyYXRpb24uZm9ybWF0IiB2YWx1ZT0iUERGIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZvcm1hdFBERiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQREYKICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIHJhZGlvLWlubGluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgaWQ9ImZvcm1hdFhMU1giICBuYW1lPSJkbXNDb25maWd1cmF0aW9uLmZvcm1hdCIgdmFsdWU9IlhMU1giLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZm9ybWF0WExTWCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGNlbAogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFkaW8gcmFkaW8taW5saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBpZD0iZm9ybWF0RE9DWCIgIG5hbWU9ImRtc0NvbmZpZ3VyYXRpb24uZm9ybWF0IiB2YWx1ZT0iRE9DWCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmb3JtYXRET0NYIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdvcmQKICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tZWRpdCBzaG93RG1zQ29uZmlndXJhdGlvbkRsZyBwdWxsLXJpZ2h0IiBzdHlkbGU9ImN1cnNvcjogcG9pbnRlcjtmb250LXNpemU6IDI1cHg7bWFyZ2luLWxlZnQ6IDE5MHB4OyI+PC9zcGFuPgogICAgICAgICAgICAgICAgPGRpdiBpZD0iZm9ybWF0RXJyb3IiIGhpZGRlbj0iaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiIHN0eWxlPSJjb2xvcjogI2ZmMDAwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3QgYXQgbGVhc3Qgb25lIGF0dGFjaG1lbnQgZm9ybWF0IQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9Il9hY3Rpb25fc2VuZFRvRG1zIiB2YWx1ZT0iU2VuZCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgLz4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBkYXRhLWRpc21pc3M9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICBDYW5jZWwKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBpZD0iZG1zQ29uZmlnQ29udGFpbmVyMSI+CjwvZGl2Pgo8L2Zvcm0+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBpZD0iYWN0aXZpdGllcyIgY2xhc3M9InRhYi1wYW5lIGZhZGUgbS1iLTEwIiByb2xlPSJ0YWJwYW5lbCI+CiAgICAgICAgICAgICAgICAgICAgCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2FjdGl2aXR5L2FjdGl2aXRpZXMtYzY3NWVkYWM4ZjNkNzY5YjY4NjUyMjg4MmFiZDE3NmUuanMiID48L3NjcmlwdD4KCjxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgcnhtYWluLWNvbnRhaW5lciByeG1haW4tY29udGFpbmVyLXRvcCI+CiAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciBwYW5lbC1oZWFkaW5nIHB2LXNlYy1oZWFkaW5nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+CiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLXB2cy1hbmFseXNpcyIgaHJlZj0iI3NpZ25hbERpdiIKICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiIHN0eWxlPSJjb2xvcjppbmhlcml0OyI+QWN0aXZpdGllczwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IGljby1tZW51Ij4KCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBleHBvcnRQYW5lbCIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiB0YWJpbmRleD0iMCIgYWNjZXNza2V5PSJ4IiB0aXRsZT0iRXhwb3J0IHRvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZXhwb3J0IGZvbnQtMjQgYmx1ZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCBoaWRkZW4iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGV4cG9ydC10eXBlLWxpc3QiIGlkPSJleHBvcnRUeXBlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9ImZvbnQtMTIiPkV4cG9ydDwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC9hY3Rpdml0eS9leHBvcnRTaWduYWxBY3Rpdml0aWVzUmVwb3J0P291dHB1dEZvcm1hdD1ET0NYJmFtcDtzaWduYWxJZD0xMjE5NjUwIiBjbGFzcz0ibS1yLTMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy93b3JkLWljb24ucG5nIiBjbGFzcz0ibS1yLTEwIiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYXZlIGFzIFdvcmQKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NpZ25hbC9hY3Rpdml0eS9leHBvcnRTaWduYWxBY3Rpdml0aWVzUmVwb3J0P291dHB1dEZvcm1hdD1YTFNYJmFtcDtzaWduYWxJZD0xMjE5NjUwIiBjbGFzcz0ibS1yLTMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9leGNlbC5naWYiIGNsYXNzPSJtLXItMTAiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhdmUgYXMgRXhjZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zaWduYWwvYWN0aXZpdHkvZXhwb3J0U2lnbmFsQWN0aXZpdGllc1JlcG9ydD9vdXRwdXRGb3JtYXQ9UERGJmFtcDtzaWduYWxJZD0xMjE5NjUwIiBjbGFzcz0ibS1yLTMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvc2lnbmFsL2Fzc2V0cy9wZGYtaWNvbi5qcGciIGNsYXNzPSJtLXItMTAiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhdmUgYXMgUERGCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0ic2lnbmFsRGl2IiBjbGFzcz0icGFuZWwtY29sbGFwc2UgcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBjb2xsYXBzZSBpbiIKICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+CiAgICAgICAgPGRpdiBpZD0idmFsaWRhdGVkU2lnbmFsVGFibGVDb250YWluZXIiIGNsYXNzPSJwdi1zY3JvbGxhYmxlLWR0Ij4KICAgICAgICAgICAgPHRhYmxlIGlkPSJzaWduYWxBY3Rpdml0eVRhYmxlIiBjbGFzcz0icm93LWJvcmRlciBob3ZlciIgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iIj5BY3Rpdml0eSBUeXBlPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggd2lkdGg9IjUwJSI+RGVzY3JpcHRpb248L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5QZXJmb3JtZWQgQnk8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5UaW1lc3RhbXA8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InNpZ25hbE5hbWUiIHZhbHVlPSIiLz4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJzaWduYWxJZFBhcnRuZXIiIHZhbHVlPSIxMjE5NjUwIi8+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iY2FzZUNvdW50QXJndXMiIHZhbHVlPSI0NCIvPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InBlY0NvdW50QXJndXMiIHZhbHVlPSIwIi8+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0icGVjQ291bnRFdmRhcyIgdmFsdWU9IjAiLz4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJpc0V2ZGFzRW5hYmxlZCIgdmFsdWU9InRydWUiLz4KCgogICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tbGcgYnRuLWNpcmNsZSBidG4tcHJpbWFyeSBmYWIiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgIGRhdGEtdGFyZ2V0PSIjYXNzZXNtZW50Q29tbWVudE1vZGFsIiB0YWJpbmRleD0iMCIgcm9sZT0iYnV0dG9uIiBhY2Nlc3NrZXk9Im8iPjxpIGNsYXNzPSJmYSBmYS1wbHVzIj48L2k+PC9hPgoKICAgIDxzY3JpcHQ+CgogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgnI2RldGFpbC10YWJzIGEnKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB9KTsKCgogICAgICAgICAgICAkKCJhW2RhdGEtdG9nZ2xlPVwidGFiXCJdIikub24oInNob3duLmJzLnRhYiIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2goZS5jdXJyZW50VGFyZ2V0LmlkKXsKICAgICAgICAgICAgICAgICAgICBjYXNlICdzaWduYWxBY3Rpdml0aWVzJzoKICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZUFjdGl2aXR5VGFibGUuYWpheC5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3NpZ25hbEFjdGl2aXR5VGFibGUnKS5EYXRhVGFibGUoKS5jb2x1bW5zLmFkanVzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5rZWRDb25maWd1cmF0aW9uc1RhYic6CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNsaW5rZWRDb25maWd1cmF0aW9uVGFibGUnKS5EYXRhVGFibGUoKS5jb2x1bW5zLmFkanVzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdhY3Rpb25BbmRXb3JrZmxvdyc6CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhY3Rpb24tdGFibGUnKS5EYXRhVGFibGUoKS5jb2x1bW5zLmFkanVzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjbWVldGluZy10YWJsZScpLkRhdGFUYWJsZSgpLmNvbHVtbnMuYWRqdXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsbGlwc2lzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdlYlVpUG9wSW5pdCgpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdkZXRhaWxzVGFiJzoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3J4VGFibGVBZ2dyZWdhdGVSZXZpZXcnKS5EYXRhVGFibGUoKS5jb2x1bW5zLmFkanVzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjcnhUYWJsZVNpbmdsZVJldmlldycpLkRhdGFUYWJsZSgpLmNvbHVtbnMuYWRqdXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNyeFRhYmxlTGl0ZXJhdHVyZVJldmlldycpLkRhdGFUYWJsZSgpLmNvbHVtbnMuYWRqdXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNyeFRhYmxlQWRIb2NSZXZpZXcnKS5EYXRhVGFibGUoKS5jb2x1bW5zLmFkanVzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgaW5pdGlhbGl6ZUFjdGl2aXR5VGFibGUgPSBzaWduYWwuYWN0aXZpdGllc191dGlscy5pbml0X2FjdGl2aXRpZXNfdGFibGUoIiNzaWduYWxBY3Rpdml0eVRhYmxlIiwgYWN0aXZpdHlVcmwsIGFwcGxpY2F0aW9uTmFtZSk7CgogICAgICAgICAgICAkKCIjYXNzZXNtZW50Q29tbWVudE1vZGFsIikub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgIHVybDogZmV0Y2hBc3Nlc3NtZW50Tm90ZXNVcmwgKyAiP3ZhbGlkYXRlZFNpZ25hbC5pZD0iICsgJCgiI3NpZ25hbElkUGFydG5lciIpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgiI2Fzc2Vzc21lbnROb3RlcyIpLnZhbChyZXN1bHQuY29tbWVudCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCgnI2Fzc2VzbWVudENvbW1lbnRNb2RhbCcpLmZpbmQoIi5hZGQtYXNzZXNzbWVudC1jb21tZW50IikudW5iaW5kKCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyd2YWxpZGF0ZWRTaWduYWwuaWQnOiAkKCIjc2lnbmFsSWRQYXJ0bmVyIikudmFsKCksICdjb21tZW50JzogJCgiI2Fzc2Vzc21lbnROb3RlcyIpLnZhbCgpfSwKICAgICAgICAgICAgICAgICAgICB1cmw6IHNhdmVBc3Nlc3NtZW50Tm90ZXNVcmwsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiNhc3Nlc21lbnRDb21tZW50TW9kYWwiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKCiAgICAgICAgICAgIHZhciBhcHBsaWNhdGlvbk5hbWUgPSAiU2lnbmFsIE1hbmFnZW1lbnQiOwoKCiAgICAgICAgICAgIHZhciBhY3RpdmVUYWIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWN0aXZlVGFiJyk7CgogICAgICAgICAgICBpZiAoYWN0aXZlVGFiICYmIGxhc3RWaXNpdGVkVXJsID09PSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdFZpc2l0ZWRVUkwnKSkgewogICAgICAgICAgICAgICAgJCgnYVtocmVmPSInICsgYWN0aXZlVGFiICsgJyJdJykudGFiKCdzaG93Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjZGV0YWlsLXRhYnMgYScsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVRhYiA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdocmVmJyk7CiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVGFiID09ICcjbm90aWZpY2F0aW9ucycpIHsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgXy5lYWNoKCQoJyNub3RpZmljYXRpb25zIC5kYXRhVGFibGVzX3Njcm9sbEhlYWQnKSwgZnVuY3Rpb24gKGVsZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtV2lkdGggPSAkKGVsZW0pLndpZHRoKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGVtKS5maW5kKCd0YWJsZS5yb3ctYm9yZGVyLmhvdmVyLmRhdGFUYWJsZS5uby1mb290ZXInKS53aWR0aChlbGVtV2lkdGgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIF8uZWFjaCgkKCcjZGV0YWlsLXRhYnMgYScpLCBmdW5jdGlvbiAoZWxlKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJChlbGUpLnBhcmVudCgpLmhhc0NsYXNzKCdhY3RpdmUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLmNzcygnYmFja2dyb3VuZCcsICJzbGF0ZWdyZXkiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5wYXJlbnQoKS5hZGRDbGFzcygncngtbWFpbi10YWInKQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLmNzcygnYmFja2dyb3VuZCcsICJkYXJrZ3JheSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdyeC1tYWluLXRhYicpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgMTApOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICgkKCcjcHJvZHVjdE5hbWUnKVswXS5zY3JvbGxXaWR0aCA+ICQoJyNwcm9kdWN0TmFtZScpLmlubmVyV2lkdGgoKSkgewogICAgICAgICAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPSJwcm9kdWN0TmFtZVRvb2x0aXAiXScpLnRvb2x0aXAoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCQoJyN2YWxpZGF0ZWRTaWduYWxOYW1lJylbMF0uc2Nyb2xsV2lkdGggPiAkKCcjdmFsaWRhdGVkU2lnbmFsTmFtZScpLmlubmVyV2lkdGgoKSkgewogICAgICAgICAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPSJ2YWxpZGF0ZWRTaWduYWxOYW1lVG9vbHRpcCJdJykudG9vbHRpcCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJCgiI2FnZ1N0YXJ0RGF0ZSIpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICB2YXIgYWdnU3RhcnREYXRlID0gbmV3IERhdGUoJCgiI2FnZ1N0YXJ0RGF0ZSIpLnZhbCgpKTsKICAgICAgICAgICAgICAgICQoJyNhZ2dTdGFydERhdGVQaWNrZXInKS5kYXRlcGlja2VyKHsnc2V0RGF0ZSc6IGFnZ1N0YXJ0RGF0ZSwgYWxsb3dQYXN0RGF0ZXM6IHRydWV9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoJyNhZ2dTdGFydERhdGVQaWNrZXInKS5kYXRlcGlja2VyKHtkYXRlOiBudWxsLCBhbGxvd1Bhc3REYXRlczogdHJ1ZX0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkKCIjYWdnRW5kRGF0ZSIpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICB2YXIgYWdnRW5kRGF0ZSA9IG5ldyBEYXRlKCQoIiNhZ2dFbmREYXRlIikudmFsKCkpOwogICAgICAgICAgICAgICAgJCgnI2FnZ0VuZERhdGVQaWNrZXInKS5kYXRlcGlja2VyKHsnc2V0RGF0ZSc6IGFnZ0VuZERhdGUsIGFsbG93UGFzdERhdGVzOiB0cnVlfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCcjYWdnRW5kRGF0ZVBpY2tlcicpLmRhdGVwaWNrZXIoe2RhdGU6IG51bGwsIGFsbG93UGFzdERhdGVzOiB0cnVlfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCQoIiNsYXN0RGVjaXNpb25EYXRlIikudmFsKCkpIHsKICAgICAgICAgICAgICAgIHZhciBsYXN0RGVjaXNpb25EYXRlID0gbmV3IERhdGUoJCgiI2xhc3REZWNpc2lvbkRhdGUiKS52YWwoKSk7CiAgICAgICAgICAgICAgICAkKCcjbGFzdERlY2lzaW9uRGF0ZVBpY2tlcicpLmRhdGVwaWNrZXIoeydzZXREYXRlJzogbGFzdERlY2lzaW9uRGF0ZSwgYWxsb3dQYXN0RGF0ZXM6IHRydWV9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoJyNsYXN0RGVjaXNpb25EYXRlUGlja2VyJykuZGF0ZXBpY2tlcih7ZGF0ZTogbnVsbCwgYWxsb3dQYXN0RGF0ZXM6IHRydWV9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJCgiI2hhRGF0ZUNsb3NlZCIpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICB2YXIgaGFEYXRlQ2xvc2VkID0gbmV3IERhdGUoJCgiI2hhRGF0ZUNsb3NlZCIpLnZhbCgpKTsKICAgICAgICAgICAgICAgICQoJyNoYURhdGVDbG9zZWREYXRlUGlja2VyJykuZGF0ZXBpY2tlcih7J3NldERhdGUnOiBoYURhdGVDbG9zZWQsIGFsbG93UGFzdERhdGVzOiB0cnVlfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCcjaGFEYXRlQ2xvc2VkRGF0ZVBpY2tlcicpLmRhdGVwaWNrZXIoe2RhdGU6IG51bGwsIGFsbG93UGFzdERhdGVzOiB0cnVlfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJChkb2N1bWVudCkuZmluZCgnLnNlbGVjdGxpc3Qtc2l6ZXInKS5yZW1vdmUoKTsKICAgICAgICB9KTsKICAgICAgICB2YXIgc2F2ZUFzc2Vzc21lbnROb3RlcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGRhdGE6IHsndmFsaWRhdGVkU2lnbmFsLmlkJzogJCgiI3NpZ25hbElkUGFydG5lciIpLnZhbCgpLCAnY29tbWVudCc6ICQoIiNhc3Nlc3NtZW50Tm90ZXMiKS52YWwoKX0sCiAgICAgICAgICAgICAgICB1cmw6IHNhdmVBc3Nlc3NtZW50Tm90ZXNVcmwsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNjb21tZW50c01vZGFsIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgPC9zY3JpcHQ+CgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InBhcnRuZXJNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCIgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1MHB4O21hcmdpbi1yaWdodDogNTBweCI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtb2RhbC10aXRsZSI+U2hhcmUgV2l0aCBQYXJ0bmVyczwvbGFiZWw+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiID4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhcnRuZXItY29udGFpbmVyIiBjbGFzcz0ibGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSIgaWQ9InBhcnRuZXJUYWJsZSIgc3R5bGU9IndpZHRoOiAxMDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Qcm9kdWN0IE5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBhcnRuZXIgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGFydG5lciBDb250YWN0PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5FbWFpbCBDb250YWN0PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db250YWN0aW5nIEVudGl0eTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGlkPSJjYXNlSGlzdG9yeU1vZGFsVGFibGVCb2R5IiBjbGFzcz0idGFibGVNb2RhbEJvZHkiPjwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHByZXZpb3VzLWZvbGxvd1VwIiBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiBpbmhlcml0Ij4KICAgICAgICAgICAgICAgICAgICBDYW5jZWwKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBzdHlsZT0iZmxvYXQ6IHJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICBTZW5kCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InNpZ25hbEhpc3RvcnlNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCIgPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibW9kYWwtdGl0bGUiPlNpZ25hbCBIaXN0b3J5PC9sYWJlbD4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSIgPgogICAgICAgICAgICAgICAgPGRpdiBpZD0icGFydG5lci1jb250YWluZXIiIGNsYXNzPSJsaXN0Ij4KCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSIgaWQ9InNpZ25hbEhpc3RvcnlNb2RhbFRhYmxlIiBzdHlsZT0id2lkdGg6IDEwMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ibm93cmFwLXRleHQiPkRpc3Bvc2l0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ibm93cmFwLXRleHQiPlByaW9yaXR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ibm93cmFwLXRleHQiPkFzc2lnbmVkIFRvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ibm93cmFwLXRleHQiPlRpbWUgU3RhbXA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJub3dyYXAtdGV4dCI+UGVyZm9ybWVkIEJ5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ibm93cmFwLXRleHQiPkp1c3RpZmljYXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBpZD0ic2lnbmFsSGlzdG9yeU1vZGFsVGFibGVCb2R5IiBjbGFzcz0idGFibGVNb2RhbEJvZHkiPjwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBwcmV2aW91cy1mb2xsb3dVcCIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgQ2FuY2VsCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBtb2RhbC14bGciIGlkPSJzaG93LWV2ZGFzLWNoYXJ0LW1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIiByb2xlPSJkb2N1bWVudCIgc3R5bGU9IndpZHRoOiAxMjAwcHgiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1vZGFsLXRpdGxlIj5UcmVuZCBDaGFydHM8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiIHN0eWxlPSJoZWlnaHQ6IDkwMHB4OyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZXZkYXMtY291bnQtYnktc3RhdHVzIiBjbGFzcz0iY2hhcnQtY29udGFpbmVyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InRyZW5kLWRpdiIgc3R5bGU9IndpZHRoOiAxMDAlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbS10LTIwIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZGFzLXNjb3Jlcy1ieS1zdGF0dXMiIGNsYXNzPSJjaGFydC1jb250YWluZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2NvcmVzLWRpdiIgc3R5bGU9IndpZHRoOiAxMDAlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbnMgIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24gYnRuIGJ0bi1kZWZhdWx0IiBkYXRhLWRpc21pc3M9Im1vZGFsIiBpZD0iY2FuY2VsLWJ0Ij5DbG9zZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InNpZ25hbC1kaXNzb2NpYXRlLW1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIKICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtb2RhbC10aXRsZSI+U2lnbmFsIERpc3NvY2lhdGlvbjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2PkNoYW5naW5nIERpc3Bvc2l0aW9uIHdpbGwgZGlzc29jaWF0ZSB0aGUgY2FzZSBmcm9tIGFsbCB0aGUgc2lnbmFscy4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNvbnRpbnVlPzwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zICI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uIGJ0biBidG4tcHJpbWFyeSIgaWQ9ImNoYW5nZS1idCI+Q2hhbmdlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uIGJ0bi1kZWZhdWx0IGJ0biAiIGlkPSJjYW5jZWwtYnQiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImFzc2VzbWVudENvbW1lbnRNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCIgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1MHB4O21hcmdpbi1yaWdodDogNTBweCI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtb2RhbC10aXRsZSI+QXNzZXNzbWVudCBOb3RlczwvbGFiZWw+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCB0ZXh0YXJlYS1leHQiPgogICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSByb3dzPSI4IiBzdHlsZT0id2lkdGg6IDEwMCU7IiBpZD0iYXNzZXNzbWVudE5vdGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIHlvdXIgbm90ZXMgaGVyZS4uLiI+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBhZGQtYXNzZXNzbWVudC1jb21tZW50ICIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgQWRkCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBwcmV2aW91cy1mb2xsb3dVcCIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgQ2FuY2VsCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iY2FzZS1zZXJpZXMtbW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iIj5TYXZlIENhc2UgU2VyaWVzPC9oND4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkNhc2UgU2VyaWVzIE5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImNhc2Utc2VyaWVzLW5hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9ucyAiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHNhdmUtY2FzZS1zZXJpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICBTYXZlCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgc2F2ZS1jYXNlLXNlcmllcy1jbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0iZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIgY2xhc3M9ImRpc3Bvc2l0aW9uIHBvcG92ZXIganVzdGlmaWNhdGlvbiBkeW4iPiAKICAgIDxkaXYgY2xhc3M9ImFycm93Ij48L2Rpdj4KICAgIDxoMyBjbGFzcz0icG9wb3Zlci10aXRsZSI+PC9oMz4KCiAgICA8ZGl2IGNsYXNzPSJwb3BvdmVyLWNvbnRlbnQiPgogICAgICAgIDx1bCBjbGFzcz0idGV4dC1saXN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+CgogICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iU2lnbmFsIGNvbmZpcm1hdGlvbiBiYXNlZCBvbiBldmFsdWF0aW9uIG9mIGF2YWlsYWJsZSBldmlkZW5jZSBhbmQgZGF0YSIKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VsZWN0SnVzdGlmaWNhdGlvbiB0ZXh0Ij5TaWduYWwgY29uZmlybWF0aW9uIGJhc2VkIG9uIGV2YWx1YXRpb24gb2YgYXZhaWxhYmxlIGV2aWRlbmNlIGFuZCBkYXRhPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iRWRpdCIgY2xhc3M9ImJ0bi1lZGl0Ij48aSBjbGFzcz0ibWRpIG1kaS1wZW5jaWwgZWRpdEljb24iPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT4KCiAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJGdXJ0aGVyIGV2YWx1YXRpb24gcmVxdWlyZWQgZm9yIGN1cnJlbnQgc2FmZXR5IG9ic2VydmF0aW9uL3NpZ25hbCIKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VsZWN0SnVzdGlmaWNhdGlvbiB0ZXh0Ij5GdXJ0aGVyIGV2YWx1YXRpb24gcmVxdWlyZWQgZm9yIGN1cnJlbnQgc2FmZXR5IG9ic2VydmF0aW9uL3NpZ25hbDwvYT4KICAgICAgICAgICAgICAgICAgICA8YSB0YWJpbmRleD0iMCIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IkVkaXQiIGNsYXNzPSJidG4tZWRpdCI+PGkgY2xhc3M9Im1kaSBtZGktcGVuY2lsIGVkaXRJY29uIj48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+CgogICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVxdWlyZXMgZnVydGhlciBjb21tdW5pY2F0aW9uIGFuZCBhY3Rpb24gZm9yIGN1cnJlbnQgc2lnbmFsL3NhZmV0eSBvYnNlcnZhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VsZWN0SnVzdGlmaWNhdGlvbiB0ZXh0Ij5SZXF1aXJlcyBmdXJ0aGVyIGNvbW11bmljYXRpb24gYW5kIGFjdGlvbiBmb3IgY3VycmVudCBzaWduYWwvc2FmZXR5IG9ic2VydmF0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iRWRpdCIgY2xhc3M9ImJ0bi1lZGl0Ij48aSBjbGFzcz0ibWRpIG1kaS1wZW5jaWwgZWRpdEljb24iPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT4KCiAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJGdXJ0aGVyIGV2YWx1YXRpb24gZm9yIGN1cnJlbnQgc2FmZXR5IG9ic2VydmF0aW9uL3NpZ25hbCBpcyBub3QgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlbGVjdEp1c3RpZmljYXRpb24gdGV4dCI+RnVydGhlciBldmFsdWF0aW9uIGZvciBjdXJyZW50IHNhZmV0eSBvYnNlcnZhdGlvbi9zaWduYWwgaXMgbm90IHJlcXVpcmVkPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iRWRpdCIgY2xhc3M9ImJ0bi1lZGl0Ij48aSBjbGFzcz0ibWRpIG1kaS1wZW5jaWwgZWRpdEljb24iPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGRpdiBpZD0iZWRpdC1ib3giPgogICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXRlZEp1c3RpZmljYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJFZGl0IEp1c3RpZmljYXRpb24iIG1heGxlbmd0aD0iMjU1Ij48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz0iY29uZmlybS1vcHRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iU2F2ZSI+PGkgY2xhc3M9Im1kaSBtZGktY2hlY2tib3gtbWFya2VkIGdyZWVuLTEiIGlkPSJjb25maXJtSnVzdGlmaWNhdGlvbiI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJDbG9zZSI+PGkgY2xhc3M9Im1kaSBtZGktY2xvc2UtYm94IHJlZC0xIiBpZD0iY2FuY2VsSnVzdGlmaWNhdGlvbiI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L29sPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8YSB0YWJpbmRleD0iMCIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IkFkZCBuZXcgRGlzcG9zaXRpb24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGlkPSJhZGROZXdKdXN0aWZpY2F0aW9uIj5BZGQgTmV3PC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGlkPSJwcmlvcml0eUp1c3RpZmljYXRpb25Qb3BvdmVyIiBjbGFzcz0iZGlzcG9zaXRpb24gcG9wb3ZlciBwcmlvcml0eSI+CiAgICA8ZGl2IGNsYXNzPSJhcnJvdyI+PC9kaXY+CgogICAgPGgzIGNsYXNzPSJwb3BvdmVyLXRpdGxlIj48L2gzPgoKICAgIDxkaXYgY2xhc3M9InBvcG92ZXItY29udGVudCI+CiAgICAgICAgPHVsIGNsYXNzPSJ0ZXh0LWxpc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT4KCiAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJQcmlvcml0eSBkb3duZ3JhZGVkIGJhc2VkIG9uIGF2YWlsYWJsZSBldmlkZW5jZXMiCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlbGVjdEp1c3RpZmljYXRpb24gdGV4dCI+UHJpb3JpdHkgZG93bmdyYWRlZCBiYXNlZCBvbiBhdmFpbGFibGUgZXZpZGVuY2VzPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iRWRpdCIgY2xhc3M9ImJ0bi1lZGl0Ij48aSBjbGFzcz0ibWRpIG1kaS1wZW5jaWwgZWRpdEljb24iPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT4KCiAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJQcmlvcml0eSB1cGdyYWRlZCBiYXNlZCBvbiBhdmFpbGFibGUgZXZpZGVuY2VzIgogICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWxlY3RKdXN0aWZpY2F0aW9uIHRleHQiPlByaW9yaXR5IHVwZ3JhZGVkIGJhc2VkIG9uIGF2YWlsYWJsZSBldmlkZW5jZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJFZGl0IiBjbGFzcz0iYnRuLWVkaXQiPjxpIGNsYXNzPSJtZGkgbWRpLXBlbmNpbCBlZGl0SWNvbiI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJlZGl0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdGVkSnVzdGlmaWNhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkVkaXQgSnVzdGlmaWNhdGlvbiIgbWF4bGVuZ3RoPSIyNTUiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPSJjb25maXJtLW9wdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgdGFiaW5kZXg9IjAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJTYXZlIj48aSBjbGFzcz0ibWRpIG1kaS1jaGVja2JveC1tYXJrZWQgZ3JlZW4tMSIgaWQ9ImNvbmZpcm1KdXN0aWZpY2F0aW9uIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSB0YWJpbmRleD0iMCIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IkNsb3NlIj48aSBjbGFzcz0ibWRpIG1kaS1jbG9zZS1ib3ggcmVkLTEiIGlkPSJjYW5jZWxKdXN0aWZpY2F0aW9uIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iQWRkIG5ldyBEaXNwb3NpdGlvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaWQ9ImFkZE5ld0p1c3RpZmljYXRpb24iPkFkZCBOZXc8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDxkaXYgaWQ9InByaW9yaXR5UG9wb3ZlciIgY2xhc3M9InBvcG92ZXIgcHJpb3JpdHktaWNvbnMiPgogICAgPGRpdiBjbGFzcz0iYXJyb3ciPjwvZGl2PgogICAgPGRpdiBjbGFzcz0icG9wb3Zlci1jb250ZW50IHByaW9yaXR5LWljb24tbGlzdCI+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGRhdGEtdGFyZ2V0PSIjcHJpb3JpdHlKdXN0aWZpY2F0aW9uUG9wb3ZlciIgZGF0YS1pZD0iNjI4MCIgcm9sZT0iYnV0dG9uIiBjbGFzcz0iY2hhbmdlVG9Qcmlvcml0eSBmb250LTI0IiBkYXRhLXRvZ2dsZT0ibW9kYWwtcG9wb3ZlciIKICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJib3R0b20iIGRhdGEtcHJpb3JpdHk9IlVyZ2VudCIgdGl0bGU9IlVyZ2VudCIgZGF0YS1kYXlzPSIxNSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktYWxwaGEtdS1jaXJjbGUgcmVkLTEiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBkYXRhLXRhcmdldD0iI3ByaW9yaXR5SnVzdGlmaWNhdGlvblBvcG92ZXIiIGRhdGEtaWQ9IjYyOTAiIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImNoYW5nZVRvUHJpb3JpdHkgZm9udC0yNCIgZGF0YS10b2dnbGU9Im1vZGFsLXBvcG92ZXIiCiAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYm90dG9tIiBkYXRhLXByaW9yaXR5PSJIaWdoIiB0aXRsZT0iSGlnaCIgZGF0YS1kYXlzPSIzMCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktYWxwaGEtaC1jaXJjbGUgeWVsbG93LTEiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBkYXRhLXRhcmdldD0iI3ByaW9yaXR5SnVzdGlmaWNhdGlvblBvcG92ZXIiIGRhdGEtaWQ9IjYzMDAiIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImNoYW5nZVRvUHJpb3JpdHkgZm9udC0yNCIgZGF0YS10b2dnbGU9Im1vZGFsLXBvcG92ZXIiCiAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYm90dG9tIiBkYXRhLXByaW9yaXR5PSJNZWRpdW0iIHRpdGxlPSJNZWRpdW0iIGRhdGEtZGF5cz0iOTAiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWFscGhhLW0tY2lyY2xlIGJsdWUtMSI+PC9pPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGEgdGFiaW5kZXg9IjAiIGRhdGEtdGFyZ2V0PSIjcHJpb3JpdHlKdXN0aWZpY2F0aW9uUG9wb3ZlciIgZGF0YS1pZD0iNjMxMCIgcm9sZT0iYnV0dG9uIiBjbGFzcz0iY2hhbmdlVG9Qcmlvcml0eSBmb250LTI0IiBkYXRhLXRvZ2dsZT0ibW9kYWwtcG9wb3ZlciIKICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJib3R0b20iIGRhdGEtcHJpb3JpdHk9IkxvdyIgdGl0bGU9IkxvdyIgZGF0YS1kYXlzPSIxMzUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWFscGhhLWwtY2lyY2xlIGdyZWVuLTEiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIHRhYmluZGV4PSIwIiBkYXRhLXRhcmdldD0iI3ByaW9yaXR5SnVzdGlmaWNhdGlvblBvcG92ZXIiIGRhdGEtaWQ9IjYzMjAiIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImNoYW5nZVRvUHJpb3JpdHkgZm9udC0yNCIgZGF0YS10b2dnbGU9Im1vZGFsLXBvcG92ZXIiCiAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYm90dG9tIiBkYXRhLXByaW9yaXR5PSJUbyBiZSBQcmlvcml0aXplZCIgdGl0bGU9IlRvIGJlIFByaW9yaXRpemVkIiBkYXRhLWRheXM9IjMwIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1hbHBoYS10LWNpcmNsZSBncmV5LTEiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCgogICAgICAgIAogICAgPC9kaXY+CjwvZGl2PgoKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL3ZhbGlkYXRlZF9zaWduYWwvcHJldl9hc3Nlc3NtZW50LTc3ZTA2ZDI5NWRhYTgzN2E3Yjg4ZjczZGZiNzc3NjgxLmpzIiA+PC9zY3JpcHQ+CiAgICAKPGRpdiBjbGFzcz0ibW9kYWwgbW9kYWwteGxnIGZhZGUgbW9kYWwtd2lkZSIgaWQ9ImV2ZGFzLWNhc2UtZHJpbGwtZG93bi1tb2RhbCI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtb2RhbC10aXRsZSI+Q2FzZXMgRHJpbGwgRG93bjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBpZD0iZXZkYXMtZHJpbGwtZG93bi10YWJsZS1jb250YWluZXIiIGNsYXNzPSJwYW5lbC1ib2R5Ij48L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIGNvcHlBbmRQYXN0ZU1vZGFsIiBpZD0iY29weUFuZFBhc3RlRGljTW9kYWwiIHRhYmluZGV4PSItMSIgZGF0YS1iYWNrZHJvcD0ic3RhdGljIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0iQ29weS9QYXN0ZSBEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBvbmNsaWNrPSdjbG9zZUFsbENvcHlQYXN0ZU1vZGFscygpOycgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9Im15TW9kYWxMYWJlbCI+UGFzdGUgVmFsdWVzOjwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5EZWxpbWl0ZXJzOjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyIgaWQ9ImRlbGltaXRlci1vcHRpb25zIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWNvbCIgdGl0bGU9Ik5vIGRlbGltaXRlcnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im5vLWJvbGQgYWRkLWN1cnNvciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9ImRlbGltaXRlciIgdmFsdWU9Im5vbmUiIGNoZWNrZWQ9ImNoZWNrZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWNvbCIgdGl0bGU9ImNvbW1hIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJuby1ib2xkIGFkZC1jdXJzb3IiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJkZWxpbWl0ZXIiIHZhbHVlPSIsIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tYQogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tY29sIiB0aXRsZT0ic2VtaS1jb2x1bW4iPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im5vLWJvbGQgYWRkLWN1cnNvciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9ImRlbGltaXRlciIgdmFsdWU9IjsiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbWktQ29sb24KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWNvbCIgdGl0bGU9InNwYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJuby1ib2xkIGFkZC1jdXJzb3IiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJkZWxpbWl0ZXIiIHZhbHVlPSIgIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTcGFjZQogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tY29sIiB0aXRsZT0ibmV3LWxpbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im5vLWJvbGQgYWRkLWN1cnNvciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9ImRlbGltaXRlciIgdmFsdWU9IlxuIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXctTGluZQogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tY29sIiB0aXRsZT0iT3RoZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJuby1ib2xkIGFkZC1jdXJzb3IiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJkZWxpbWl0ZXIiIHZhbHVlPSJvdGhlcnMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE90aGVycwogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJjX25fcF9vdGhlcl9kZWxpbWl0ZXIiID4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImNvcHlQYXN0ZUNvbnRlbnQiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgY2FuY2VsIiBvbmNsaWNrPSdjbG9zZUFsbENvcHlQYXN0ZU1vZGFscygpOyc+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyBjb25maXJtLXBhc3RlLWRpYy12YWx1ZXMiCiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9J2Nsb3NlQWxsQ29weVBhc3RlTW9kYWxzKCk7Jz5Db25maXJtPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iZWRpdGFibGUiIHZhbHVlPSJ0cnVlIj4KICAgICAgICAKPGxpbmsgcmVsPSJpbXBvcnQiIGhyZWY9Ii9zaWduYWwvYXNzZXRzL3BsdWdpbi9kaWN0aW9uYXJ5L2NvbHVtbi12aWV3LTY0YzAwODVjNjA4NDY0ZjRhNmY2NmUzM2Q5ODVhZTI3Lmh0bWwiLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc2lnbmFsL2Fzc2V0cy9wbHVnaW4vZGljdGlvbmFyeS9kaWN0aW9uYXJpZXMtYTM4OTk0MDQyOGUzN2E3ZDkxNTZhNmJiMWUyNWUyNzcuY3NzIi8+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3BsdWdpbi9kaWN0aW9uYXJ5L2RpY3Rpb25hcmllcy0yOGJkYjI4Y2NjNzllMWI1NGNmYjljMmE4MjljZTU2MS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoKICAgICAgICB2YXIgZ2V0U21xRHJvcGRvd25MaXN0VXJsID0gIlx1MDAyZnNpZ25hbFx1MDAyZmV2ZW50RGljdGlvbmFyeVx1MDAyZmdldFNtcURyb3Bkb3duTGlzdCI7CiAgICAgICAgdmFyIG9wdGlvbnMgPSB7IHNwaW5uZXJQYXRoOiJcdTAwMmZzaWduYWxcdTAwMmZhc3NldHNcdTAwMmZzZWxlY3QyLXNwaW5uZXItN2I5Nzc2MDc2ZDVmY2VlZjQ5OTNiNTVjOTM4M2RlZGQuZ2lmIiB9OwogICAgICAgIG9wdGlvbnMuc3R1ZHkgPSB7CiAgICAgICAgICAgIGxldmVsTmFtZXM6ICJQcm9qZWN0IE51bWJlclx1MDAyY1N0dWR5IE51bWJlclx1MDAyY0NlbnRlciIsCiAgICAgICAgICAgIGRpY0NvbHVtbkNvdW50OiAyLAogICAgICAgICAgICBzZWxlY3RVcmw6ICJcdTAwMmZzaWduYWxcdTAwMmZzdHVkeURpY3Rpb25hcnlcdTAwMmZnZXRTZWxlY3RlZFN0dWR5IiwKICAgICAgICAgICAgcHJlTGV2ZWxQYXJlbnRzVXJsOiAiXHUwMDJmc2lnbmFsXHUwMDJmc3R1ZHlEaWN0aW9uYXJ5XHUwMDJmZ2V0UHJlTGV2ZWxTdHVkeVBhcmVudHMiLAogICAgICAgICAgICBzZWFyY2hVcmw6ICJcdTAwMmZzaWduYWxcdTAwMmZzdHVkeURpY3Rpb25hcnlcdTAwMmZzZWFyY2hTdHVkaWVzIgogICAgICAgIH07CgogICAgICAgICBvcHRpb25zLmV2ZW50ID0gewogICAgICAgICAgICBsZXZlbE5hbWVzOiAiU09DXHUwMDJjSExHVFx1MDAyY0hMVFx1MDAyY1BUXHUwMDJjTExUXHUwMDJjU3lub255bXNcdTAwMmNTTVEgQnJvYWRcdTAwMmNTTVEgTmFycm93IiwKICAgICAgICAgICAgZGljQ29sdW1uQ291bnQ6IDYsCiAgICAgICAgICAgIHNlbGVjdFVybDogIlx1MDAyZnNpZ25hbFx1MDAyZmV2ZW50RGljdGlvbmFyeVx1MDAyZmdldFNlbGVjdGVkRXZlbnQiLAogICAgICAgICAgICBwcmVMZXZlbFBhcmVudHNVcmw6ICJcdTAwMmZzaWduYWxcdTAwMmZldmVudERpY3Rpb25hcnlcdTAwMmZnZXRQcmVMZXZlbEV2ZW50UGFyZW50cyIsCiAgICAgICAgICAgIHNlYXJjaFVybDogIlx1MDAyZnNpZ25hbFx1MDAyZmV2ZW50RGljdGlvbmFyeVx1MDAyZnNlYXJjaEV2ZW50cyIKICAgICAgICB9OwoKICAgICAgICBvcHRpb25zLnByb2R1Y3QgPSB7CiAgICAgICAgICAgIGxldmVsTmFtZXM6ICJUaGVyYXBldXRpYyBkcnVnIGNsYXNzXHUwMDJjQWN0aXZlIE1vaWV0eVx1MDAyY1Byb2R1Y3QgQWN0aXZlIE1vaWV0eVx1MDAyY0FjdGl2ZSBJbmdyZWRpZW50XHUwMDJjUHJvZHVjdCBBY3RpdmUgSW5ncmVkaWVudFx1MDAyY1Byb2R1Y3QgTmFtZVx1MDAyY0FwcGxpY2F0aW9uIE51bWJlclx1MDAyY1VzZXIgQXNzaWdubWVudFx1MDAyY0lORCBSZXZpZXdlciIsCiAgICAgICAgICAgIGRpY0NvbHVtbkNvdW50OiA5LAogICAgICAgICAgICBzZWxlY3RVcmw6ICJcdTAwMmZzaWduYWxcdTAwMmZwcm9kdWN0RGljdGlvbmFyeVx1MDAyZmdldFNlbGVjdGVkSXRlbSIsCiAgICAgICAgICAgIHByZUxldmVsUGFyZW50c1VybDogIlx1MDAyZnNpZ25hbFx1MDAyZnByb2R1Y3REaWN0aW9uYXJ5XHUwMDJmZ2V0UHJlTGV2ZWxQcm9kdWN0UGFyZW50cyIsCiAgICAgICAgICAgIHNlYXJjaFVybDogIlx1MDAyZnNpZ25hbFx1MDAyZnByb2R1Y3REaWN0aW9uYXJ5XHUwMDJmc2VhcmNoVmlld3MiCiAgICAgICAgfTsKICAgICAgICBpbnRpYWxpemVEaWN0aW9uYXJpZXMob3B0aW9ucyk7Cg0KPC9zY3JpcHQ+DQoKCjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJldmVudE1vZGFsIiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIgogICAgIGFyaWEtbGFiZWxsZWRieT0iZXZlbnREaWN0aW9uYXJ5TGFiZWwiCiAgICAgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJldmVudERpY3Rpb25hcnlMYWJlbCI+RXZlbnQgRGljdGlvbmFyeTwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIHBhZGRpbmctbWQtYm90dG9tIj4KICAgICAgICBTTVEKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTExIHBhZGRpbmctbWQtYm90dG9tIj4KICAgICAgICAKICAgICAgICAgICAgPHNlbGVjdCBpZD0iZXZlbnRTbXFTZWxlY3QiIGNsYXNzPSJldmVudFNtcSBmb3JtLWNvbnRyb2wiIHN0eWxlPSJ3aWR0aDogMTAwJSI+PC9zZWxlY3Q+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTUgcGFkZGluZy1tZC1ib3R0b20iPgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfZXZlbnRfZXhhY3RTZWFyY2giIC8+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJldmVudF9leGFjdFNlYXJjaCIgaWQ9ImV2ZW50X2V4YWN0U2VhcmNoIiAgLz4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iZXZlbnRfZXhhY3RTZWFyY2giPgogICAgICAgICAgICAgICAgRXhhY3QgU2VhcmNoCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5TT0M8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iMSIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD5ITEdUPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICA8aW5wdXQgbGV2ZWw9IjIiIGNsYXNzPSJzZWFyY2hFdmVudHMgZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0Ij4KCiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIj4KICAgICAgICA8bGFiZWw+SExUPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIGhpZGRlbiIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgPGlucHV0IGxldmVsPSIzIiBjbGFzcz0ic2VhcmNoRXZlbnRzIGZvcm0tY29udHJvbCIgdHlwZT0idGV4dCI+CgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMiI+CiAgICAgICAgPGxhYmVsPlBUPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICA8aW5wdXQgbGV2ZWw9IjQiIGNsYXNzPSJzZWFyY2hFdmVudHMgZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0Ij4KCiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIj4KICAgICAgICA8bGFiZWw+TExUPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICA8aW5wdXQgbGV2ZWw9IjUiIGNsYXNzPSJzZWFyY2hFdmVudHMgZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0Ij4KCiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIj4KICAgICAgICA8bGFiZWw+U3lub255bXM8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iNiIgY2xhc3M9InNlYXJjaEV2ZW50cyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgIAogICAgICAgIDxjb2x1bW4tdmlldyBzdHlsZT0iaGVpZ2h0OiAyMDBweDsiIGlkPSJjb2x1bW5WaWV3IiBvbmRhdGE9InNvdXJjZSIgcGF0aD0iMCIgZGljdGlvbmFyeV90eXBlPSJldmVudCIgY29sdW1uc19uYW1lPSJTT0MsSExHVCxITFQsUFQsTExULFN5bm9ueW1zIiA+PC9jb2x1bW4tdmlldz4KICAgIDwvZGl2Pgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJyb3cgc2VsZWN0ZWRFdmVudERpY3Rpb25hcnlWYWx1ZSI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgPGxhYmVsPlNlbGVjdGVkOjwvbGFiZWw+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMCI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPGxhYmVsPlNPQzwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWUgbGV2ZWwxIHVsU09DIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgICAgICAgICA8bGFiZWw+SExHVDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWUgbGV2ZWwyIHVsSExHVCI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPGxhYmVsPkhMVDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWUgbGV2ZWwzIHVsSExUIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgICAgICAgICA8bGFiZWw+UFQ8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTExIGV2ZW50RGljdGlvbmFyeVZhbHVlIGxldmVsNCB1bFBUIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgICAgICAgICA8bGFiZWw+TExUPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMSBldmVudERpY3Rpb25hcnlWYWx1ZSBsZXZlbDUgdWxMTFQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5TeW5vbnltczwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTEgZXZlbnREaWN0aW9uYXJ5VmFsdWUgbGV2ZWw2IHVsU3lub255bXMiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIj4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDBweCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+U01RIEJyb2FkPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEwIGV2ZW50RGljdGlvbmFyeVZhbHVlIGxldmVsNyB1bFNtcWIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIj4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDBweCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+U01RIE5hcnJvdzwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMCBldmVudERpY3Rpb25hcnlWYWx1ZSBsZXZlbDggdWxTbXFuIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+Cgo8c3R5bGU+Ci5ldmVudERpY3Rpb25hcnlDb2xXaWR0aCB7CiAgICB3aWR0aDogY2FsYygxMDAlLzYpOwp9Cjwvc3R5bGU+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVycm9yTWVzc2FnZSIgaGlkZGVuPSJoaWRkZW4iPkNhbm5vdCBhZGQgdG8gZGlmZmVyZW50IGxldmVscy48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkaW5nIiBzdHlsZT0iZGlzcGxheTpub25lIj48aW1nIHNyYz0iL3NpZ25hbC9hc3NldHMvc2VsZWN0Mi1zcGlubmVyLTdiOTc3NjA3NmQ1ZmNlZWY0OTkzYjU1YzkzODNkZWRkLmdpZiIgaGVpZ2h0PSIxNiIgd2lkdGg9IjE2Ii8+PC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGNsZWFyRXZlbnRWYWx1ZXMiIGFjY2Vzc2tleT0iKiI+Q2xlYXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGFkZEV2ZW50VmFsdWVzIiBhY2Nlc3NrZXk9IiUiPkFkZDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYWRkQWxsRXZlbnRWYWx1ZXMiIGFjY2Vzc2tleT0iXiI+QWRkIEFsbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgYWRkQWxsRXZlbnRzIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhY2Nlc3NrZXk9IiYiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InByb2R1Y3RNb2RhbCIgZGF0YS1iYWNrZHJvcD0ic3RhdGljIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIKICAgICBhcmlhLWxhYmVsbGVkYnk9InByb2R1Y3REaWN0aW9uYXJ5TGFiZWwiCiAgICAgYXJpYS1oaWRkZW49InRydWUiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJwcm9kdWN0RGljdGlvbmFyeUxhYmVsIj5Qcm9kdWN0IERpY3Rpb25hcnk8L2g0PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgCgo8ZGl2IGNsYXNzPSJzY3JvbGxhYmxlVmlldzEgcC1iLTEwIj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5PVEM/PC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTAiIG5hbWU9ImZpbHRlcjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwMCI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+RG9zYWdlIEZvcm11bGF0aW9uPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTEiIG5hbWU9ImZpbHRlcjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwMSI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+TWFya2V0aW5nIENhdGVnb3J5PC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTIiIG5hbWU9ImZpbHRlcjIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwMiI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+TWFya2V0aW5nIFN0YXR1czwvbGFiZWw+CgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbGV2ZWw9IjEzIiBuYW1lPSJmaWx0ZXIzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VhcmNoUHJvZHVjdHMgYWRkaXRpb25hbENyaXRlcmlhIGRpY3Rpb25hcnktc2VsZWN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvc2lnbmFsL3Byb2R1Y3REaWN0aW9uYXJ5L2dldEZpbHRlckxpc3Q/bmFtZT1MbVByb2REaWNGaWx0ZXIxMDMiPjwvc2VsZWN0PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPk1hbnVmYWN0dXJlciBMYWJlbGVyIE5hbWU8L2xhYmVsPgoKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGxldmVsPSIxNCIgbmFtZT0iZmlsdGVyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIHNlYXJjaFByb2R1Y3RzIGFkZGl0aW9uYWxDcml0ZXJpYSBkaWN0aW9uYXJ5LXNlbGVjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL3NpZ25hbC9wcm9kdWN0RGljdGlvbmFyeS9nZXRGaWx0ZXJMaXN0P25hbWU9TG1Qcm9kRGljRmlsdGVyMTA0Ij48L3NlbGVjdD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5OZXcgQmlvbG9naWNzIChOQik8L2xhYmVsPgoKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGxldmVsPSIxNSIgbmFtZT0iZmlsdGVyNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIHNlYXJjaFByb2R1Y3RzIGFkZGl0aW9uYWxDcml0ZXJpYSBkaWN0aW9uYXJ5LXNlbGVjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL3NpZ25hbC9wcm9kdWN0RGljdGlvbmFyeS9nZXRGaWx0ZXJMaXN0P25hbWU9TG1Qcm9kRGljRmlsdGVyMTA1Ij48L3NlbGVjdD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5TeW5vbnltPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTYiIG5hbWU9ImZpbHRlcjYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwNiI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+U2VuZGVyIE9yZ2FuaXphdGlvbiBOYW1lPC9sYWJlbD4KCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBsZXZlbD0iMTciIG5hbWU9ImZpbHRlcjciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2hQcm9kdWN0cyBhZGRpdGlvbmFsQ3JpdGVyaWEgZGljdGlvbmFyeS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9zaWduYWwvcHJvZHVjdERpY3Rpb25hcnkvZ2V0RmlsdGVyTGlzdD9uYW1lPUxtUHJvZERpY0ZpbHRlcjEwNyI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAKPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTUgcGFkZGluZy1tZC1ib3R0b20iPgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfcHJvZHVjdF9leGFjdFNlYXJjaCIgLz48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InByb2R1Y3RfZXhhY3RTZWFyY2giIGlkPSJwcm9kdWN0X2V4YWN0U2VhcmNoIiAgLz4KICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJvZHVjdF9leGFjdFNlYXJjaCI+CiAgICAgICAgICAgICAgICBFeGFjdCBTZWFyY2gKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9Im0tYi0xNSBzY3JvbGwtaGlkZGVuIHNjcm9sbGFibGVWaWV3MSI+CgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPlRoZXJhcGV1dGljIGRydWcgY2xhc3M8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBsZXZlbD0iMSIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hQcm9kdWN0cyBmb3JtLWNvbnRyb2wgIgogICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCI+CiAgICAgICAgPC9kaXY+CiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+QWN0aXZlIE1vaWV0eTxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSIyIgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5Qcm9kdWN0IEFjdGl2ZSBNb2lldHk8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBsZXZlbD0iMyIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hQcm9kdWN0cyBmb3JtLWNvbnRyb2wgIgogICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCI+CiAgICAgICAgPC9kaXY+CiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+QWN0aXZlIEluZ3JlZGllbnQ8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBsZXZlbD0iNCIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hQcm9kdWN0cyBmb3JtLWNvbnRyb2wgIgogICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCI+CiAgICAgICAgPC9kaXY+CiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+UHJvZHVjdCBBY3RpdmUgSW5ncmVkaWVudDxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSI1IgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5Qcm9kdWN0IE5hbWU8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBsZXZlbD0iNiIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hQcm9kdWN0cyBmb3JtLWNvbnRyb2wgcHJvZHVjdENvbHVtbiIKICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiPgogICAgICAgIDwvZGl2PgogICAgCgogICAgICAgIDxkaXYgY2xhc3M9InByb2REaWN0RmlsdGVyQ29sIj4KICAgICAgICAgICAgPGxhYmVsPkFwcGxpY2F0aW9uIE51bWJlcjxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvcHlBbmRQYXN0ZURpY01vZGFsIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IGxldmVsPSI3IgogICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaFByb2R1Y3RzIGZvcm0tY29udHJvbCAiCiAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0Ij4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kRGljdEZpbHRlckNvbCI+CiAgICAgICAgICAgIDxsYWJlbD5Vc2VyIEFzc2lnbm1lbnQ8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGVuY2lsLXNxdWFyZS1vIGNvcHktbi1wYXN0ZSBtb2RhbC1saW5rIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBsZXZlbD0iOCIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hQcm9kdWN0cyBmb3JtLWNvbnRyb2wgIgogICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCI+CiAgICAgICAgPC9kaXY+CiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0icHJvZERpY3RGaWx0ZXJDb2wiPgogICAgICAgICAgICA8bGFiZWw+SU5EIFJldmlld2VyPGkgdGFiaW5kZXg9IjAiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgbGV2ZWw9IjkiCiAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoUHJvZHVjdHMgZm9ybS1jb250cm9sICIKICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiPgogICAgICAgIDwvZGl2PgogICAgCjwvZGl2PgoKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgPGNvbHVtbi12aWV3IGlkPSJjb2x1bW5WaWV3MSIgY2xhc3M9InNjcm9sbGFibGVWaWV3MiIgb25kYXRhPSJzb3VyY2UiIHBhdGg9IjAiIGRpYz0icHJvZHVjdCIKICAgICAgICAgICAgICAgICAgICAgZGljdGlvbmFyeV90eXBlPSJwcm9kdWN0IiBjb2x1bW5zX25hbWU9IlRoZXJhcGV1dGljIGRydWcgY2xhc3MsQWN0aXZlIE1vaWV0eSxQcm9kdWN0IEFjdGl2ZSBNb2lldHksQWN0aXZlIEluZ3JlZGllbnQsUHJvZHVjdCBBY3RpdmUgSW5ncmVkaWVudCxQcm9kdWN0IE5hbWUsQXBwbGljYXRpb24gTnVtYmVyLFVzZXIgQXNzaWdubWVudCxJTkQgUmV2aWV3ZXIiPjwvY29sdW1uLXZpZXc+CiAgICA8L2Rpdj4KPC9kaXY+CgoKPGRpdiBjbGFzcz0icm93IHNlbGVjdGVkUHJvZHVjdERpY3Rpb25hcnlWYWx1ZSI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSI+CiAgICAgICAgPGxhYmVsPlNlbGVjdGVkOjwvbGFiZWw+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTAiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5UaGVyYXBldXRpYyBkcnVnIGNsYXNzPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWUgbGV2ZWwxIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkFjdGl2ZSBNb2lldHk8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgcHJvZHVjdERpY3Rpb25hcnlWYWx1ZSBsZXZlbDIiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UHJvZHVjdCBBY3RpdmUgTW9pZXR5PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWUgbGV2ZWwzIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkFjdGl2ZSBJbmdyZWRpZW50PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWUgbGV2ZWw0Ij48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlByb2R1Y3QgQWN0aXZlIEluZ3JlZGllbnQ8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgcHJvZHVjdERpY3Rpb25hcnlWYWx1ZSBsZXZlbDUiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UHJvZHVjdCBOYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWUgbGV2ZWw2Ij48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkFwcGxpY2F0aW9uIE51bWJlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtOSBwcm9kdWN0RGljdGlvbmFyeVZhbHVlIGxldmVsNyI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Vc2VyIEFzc2lnbm1lbnQ8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTkgcHJvZHVjdERpY3Rpb25hcnlWYWx1ZSBsZXZlbDgiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+SU5EIFJldmlld2VyPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IHByb2R1Y3REaWN0aW9uYXJ5VmFsdWUgbGV2ZWw5Ij48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvcGx1Z2luL2RpY3Rpb25hcnkvcHJvZHVjdERpY3Rpb25hcnktZWVhYWRmZWY3M2I5ZThhYTNkNWJiY2NkMDIwZmJlMGUuanMiID48L3NjcmlwdD4KPHN0eWxlPgogLnByb2REaWN0RmlsdGVyQ29sQ2FsYyAsLnByb2R1Y3REaWN0aW9uYXJ5Q29sV2lkdGhDYWxjIHsKICAgIHdpZHRoOiBjYWxjKDEwMCUgLzkpOwp9CiAucHJvZERpY3RTZWFyY2hDb2xDYWxjIHsKICAgICB3aWR0aDogY2FsYygxMDAlIC84KTsKIH0KPC9zdHlsZT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+PGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3NlbGVjdDItc3Bpbm5lci03Yjk3NzYwNzZkNWZjZWVmNDk5M2I1NWM5MzgzZGVkZC5naWYiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPjwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBjbGVhclByb2R1Y3RWYWx1ZXMiIGFjY2Vzc2tleT0iJCI+Q2xlYXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGFkZFByb2R1Y3RWYWx1ZXMiIGFjY2Vzc2tleT0iISI+QWRkPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBhZGRBbGxQcm9kdWN0VmFsdWVzIiBhY2Nlc3NrZXk9IkAiPkFkZCBBbGw8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGFkZEFsbFByb2R1Y3RzIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhY2Nlc3NrZXk9IiMiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InN0dWR5TW9kYWwiIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciCiAgICAgYXJpYS1sYWJlbGxlZGJ5PSJzdHVkeURpY3Rpb25hcnlMYWJlbCIKICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9InN0dWR5RGljdGlvbmFyeUxhYmVsIj5TdHVkeSBEaWN0aW9uYXJ5PC9oND4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNSBwYWRkaW5nLW1kLWJvdHRvbSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zdHVkeV9leGFjdFNlYXJjaCIgLz48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InN0dWR5X2V4YWN0U2VhcmNoIiBpZD0ic3R1ZHlfZXhhY3RTZWFyY2giICAvPgogICAgICAgICAgICA8bGFiZWwgZm9yPSJzdHVkeV9leGFjdFNlYXJjaCI+CiAgICAgICAgICAgICAgICBFeGFjdCBTZWFyY2gKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNiI+CiAgICAgICAgCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL3BsdWdpbi9kaWN0aW9uYXJ5L3N0dWR5RHJ1Z3MtOTY1MGNhY2E3YjJlYWFkNDdkZTU3YWY3YmJlZmUwNjYuanMiID48L3NjcmlwdD4KPHNjcmlwdD4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgcHJvZHVjdHNMaXN0VXJsID0gIi9zaWduYWwvc3R1ZHlEaWN0aW9uYXJ5L2dldFByb2R1Y3RzTGlzdCI7CiAgICAgICAgc2hvd1N0dWR5RHJ1Z3NXaWRnZXQocHJvZHVjdHNMaXN0VXJsKTsKICAgICAgICBiaW5kSW1wQ2hlY2tib3hFdmVudCgpOwogICAgfSk7Cjwvc2NyaXB0PgoKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMCI+CiAgICAgICAgPGxhYmVsPlN0dWR5IERydWc8L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iMyIgcmVmX2xldmVsPSIyIiBjbGFzcz0ic2VhcmNoU3R1ZGllcyBmb3JtLWNvbnRyb2wiIHR5cGU9ImhpZGRlbiIgaWQ9InN0dWR5RHJ1Z3NJbnB1dCIvPgoKICAgICAgICA8ZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic3R1ZHlEcnVncyIgaWQ9InN0dWR5RHJ1Z3MiIHZhbHVlPSIiIGNsYXNzPSJzZWFyY2hTdHVkaWVzIGZvcm0tY29udHJvbCI+PC9zZWxlY3Q+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTIiPgogICAgICAgIDxsYWJlbD4mbmJzcDs8L2xhYmVsPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCBjaGVja2JveC1wcmltYXJ5Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3N0dWR5X2ltcCIgLz48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InN0dWR5X2ltcCIgaWQ9InN0dWR5X2ltcCIgIC8+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InN0dWR5X2ltcCI+CiAgICAgICAgICAgICAgICBJTVAKICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbC14cy02Ij4KICAgICAgICAKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3NpZ25hbC9hc3NldHMvcGx1Z2luL2RpY3Rpb25hcnkvc3R1ZHlDb21wb3VuZHMtZDEyNjRhYzMwMWI4OWMyYmUyMTRmYWY1MDI4MzBjZWIuanMiID48L3NjcmlwdD4KCjxsYWJlbD5DbGluaWNhbCBSZWZlcmVuY2UgTnVtYmVyPC9sYWJlbD4KPGlucHV0IGxldmVsPSI0IiByZWZfbGV2ZWw9IjIiIGNsYXNzPSJzZWFyY2hTdHVkaWVzIGZvcm0tY29udHJvbCIgdHlwZT0iaGlkZGVuIiBpZD0ic3R1ZHlDb21wb3VuZHNJbnB1dCIvPgoKPGRpdj4KICAgIAogICAgICAgIDxzZWxlY3QgbmFtZT0ic3R1ZHlDb21wb3VuZHMiIGlkPSJzdHVkeUNvbXBvdW5kcyIgdmFsdWU9IiIgY2xhc3M9InNlYXJjaFN0dWRpZXMgZm9ybS1jb250cm9sIj48L3NlbGVjdD4KICAgIAo8L2Rpdj4KCjxzY3JpcHQ+CiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGNvbXBvdW5kc0xpc3RVcmwgPSAiL3NpZ25hbC9zdHVkeURpY3Rpb25hcnkvZ2V0Q29tcG91bmRzTGlzdCI7CiAgICAgICAgc2hvd1N0dWR5Q29tcG91bmRzV2lkZ2V0KGNvbXBvdW5kc0xpc3RVcmwpOwogICAgfSk7Cjwvc2NyaXB0PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy02Ij4KICAgICAgICA8bGFiZWw+UHJvamVjdCBOdW1iZXI8aSB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wZW5jaWwtc3F1YXJlLW8gY29weS1uLXBhc3RlIG1vZGFsLWxpbmsiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29weUFuZFBhc3RlRGljTW9kYWwiPjwvaT48L2xhYmVsPgogICAgICAgIDxpbnB1dCBsZXZlbD0iMSIgY2xhc3M9InNlYXJjaFN0dWRpZXMgZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0Ij4KCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNiI+CiAgICAgICAgPGxhYmVsPlN0dWR5IE51bWJlcjxpIHRhYmluZGV4PSIwIgogICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBlbmNpbC1zcXVhcmUtbyBjb3B5LW4tcGFzdGUgbW9kYWwtbGluayIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb3B5QW5kUGFzdGVEaWNNb2RhbCI+PC9pPjwvbGFiZWw+CiAgICAgICAgPGlucHV0IGxldmVsPSIyIiBjbGFzcz0ic2VhcmNoU3R1ZGllcyBmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiPgoKICAgIDwvZGl2PgoKPC9kaXY+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICA8Y29sdW1uLXZpZXcgc3R5bGU9ImhlaWdodDogMjAwcHg7IiBpZD0iY29sdW1uVmlldzEiIG9uZGF0YT0ic291cmNlIiBwYXRoPSIwIgogICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5X3R5cGU9InN0dWR5IiBjb2x1bW5zX25hbWU9IlByb3RvY29sTnVtYmVyLFN0dWR5TnVtYmVyIj48L2NvbHVtbi12aWV3PgogICAgPC9kaXY+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InJvdyBzZWxlY3RlZFN0dWR5RGljdGlvbmFyeVZhbHVlIj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIj4KICAgICAgICA8bGFiZWw+U2VsZWN0ZWQ6PC9sYWJlbD4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMCI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMiPgogICAgICAgICAgICAgICAgPGxhYmVsPlByb2plY3QgTnVtYmVyPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtOSBzdHVkeURpY3Rpb25hcnlWYWx1ZSBsZXZlbDEiPjwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyI+CiAgICAgICAgICAgICAgICA8bGFiZWw+U3R1ZHkgTnVtYmVyPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtOSBzdHVkeURpY3Rpb25hcnlWYWx1ZSBsZXZlbDIiPjwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgIAogICAgPC9kaXY+CjwvZGl2PgoKPHN0eWxlPgouc3R1ZHlEaWN0aW9uYXJ5Q29sV2lkdGggewogICAgd2lkdGg6IGNhbGMoMTAwJSAvMik7Cn0KPC9zdHlsZT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+PGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3NlbGVjdDItc3Bpbm5lci03Yjk3NzYwNzZkNWZjZWVmNDk5M2I1NWM5MzgzZGVkZC5naWYiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIvPjwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBjbGVhclN0dWR5VmFsdWVzIiBhY2Nlc3NrZXk9IisiPkNsZWFyPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBhZGRTdHVkeVZhbHVlcyIgYWNjZXNza2V5PSIoIj5BZGQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGFkZEFsbFN0dWR5VmFsdWVzIiBhY2Nlc3NrZXk9IikiPkFkZCBBbGw8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGFkZEFsbFN0dWRpZXMiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFjY2Vzc2tleT0iXyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAKCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0idGV4dGFyZWEtZXh0MSIgY2xhc3M9InRleHRhcmVhLWV4dDEiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIgogICAgIGFyaWEtbGFiZWxsZWRieT0idGV4dGFyZWFMYWJlbCIKICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSI+RGVzY3JpcHRpb248L2g0PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgdGV4dEFyZWFWYWx1ZSB0ZXh0LWV4dC1zaXplIj48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHVwZGF0ZVRleHRhcmVhIj5VcGRhdGU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NrZXk9InEiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjwvZGl2PgoKPGRpdiBpZD0iaGlkZGVuZm9ybSIgPjwvZGl2PgoKICAgICAgICAgICAgICAgIDxyOmxheW91dFJlc291cmNlcy8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gRW5kIGNvbnRlbnQgLS0+CgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CiAgICA8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgogICAgPCEtLSBFbmQgUmlnaHQgY29udGVudCBoZXJlIC0tPgogICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAtLT4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zaWduYWwvYXNzZXRzL2FwcC9qcXVlcnkuY29yZS05MDg4NzY4ODkxZjdkNDNhZjVhYjhjOGQ2NDJlNTMwMS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvanF1ZXJ5LmFwcC0xYWZmOGFkZGZhZTJkMmIyMzhjMTA0N2M1MDZjNzViNC5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2NvbW1vbi9yeF9jb21tb24tZWI1YWMyYTQ4ZGU0ZjExYzg0NDFmYWI2MzkwNDk1ZDYuanMiID48L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>