<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="57">
  <HTTPTask id="979" hostname="10.100.22.24:8181" path="/signal/adHocAlert/index" url="http://10.100.22.24:8181/signal/adHocAlert/index" ip="10.100.22.24" port="8181" connectionId="29" origin="Primary" frame="1" startDateTime="2019-11-18T09:43:51.428+05:30" startTime="334022312" endTime="334023593">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Upgrade-Insecure-Requests" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9ldmRhc0FsZXJ0L3Jldmlldw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9zaWduYWwvYWRIb2NBbGVydC9pbmRleCBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAwLjIyLjI0OjgxODEvc2lnbmFsL2V2ZGFzQWxlcnQvcmV2aWV3DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2QNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>0</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-Application-Context" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb246cHJvZHVjdGlvbjo3MTcx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsIG5vLXN0b3Jl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Language" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNiBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KWC1BcHBsaWNhdGlvbi1Db250ZXh0OiBhcHBsaWNhdGlvbjpwcm9kdWN0aW9uOjcxNzENCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZQ0KUHJhZ21hOiBuby1jYWNoZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MYW5ndWFnZTogZW4tVVMNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpEYXRlOiBNb24sIDE4IE5vdiAyMDE5IDA0OjA4OjM2IEdNVA0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="334023593" offset="0" length="4096" />
        <PacketInfo time="334023593" offset="4096" length="16384" />
        <PacketInfo time="334023593" offset="20480" length="16384" />
        <PacketInfo time="334023609" offset="36864" length="16384" />
        <PacketInfo time="334023609" offset="53248" length="16384" />
        <PacketInfo time="334023609" offset="69632" length="16384" />
        <PacketInfo time="334023609" offset="86016" length="15592" />
      </TcpPackets>
    </HTTPResponse>
    <HTTPTask id="999" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/bootbox.min-05d23d3920015845ca00414081fd0ec6.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/bootbox.min-05d23d3920015845ca00414081fd0ec6.js" ip="10.100.22.24" port="8181" connectionId="29" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.480+05:30" startTime="334023734" endTime="334024046">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvYm9vdGJveC5taW4tMDVkMjNkMzkyMDAxNTg0NWNhMDA0MTQwODFmZDBlYzYuanMgSFRUUC8xLjENCkhvc3Q6IDEwLjEwMC4yMi4yNDo4MTgxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzguMC4zOTA0Ljk3IFNhZmFyaS81MzcuMzYNCkFjY2VwdDogKi8qDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAwLjIyLjI0OjgxODEvc2lnbmFsL2FkSG9jQWxlcnQvaW5kZXgNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQ29va2llOiBTRVNTSU9OPTY4ZmU4YTA2LTI3YmYtNDhiNi1hYmRkLWI0ODVlZTMzYzAzZA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>3720</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNzoyNCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9wdnMvYm9vdGJveC5taW4tMDVkMjNkMzkyMDAxNTg0NWNhMDA0MTQwODFmZDBlYzYuanMi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MzcyMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNzoyNCBHTVQNCkVUYWc6ICJhcHAvcHZzL2Jvb3Rib3gubWluLTA1ZDIzZDM5MjAwMTU4NDVjYTAwNDE0MDgxZmQwZWM2LmpzIg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDYWNoZS1Db250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04DQpDb250ZW50LUxlbmd0aDogMzcyMA0KRGF0ZTogTW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024046" offset="0" length="4047" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1001" hostname="10.100.22.24:8181" path="/signal/assets/vendorUi/datatables/datatable.colsReorder.min-f60fbf698f1fa675a29d5b361968020a.js" url="http://10.100.22.24:8181/signal/assets/vendorUi/datatables/datatable.colsReorder.min-f60fbf698f1fa675a29d5b361968020a.js" ip="10.100.22.24" port="8181" connectionId="35" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.505+05:30" startTime="334023750" endTime="334024359">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL3ZlbmRvclVpL2RhdGF0YWJsZXMvZGF0YXRhYmxlLmNvbHNSZW9yZGVyLm1pbi1mNjBmYmY2OThmMWZhNjc1YTI5ZDViMzYxOTY4MDIwYS5qcyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>10865</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowODozNiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>InZlbmRvclVpL2RhdGF0YWJsZXMvZGF0YXRhYmxlLmNvbHNSZW9yZGVyLm1pbi1mNjBmYmY2OThmMWZhNjc1YTI5ZDViMzYxOTY4MDIwYS5qcyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTA4NjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowODozNiBHTVQNCkVUYWc6ICJ2ZW5kb3JVaS9kYXRhdGFibGVzL2RhdGF0YWJsZS5jb2xzUmVvcmRlci5taW4tZjYwZmJmNjk4ZjFmYTY3NWEyOWQ1YjM2MTk2ODAyMGEuanMiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAxMDg2NQ0KRGF0ZTogTW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024359" offset="0" length="4096" />
          <PacketInfo time="334024359" offset="4096" length="7123" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1004" hostname="10.100.22.24:8181" path="/signal/assets/yadcf/jquery.dataTables.yadcf-926e48d7fd2745f397358930a160f1e9.css" url="http://10.100.22.24:8181/signal/assets/yadcf/jquery.dataTables.yadcf-926e48d7fd2745f397358930a160f1e9.css" ip="10.100.22.24" port="8181" connectionId="37" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.530+05:30" startTime="334023765" endTime="334024406">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3MsKi8qO3E9MC4x</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL3lhZGNmL2pxdWVyeS5kYXRhVGFibGVzLnlhZGNmLTkyNmU0OGQ3ZmQyNzQ1ZjM5NzM1ODkzMGExNjBmMWU5LmNzcyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiB0ZXh0L2NzcywqLyo7cT0wLjENClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>542</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjowMiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>InlhZGNmL2pxdWVyeS5kYXRhVGFibGVzLnlhZGNmLTkyNmU0OGQ3ZmQyNzQ1ZjM5NzM1ODkzMGExNjBmMWU5LmNzcyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M7Y2hhcnNldD1VVEYtOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTQy</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjowMiBHTVQNCkVUYWc6ICJ5YWRjZi9qcXVlcnkuZGF0YVRhYmxlcy55YWRjZi05MjZlNDhkN2ZkMjc0NWYzOTczNTg5MzBhMTYwZjFlOS5jc3MiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1UeXBlOiB0ZXh0L2NzcztjaGFyc2V0PVVURi04DQpDb250ZW50LUxlbmd0aDogNTQyDQpEYXRlOiBNb24sIDE4IE5vdiAyMDE5IDA0OjA4OjM3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>LmhpZGUge2Rpc3BsYXk6IG5vbmU7fS5pbnVzZSwgLnVpLXNsaWRlci1yYW5nZSAuaW51c2UsIC55YWRjZi1maWx0ZXItcmFuZ2UtbnVtYmVyLXNsaWRlciAuaW51c2Uge2JhY2tncm91bmQ6ICM4QkJFRjA7fS55YWRjZi1maWx0ZXItcmVzZXQtYnV0dG9uIHtkaXNwbGF5OiBpbmxpbmUtYmxvY2s7fS55YWRjZi1maWx0ZXItcmVzZXQtYnV0dG9uLnJhbmdlLW51bWJlci1zbGlkZXItcmVzZXQtYnV0dG9ue3Bvc2l0aW9uOiByZWxhdGl2ZTt0b3A6IC02cHg7fS55YWRjZi1maWx0ZXIge3BhZGRpbmctcmlnaHQ6IDRweDtwYWRkaW5nLWxlZnQ6IDRweDtwYWRkaW5nLWJvdHRvbTogM3B4O3BhZGRpbmctdG9wOiAzcHg7fS55YWRjZi1maWx0ZXIgPiBvcHRpb257YmFja2dyb3VuZDogd2hpdGU7fS51aS1hdXRvY29tcGxldGUgLnVpLW1lbnUtaXRlbSB7Zm9udC1zaXplOjEzcHg7fSN1aS1kYXRlcGlja2VyLWRpdiB7Zm9udC1zaXplOjEzcHg7fS55YWRjZi1maWx0ZXItd3JhcHBlciB7ZGlzcGxheTogaW5saW5lLWJsb2NrO3doaXRlLXNwYWNlOiBub3dyYXA7bWFyZ2luLWxlZnQ6IDJweDt9LnlhZGNmLWZpbHRlci1yYW5nZS1udW1iZXIge3dpZHRoOiA0MHB4O30ueWFkY2YtZmlsdGVyLXJhbmdlLW51bWJlci1zZXBlcmF0b3Ige21hcmdpbi1sZWZ0OiAxMHB4O21hcmdpbi1yaWdodDogMTBweDt9LnlhZGNmLWZpbHRlci1yYW5nZS1kYXRlIHt3aWR0aDogODBweDt9LnlhZGNmLWZpbHRlci1yYW5nZS1kYXRlLXNlcGVyYXRvciB7bWFyZ2luLWxlZnQ6IDEwcHg7bWFyZ2luLXJpZ2h0OiAxMHB4O30ueWFkY2YtZmlsdGVyLXdyYXBwZXItaW5uZXIge2Rpc3BsYXk6IGlubGluZS1ibG9jaztib3JkZXI6IDFweCBzb2xpZCAjQUJBREIzO30ueWFkY2YtbnVtYmVyLXNsaWRlci1maWx0ZXItd3JhcHBlci1pbm5lciB7ZGlzcGxheTogaW5saW5lLWJsb2NrO3dpZHRoOiAyMDBweDttYXJnaW4tYm90dG9tOiA3cHg7fS55YWRjZi1maWx0ZXItcmFuZ2UtbnVtYmVyLXNsaWRlciAudWktc2xpZGVyLWhhbmRsZSB7d2lkdGg6IDEwcHg7aGVpZ2h0OiAxMHB4O21hcmdpbi10b3A6IDFweDt9LnlhZGNmLWZpbHRlci1yYW5nZS1udW1iZXItc2xpZGVyIC51aS1zbGlkZXItcmFuZ2Uge3Bvc2l0aW9uOiByZWxhdGl2ZTtoZWlnaHQ6IDVweDt9LnlhZGNmLWZpbHRlci1yYW5nZS1udW1iZXItc2xpZGVyIHtoZWlnaHQ6IDVweDttYXJnaW4tbGVmdDogNnB4O21hcmdpbi1yaWdodDogNnB4O30ueWFkY2YtZmlsdGVyLXJhbmdlLW51bWJlci1zbGlkZXIge292ZXJmbG93OiB2aXNpYmxlO30ueWFkY2YtbnVtYmVyLXNsaWRlci1maWx0ZXItd3JhcHBlci1pbm5lciAueWFkY2YtZmlsdGVyLXJhbmdlLW51bWJlci1zbGlkZXItbWluLXRpcCB7Zm9udC1zaXplOiAxM3B4O2ZvbnQtd2VpZ2h0OiBub3JtYWw7cG9zaXRpb246IGFic29sdXRlO291dGxpbmUtc3R5bGU6IG5vbmU7fS55YWRjZi1udW1iZXItc2xpZGVyLWZpbHRlci13cmFwcGVyLWlubmVyIC55YWRjZi1maWx0ZXItcmFuZ2UtbnVtYmVyLXNsaWRlci1tYXgtdGlwIHtmb250LXNpemU6IDEzcHg7Zm9udC13ZWlnaHQ6IG5vcm1hbDtwb3NpdGlvbjphYnNvbHV0ZTtvdXRsaW5lLXN0eWxlOiBub25lO30ueWFkY2YtbnVtYmVyLXNsaWRlci1maWx0ZXItd3JhcHBlci1pbm5lciAueWFkY2YtZmlsdGVyLXJhbmdlLW51bWJlci1zbGlkZXItbWluLXRpcC1pbm5lciB7cG9zaXRpb246YWJzb2x1dGU7dG9wOiAxMXB4O30ueWFkY2YtbnVtYmVyLXNsaWRlci1maWx0ZXItd3JhcHBlci1pbm5lciAueWFkY2YtZmlsdGVyLXJhbmdlLW51bWJlci1zbGlkZXItbWF4LXRpcC1pbm5lciB7cG9zaXRpb246YWJzb2x1dGU7dG9wOiAxMXB4O30ueWFkY2YtZXhjbHVkZS13cmFwcGVyIHtkaXNwbGF5OiBpbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246IG1pZGRsZTttYXJnaW4tcmlnaHQ6IDVweDt9LnlhZGNmLWxhYmVsLnNtYWxsIHtmb250LXNpemU6IDEwcHg7fQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024406" offset="0" length="865" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1006" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/updatedFixedColumn-4180034da606560f8555366463a750ac.css" url="http://10.100.22.24:8181/signal/assets/app/pvs/updatedFixedColumn-4180034da606560f8555366463a750ac.css" ip="10.100.22.24" port="8181" connectionId="29" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.554+05:30" startTime="334024109" endTime="334024421">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3MsKi8qO3E9MC4x</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvdXBkYXRlZEZpeGVkQ29sdW1uLTQxODAwMzRkYTYwNjU2MGY4NTU1MzY2NDYzYTc1MGFjLmNzcyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiB0ZXh0L2NzcywqLyo7cT0wLjENClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>383</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjowNCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9wdnMvdXBkYXRlZEZpeGVkQ29sdW1uLTQxODAwMzRkYTYwNjU2MGY4NTU1MzY2NDYzYTc1MGFjLmNzcyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M7Y2hhcnNldD1VVEYtOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Mzgz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjowNCBHTVQNCkVUYWc6ICJhcHAvcHZzL3VwZGF0ZWRGaXhlZENvbHVtbi00MTgwMDM0ZGE2MDY1NjBmODU1NTM2NjQ2M2E3NTBhYy5jc3MiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1UeXBlOiB0ZXh0L2NzcztjaGFyc2V0PVVURi04DQpDb250ZW50LUxlbmd0aDogMzgzDQpEYXRlOiBNb24sIDE4IE5vdiAyMDE5IDA0OjA4OjM3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>I2J1bGtVcGRhdGUge3BvaW50ZXItZXZlbnRzOiBub25lO30udHdvLXJvdy1lbGlwc2lzIHtvdmVyZmxvdzogaGlkZGVuO3RleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOy13ZWJraXQtbGluZS1jbGFtcDogMjtkaXNwbGF5OiAtd2Via2l0LWJveDstd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO3dpZHRoOiAxMDBweDt9LmJ0bi1kaXNhYmxlZCB7Y29sb3I6ICM5OTk7cG9pbnRlci1ldmVudHM6IG5vbmU7fS5tdWx0aXNlbGVjdC1jb250YWluZXIge3Bvc2l0aW9uOiBhYnNvbHV0ZTtsaXN0LXN0eWxlLXR5cGU6IG5vbmU7bWFyZ2luOiAwO3BhZGRpbmc6IDA7bWluLXdpZHRoOjIyMHB4ICFpbXBvcnRhbnQ7Ym9yZGVyLXJhZGl1czo4cHghaW1wb3J0YW50O2JvcmRlcjpub25lICFpbXBvcnRhbnQ7Ym94LXNoYWRvdzowIDZweCAxMnB4IHJnYmEoMCwwLDAsLjE3NSkgIWltcG9ydGFudDt0b3A6IDMwcHggIWltcG9ydGFudDtsZWZ0OiAtNXB4IWltcG9ydGFudDt9Lm11bHRpc2VsZWN0LWNvbnRhaW5lci5kcm9wZG93bi1tZW51ID4gbGkgPiBhIHtwYWRkaW5nOiA2cHggMTBweCFpbXBvcnRhbnQ7d2hpdGUtc3BhY2U6IG5vd3JhcDt9LmRyb3Bkb3duLW1lbnU+LmFjdGl2ZT5hIHtiYWNrZ3JvdW5kOiNkYWU2ZWMhaW1wb3J0YW50O30ubXVsdGlzZWxlY3QtY29udGFpbmVyIGxpIGE6aG92ZXIge2JhY2tncm91bmQ6I2VlZSFpbXBvcnRhbnQ7ICB9</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024406" offset="0" length="703" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1008" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/alerts_review/fieldConfigurationManagement-e1a802ff9b5cad88989e761d50770b53.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/alerts_review/fieldConfigurationManagement-e1a802ff9b5cad88989e761d50770b53.js" ip="10.100.22.24" port="8181" connectionId="36" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.577+05:30" startTime="334023750" endTime="334024421">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvYWxlcnRzX3Jldmlldy9maWVsZENvbmZpZ3VyYXRpb25NYW5hZ2VtZW50LWUxYTgwMmZmOWI1Y2FkODg5ODllNzYxZDUwNzcwYjUzLmpzIEhUVFAvMS4xDQpIb3N0OiAxMC4xMDAuMjIuMjQ6ODE4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2QNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1596</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNzozNiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9wdnMvYWxlcnRzX3Jldmlldy9maWVsZENvbmZpZ3VyYXRpb25NYW5hZ2VtZW50LWUxYTgwMmZmOWI1Y2FkODg5ODllNzYxZDUwNzcwYjUzLmpzIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTU5Ng==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNzozNiBHTVQNCkVUYWc6ICJhcHAvcHZzL2FsZXJ0c19yZXZpZXcvZmllbGRDb25maWd1cmF0aW9uTWFuYWdlbWVudC1lMWE4MDJmZjliNWNhZDg4OTg5ZTc2MWQ1MDc3MGI1My5qcyINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ2FjaGUtQ29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDE1OTYNCkRhdGU6IE1vbiwgMTggTm92IDIwMTkgMDQ6MDg6MzcgR01UDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dmFyIHNpZ25hbD1zaWduYWx8fHt9OwpzaWduYWwuZmllbGRNYW5hZ2VtZW50PWZ1bmN0aW9uKCl7dmFyIGYsZD1bXSxsPSEwLG4scCxnPWZ1bmN0aW9uKCl7dmFyIHU9ZnVuY3Rpb24oYyl7dmFyIGU9ZnVuY3Rpb24oKXtyZXR1cm4gXy5maWx0ZXIoZCxmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEuY29udGFpbmVyVmlld30pfSxiPWZ1bmN0aW9uKCl7cmV0dXJuIF8uZmlsdGVyKGQsZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hLmNvbnRhaW5lclZpZXd9KX0scj1mdW5jdGlvbigpe3JldHVybiBfLmZpbHRlcihkLGZ1bmN0aW9uKGEpe3JldHVybiAzPT09YS5jb250YWluZXJWaWV3fSl9LG09ZnVuY3Rpb24oYSxiKXt2YXIgYz1iO3JldHVybiBfLnJlZHVjZShhLGZ1bmN0aW9uKGEsYil7Xy5oYXMoYiwibGlzdE9yZGVyIil8fChiLmxpc3RPcmRlcj1jKyspO3JldHVybiBhPWErKCc8YSBocmVmPSIjIiBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIiBkYXRhLWZpZWxkPSInK2IubmFtZSsnIj4nK2IubGFiZWwrIjwvYT4iKSsiXG4ifSwKIiIpfSx0PWZ1bmN0aW9uKCl7Zi5maW5kKCIubGlzdC1ncm91cC1wcmltYXJ5IikuaHRtbChtKF8uc29ydEJ5KGUoKSxmdW5jdGlvbihhKXtyZXR1cm4gYS5saXN0T3JkZXJ9KSwwKSl9LGE9ZnVuY3Rpb24oKXtmLmZpbmQoIi5saXN0LWdyb3VwLXNlY29uZGFyeSIpLmh0bWwobShfLnNvcnRCeShiKCksZnVuY3Rpb24oYSl7cmV0dXJuIGEubGlzdE9yZGVyfSksMCkpfTsoZnVuY3Rpb24oKXskLmFqYXgoe3VybDpuLGNhY2hlOiExLGFzeW5jOiExLHN1Y2Nlc3M6ZnVuY3Rpb24oYil7YiYmMDxiLmxlbmd0aCYmKGQ9Xy5jb2xsZWN0KGIsZnVuY3Rpb24oYSl7dmFyIGI9e307Yi5uYW1lPWEubmFtZTtiLmxhYmVsPWEubGFiZWw7Yi5zZXE9YS5zZXE7Yi5saXN0T3JkZXI9YS5saXN0T3JkZXI7Yi5jb250YWluZXJWaWV3PWEuY29udGFpbmVyVmlldztyZXR1cm4gYn0pKTtzZXRDb2x1bW5TZXEoZCk7dCgpO2EoKTtmLmZpbmQoIi5saXN0LWdyb3VwLW9wdGlvbmFsIikuaHRtbChtKHIoKSwwKSl9fSl9KSgpfSwKaD1mdW5jdGlvbihjLGUsYil7dmFyIGQ9ZnVuY3Rpb24oYyl7cmV0dXJuIF8uZmluZChiLGZ1bmN0aW9uKGEpe3JldHVybiBhLm5hbWU9PT1jfSkuc2VxfSxmPTA7cmV0dXJuIF8ucmVkdWNlKGMuY2hpbGRyZW4oImEubGlzdC1ncm91cC1pdGVtIiksZnVuY3Rpb24oYixhKXt2YXIgYz0kKGEpLmh0bWwoKTthPSQoYSkuYXR0cigiZGF0YS1maWVsZCIpO3ZhciBrPXt9O2subGFiZWw9YztrLm5hbWU9YTtrLmNvbnRhaW5lclZpZXc9ZTtrLnNlcT1kKGEpO2subGlzdE9yZGVyPWYrKztiLnB1c2goayk7cmV0dXJuIGJ9LFtdKX0sZz1mdW5jdGlvbihjKXt2YXIgZT1fLmZpbHRlcihkLGZ1bmN0aW9uKGIpe3JldHVybiAxPT09Yi5jb250YWluZXJWaWV3fSk7cmV0dXJuIGM/Xy5zb3J0QnkoZSxmdW5jdGlvbihiKXtyZXR1cm4gYi5saXN0T3JkZXJ9KTplfSx2PWZ1bmN0aW9uKGMpe3ZhciBlPV8uZmlsdGVyKGQsZnVuY3Rpb24oYil7cmV0dXJuIDI9PT1iLmNvbnRhaW5lclZpZXd9KTtyZXR1cm4gYz8KXy5zb3J0QnkoZSxmdW5jdGlvbihiKXtyZXR1cm4gYi5saXN0T3JkZXJ9KTplfSxxPWZ1bmN0aW9uKGMsZSl7dmFyIGI9JChjKS5kYXRhVGFibGUoKS5mblNldHRpbmdzKCkuYW9Db2x1bW5zLmxlbmd0aCxkPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLGE9MDthPGI7YSsrKWUucHVzaCh7aWR4OmEsbmFtZTokKGMpLmRhdGFUYWJsZSgpLmZuU2V0dGluZ3MoKS5hb0NvbHVtbnNbYV0ubURhdGF9KTtyZXR1cm4gZX0sZj1mdW5jdGlvbigpe3ZhciBiPWQoKSxhPVtdLGM9ZyghMCk7bD8obD0hMSxfLmVhY2goYyxmdW5jdGlvbihjKXt2YXIgZT1fLmZpbmQoYixmdW5jdGlvbihhKXtyZXR1cm4gYy5uYW1lPT09YS5uYW1lfSk7ZSYmYS5wdXNoKGUuaWR4KX0pKTphPV8uY29sbGVjdChjLGZ1bmN0aW9uKGEpe3JldHVybiBfLmZpbmQoYixmdW5jdGlvbihiKXtyZXR1cm4gYS5uYW1lPT09Yi5uYW1lfSk/YS5zZXE6MH0pO3JldHVybiBhfTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1fLnJhbmdlKDAsCmUpLGE9Xy5yYW5nZSgwLGIpLGQ9ZigpLGE9Xy5maWx0ZXIoYSxmdW5jdGlvbihhKXtyZXR1cm4hXy5jb250YWlucyhkLGEpfSksYT1kLmNvbmNhdChhKSxhPV8uZGlmZmVyZW5jZShhLGMpO3JldHVybiBhPV8udW5pb24oYyxhKX0oKX0seD1mdW5jdGlvbihjLGUsYil7dmFyIGY9ZnVuY3Rpb24oKXt2YXIgYj0wLGM9MDtfLmVhY2goZCxmdW5jdGlvbihhKXthLmxpc3RPcmRlcj05OTk5fSk7Xy5lYWNoKGcoKSxmdW5jdGlvbihhKXthLmxpc3RPcmRlcj1iKyt9KTtfLmVhY2godigpLGZ1bmN0aW9uKGEpe2EubGlzdE9yZGVyPWMrK30pO3JldHVybiBkfSgpO2MuY29sUmVvcmRlci5vcmRlcihxKGUsYiksITApO3coZCxjLGIpOyQoIi55YWRjZi1maWx0ZXItd3JhcHBlciIpLmhpZGUoKTtjLmRyYXcoKTskLmFqYXgoe3VybDpwLG1ldGhvZDoiUE9TVCIsZGF0YTp7Y29sdW1uTGlzdDpKU09OLnN0cmluZ2lmeShmKX0sc3VjY2VzczpmdW5jdGlvbihiKXt9fSl9LHc9ZnVuY3Rpb24oYyxlLApiKXt2YXIgZD1bXSxmPVtdO18uZWFjaChjLGZ1bmN0aW9uKGMsYSl7MT09PWMuY29udGFpbmVyVmlldz9kLnB1c2goYStiKTpmLnB1c2goYStiKX0pO2UuY29sdW1ucyhkKS52aXNpYmxlKCEwKTtlLmNvbHVtbnMoZikudmlzaWJsZSghMSl9O3JldHVybntpbml0OmZ1bmN0aW9uKGMpe2MmJigiMHB4Ij09PWYuY3NzKCJyaWdodCIpP2YuY3NzKCJyaWdodCIsLTM1MCk6Zi5jc3MoInJpZ2h0IiwiMCIpKTtjPWYuZGF0YSgiZmllbGRjb250YWluZXJyZWZlcmVuY2UiKTt1KGMpO2YuZmluZCgiLmRpc3BsYXktY29uZmlnLWZpZWxkLCAuZGlzcGxheS1jb25maWctZmllbGQyLCAuZGlzcGxheS1jb25maWctZmllbGQzIikuc29ydGFibGUoe2Nvbm5lY3RXaXRoOiIuc2hvcnQtZmllbGQifSkuZGlzYWJsZVNlbGVjdGlvbigpfSxoaWRlRmllbGRDb25maWd1cmF0aW9uUGFuZWw6ZnVuY3Rpb24oKXtmLmNzcygicmlnaHQiLC0zNTApOyQoIi5maWVsZC1jb25maWctYmFyLXRvZ2dsZSIpLmRhdGEoImJhY2tkcm9wIikmJgooMT4kKCIjd3JhcHBlciIpLmZpbmQoIi5maWVsZGNvbmZpZy1iYWNrZHJvcCIpLmxlbmd0aD8kKCI8ZGl2IGNsYXNzPSdmaWVsZGNvbmZpZy1iYWNrZHJvcCc+PC9kaXY+IikuYXBwZW5kVG8oIiN3cmFwcGVyIik6JCgiLmZpZWxkY29uZmlnLWJhY2tkcm9wIikucmVtb3ZlKCkpfSxwcm9jZXNzTGlzdDpmdW5jdGlvbihjLGUsYil7dmFyIGc9aChmLmZpbmQoIi5saXN0LWdyb3VwLXByaW1hcnkiKSwxLGQpLGc9Zy5jb25jYXQoaChmLmZpbmQoIi5saXN0LWdyb3VwLXNlY29uZGFyeSIpLDIsZCkpO2Q9Zz1nLmNvbmNhdChoKGYuZmluZCgiLmxpc3QtZ3JvdXAtb3B0aW9uYWwiKSwzLGQpKTt4KGMsZSxiKX0sYnVpbGRDb2x1bW5PcmRlcjpxLHZpc2libGU6ZnVuY3Rpb24oYyl7dmFyIGU9Xy5maW5kKGQsZnVuY3Rpb24oYil7cmV0dXJuIGIubmFtZT09PWMmJjE9PT1iLmNvbnRhaW5lclZpZXd9KTtyZXR1cm4hXy5pc0VtcHR5KGUpfX19KCk7cmV0dXJue2luaXQ6ZnVuY3Rpb24oZCxoLGwpeyQoIiNjb25maWd1cmVRdWFsaXRhdGl2ZUZpZWxkcywgI2NvbmZpZ3VyZVZhbGlkYXRlZFNpZ25hbEZpZWxkcywgI2NvbmZpZ3VyZVF1YW50aXRhdGl2ZUZpZWxkcywgI2NvbmZpZ3VyZUV2ZGFzRmllbGRzLCAjY29uZmlndXJlQWRob2NGaWVsZHMsI2NvbmZpZ3VyZUxpdGVyYXR1cmVGaWVsZHMiKS5jbGljayhmdW5jdGlvbihkKXtkLnByZXZlbnREZWZhdWx0KCk7CmY9JCgiIyIrJCh0aGlzKS5kYXRhKCJmaWVsZGNvbmZpZ3VyYXRpb25iYXJpZCIpKTtnLmluaXQoITApfSk7JCgiI2J0blNhdmVMaXN0Q29uZmlnIikudW5iaW5kKCJjbGljayIpLm9uKCJjbGljayIsZnVuY3Rpb24oZil7Zi5wcmV2ZW50RGVmYXVsdCgpO2cucHJvY2Vzc0xpc3QoZCxoLGwpO2cuaGlkZUZpZWxkQ29uZmlndXJhdGlvblBhbmVsKCl9KTskKCIjYnRuQ2xvc2VMaXN0Q29uZmlnIikuY2xpY2soZnVuY3Rpb24oZCl7ZC5wcmV2ZW50RGVmYXVsdCgpO2cuaGlkZUZpZWxkQ29uZmlndXJhdGlvblBhbmVsKCl9KTtkLmNvbFJlb3JkZXIub3JkZXIoZy5idWlsZENvbHVtbk9yZGVyKGgsbCksITApfSx2aXNpYmxlQ29sdW1uczpmdW5jdGlvbihkKXtyZXR1cm4gZy52aXNpYmxlKGQpfSxwb3B1bGF0ZUNvbHVtbkxpc3Q6ZnVuY3Rpb24oZCxoKXtmPSQoIiNxdWFsaXRhdGl2ZUZpZWxkcywgI3ZhbGlkYXRlZFNpZ25hbEZpZWxkcywgI3F1YW50aXRhdGl2ZUZpZWxkcywgI2V2ZGFzRmllbGRzLCAjYWRob2NGaWVsZHMiKTsKbj1kO3A9aDtnLmluaXQoITEpfX19KCk7</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024421" offset="0" length="1954" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1010" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/alerts_review/ad_hoc_alert_list-4f223cfd4460c9eca38206d22c22d101.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/alerts_review/ad_hoc_alert_list-4f223cfd4460c9eca38206d22c22d101.js" ip="10.100.22.24" port="8181" connectionId="33" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.602+05:30" startTime="334023734" endTime="334024656">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvYWxlcnRzX3Jldmlldy9hZF9ob2NfYWxlcnRfbGlzdC00ZjIyM2NmZDQ0NjBjOWVjYTM4MjA2ZDIyYzIyZDEwMS5qcyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>24981</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNzozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9wdnMvYWxlcnRzX3Jldmlldy9hZF9ob2NfYWxlcnRfbGlzdC00ZjIyM2NmZDQ0NjBjOWVjYTM4MjA2ZDIyYzIyZDEwMS5qcyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjQ5ODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNzozOCBHTVQNCkVUYWc6ICJhcHAvcHZzL2FsZXJ0c19yZXZpZXcvYWRfaG9jX2FsZXJ0X2xpc3QtNGYyMjNjZmQ0NDYwYzllY2EzODIwNmQyMmMyMmQxMDEuanMiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAyNDk4MQ0KRGF0ZTogTW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCi8vIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIHBhcnNpbmcgc3RyaW5nIG5hbWVzcGFjZXMgYW5kCi8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGluZyBuZXN0ZWQgbmFtZXNwYWNlcwpmdW5jdGlvbiBleHRlbmQoIG5zLCBuc19zdHJpbmcgKSB7CiAgICB2YXIgcGFydHMgPSBuc19zdHJpbmcuc3BsaXQoJy4nKSwKICAgICAgICBwYXJlbnQgPSBucywKICAgICAgICBwbCwgaTsKICAgIGlmIChwYXJ0c1swXSA9PSAic2lnbmFsIikgewogICAgICAgIHBhcnRzID0gcGFydHMuc2xpY2UoMSk7CiAgICB9CiAgICBwbCA9IHBhcnRzLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBwbDsgaSsrKSB7CiAgICAgICAgLy9jcmVhdGUgYSBwcm9wZXJ0eSBpZiBpdCBkb2VzbnQgZXhpc3QKICAgICAgICBpZiAodHlwZW9mIHBhcmVudFtwYXJ0c1tpXV0gPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcGFyZW50W3BhcnRzW2ldXSA9IHt9OwogICAgICAgIH0KICAgICAgICBwYXJlbnQgPSBwYXJlbnRbcGFydHNbaV1dOwogICAgfQogICAgcmV0dXJuIHBhcmVudDsKfQoKLy9Qcm90b3R5cGUgbWV0aG9kcwpEYXRlLnByb3RvdHlwZS5hZGREYXlzID0gZnVuY3Rpb24oZGF5cykgewogICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7CiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBkYXlzKTsKICAgIHJldHVybiBkYXRlOwp9OwoKQXJyYXkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGYpe2YgIT0gdmFsdWV9KTsKfTsKClNDQV9XT1JLRkxPV19TVEFUVVNfRU5VTSA9IHsgTkVXOiAnTmV3JywKICAgIEFTU09DSUFURV9SRVZJRVdFRDogJ0Fzc29jaWF0ZVJldmlld2VkJywKICAgIFBIWVNJQ0lBTl9SRVZJRVdFRDogJ1BoeXNpY2lhblJldmlld2VkJywKICAgIFJFUVVJUkVEX0VWQUxVQVRJT046ICdSZXF1aXJlZEV2YWx1YXRpb24nLAogICAgQ09OVElOVUVEX01PTklUT1JJTkc6ICdDb250aW51ZWRNb25pdG9yaW5nJwp9OwoKU0NBX0RJU1BPU0lUSU9OX0VOVU0gPSB7CiAgICBWQUxJREFURURfU0lHTkFMIDogJ1ZhbGlkYXRlZFNpZ25hbCcsCiAgICBWQUxJREFURURfTk9OX0NPTkZJUk1FRF9TSUdOQUwgOiAnVmFsaWRhdGVkTm9uQ29uZmlybWVkU2lnbmFsJywKICAgIFZBTElEQVRFRF9VTkRFUl9JTlZFU1RJR0FUSU9OIDogJ1ZhbGlkYXRlZFVuZGVySW52ZXN0aWdhdGlvbicsCiAgICBDT01NVU5JQ0FURURfU0lHTkFMIDogJ0NvbW11bmljYXRlZFNpZ25hbCcsCiAgICBOT05fVkFMSUQ6ICdOb25WYWxpZCcKfTsKClNDQV9QUklPUklUWV9FTlVNID0gewogICAgSElHSDogIkhpZ2giLAogICAgTUVESVVNOiAiTWVkaXVtIiwKICAgIExPVzogIkxPVyIKfTsKCkRBVEVfRk1UX1RaID0gIllZWVktTU0tREQiOwoKc2lnbmFsLnV0aWxzID0gKGZ1bmN0aW9uKCkgewoKICAgIHZhciBzdGFja2VkID0gZnVuY3Rpb24odG9wVmFsdWUsIGJvdHRvbVZhbHVlKSB7CiAgICAgICAgdmFyIHRvcENvbXAgPSAiIjsKICAgICAgICB2YXIgYm90dG9tQ29tcCA9ICIiOwoKICAgICAgICBpZihfLmlzRnVuY3Rpb24odG9wVmFsdWUpKSB7CiAgICAgICAgICAgIHRvcENvbXAgPSB0b3BWYWx1ZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9wQ29tcCA9ICc8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLXRvcCI+JyArIHRvcFZhbHVlICsgJzwvZGl2PicKICAgICAgICB9CgogICAgICAgIGlmIChfLmlzRnVuY3Rpb24oYm90dG9tVmFsdWUpKSB7CiAgICAgICAgICAgIGJvdHRvbUNvbXAgPSBib3R0b21WYWx1ZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYm90dG9tQ29tcCA9ICc8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLWJvdHRvbSI+JyArIGJvdHRvbVZhbHVlICsgJzwvZGl2PicKICAgICAgICB9CgogICAgICAgIHJldHVybiB0b3BDb21wICsgYm90dG9tQ29tcAogICAgfTsKCiAgICAvLyBBbmQgdGhpcyBpcyB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgY3VzdG9tIGZ1bmN0aW9uIOKAiwogICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uKHRtcGxfbmFtZSwgdG1wbF9kYXRhKSB7CgogICAgICAgIGlmICggIXJlbmRlci50bXBsX2NhY2hlICkgewoKCgogICAgICAgICAgICByZW5kZXIudG1wbF9jYWNoZSA9IHt9OwogICAgICAgIH0KICAgICAgICBpZiAoIXJlbmRlci50bXBsX2NhY2hlW3RtcGxfbmFtZV0pIHsKICAgICAgICAgICAgdmFyIHRtcGxfZGlyID0gJy9zaWduYWwvYXNzZXRzL2FwcC9wdnMvaGJzLXRlbXBsYXRlcyc7CiAgICAgICAgICAgIHZhciB0bXBsX3VybCA9IHRtcGxfZGlyICsgJy8nICsgdG1wbF9uYW1lICsgJy5oYnMnOwoKICAgICAgICAgICAgdmFyIHRtcGxfc3RyaW5nID0gIiI7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IHRtcGxfdXJsLAogICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICB0bXBsX3N0cmluZyA9IGRhdGEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZW5kZXIudG1wbF9jYWNoZVt0bXBsX25hbWVdID0gSGFuZGxlYmFycy5jb21waWxlKHRtcGxfc3RyaW5nKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZW5kZXIudG1wbF9jYWNoZVt0bXBsX25hbWVdKHRtcGxfZGF0YSkKICAgIH07CgogICAgdmFyIGhic19wYXJ0aWFsID0gZnVuY3Rpb24odG1wbF9uYW1lKSB7CiAgICAgICAgaWYgKCFoYnNfcGFydGlhbC50bXBsX2NhY2hlKSB7CiAgICAgICAgICAgIGhic19wYXJ0aWFsLnRtcGxfY2FjaGUgPSB7fQogICAgICAgIH0KCiAgICAgICAgaWYgKCFoYnNfcGFydGlhbC50bXBsX2NhY2hlW3RtcGxfbmFtZV0pIHsKICAgICAgICAgICAgIHZhciB0bXBsX2RpciA9ICcvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2hicy10ZW1wbGF0ZXMnOwogICAgICAgICAgICB2YXIgdG1wbF91cmwgPSB0bXBsX2RpciArICcvJyArIHRtcGxfbmFtZSArICcuaGJzJzsKCiAgICAgICAgICAgIHZhciB0bXBsX3N0cmluZyA9ICIiOwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOiB0bXBsX3VybCwKICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgdG1wbF9zdHJpbmcgPSBkYXRhCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaGJzX3BhcnRpYWwudG1wbF9jYWNoZVt0bXBsX25hbWVdID0gdG1wbF9zdHJpbmcKICAgICAgICB9CgogICAgICAgIHJldHVybiBoYnNfcGFydGlhbC50bXBsX2NhY2hlW3RtcGxfbmFtZV0KICAgIH07CgogICAgdmFyIGNvbXBvc2VVcmwgPSBmdW5jdGlvbihjb250cm9sbGVyLCBhY3Rpb24sIHBhcmFtcykgewogICAgICAgIHZhciB1cmwgPSAiL3NpZ25hbC8iICsgY29udHJvbGxlciArICIvIiArIGFjdGlvbiArIChfLmlzTnVsbChwYXJhbXMpID8gJycgOiAnPycgKyBjb21wb3NlUGFyYW1zKHBhcmFtcykpOwoKICAgICAgICByZXR1cm4gdXJsCiAgICB9OwoKICAgIC8vVE9ETyA6IE5lZWQgdG8gY2hhbmdlIHRoaXMgdG8gaGFuZGxlYmFyIGZvcm0sIFdpbGwgYmUgZG9uZSBsYXRlcgogICAgdmFyIHBvc3RVcmwgPSBmdW5jdGlvbiAocGF0aCwgcGFyYW1zLCBuZXdXaW5kb3cgPSBmYWxzZSkgewoKICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpOwogICAgICAgIGZvcm0ubWV0aG9kID0gInBvc3QiOwogICAgICAgIGZvcm0uYWN0aW9uID0gcGF0aDsKICAgICAgICBmb3JtLmVuY3R5cGUgPSAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIjsKICAgICAgICBpZiAobmV3V2luZG93KSBmb3JtLnRhcmdldCA9ICJfYmxhbmsiOwoKICAgICAgICB2YXIgdG9rZW4gPSAkKCJtZXRhW25hbWU9J19jc3JmJ10iKS5hdHRyKCJjb250ZW50Iik7CiAgICAgICAgdmFyIHBhcmFtZXRlciA9ICQoIm1ldGFbbmFtZT0nX2NzcmZfcGFyYW1ldGVyJ10iKS5hdHRyKCJjb250ZW50Iik7CiAgICAgICAgcGFyYW1zW3BhcmFtZXRlcl0gPSB0b2tlbjsKICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHsKICAgICAgICAgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW5GaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7CiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC50eXBlID0gJ2hpZGRlbic7CiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC5uYW1lID0ga2V5OwogICAgICAgICAgICAgICAgaGlkZGVuRmllbGQudmFsdWUgPSBwYXJhbXNba2V5XTsKICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoaGlkZGVuRmllbGQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7CiAgICAgICAgZm9ybS5zdWJtaXQoKTsKICAgIH0KCiAgICB2YXIgY29tcG9zZVBhcmFtcyA9IGZ1bmN0aW9uKG8pIHsKICAgICAgICByZXR1cm4gXy5tYXAoXy5wYWlycyhvKSwgZnVuY3Rpb24ocCl7cmV0dXJuIHAuam9pbignPScpfSApLmpvaW4oJyYnKQogICAgfTsKCiAgICB2YXIgY2FwaXRhbEl0ID0gZnVuY3Rpb24ocykgewogICAgICAgIHJldHVybiBzICYmIHNbMF0udG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7CiAgICB9OwoKICAgIHZhciBicmVha0l0ID0gZnVuY3Rpb24ocykgewogICAgICAgIHJldHVybiBzID8gcy5zcGxpdCgvKD89W0EtWl0pLykuam9pbignICcpIDogcwogICAgfTsKCiAgICB2YXIgZW5hYmxlX2xvYWRfYnV0dG9uID0gZnVuY3Rpb24oZWxlLCBlbmFibGVkKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICB2YXIgdGFyZ2V0RWxlID0gZWxlLmZpbmQoJy5nbHlwaGljb24nKTsKICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHsKICAgICAgICAgICAgICAgICQodGFyZ2V0RWxlKS5hZGRDbGFzcygncmVmcmVzaC1hbmltYXRlJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKHRhcmdldEVsZSkucmVtb3ZlQ2xhc3MoJ3JlZnJlc2gtYW5pbWF0ZScpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIHZhciBzZXRJbkxvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uKHByb3AsIGRhdGEpIHsKICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwcm9wLCBkYXRhKTsKICAgIH07CgogICAgdmFyIGdldEZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbihwcm9wKSB7CiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb3ApOwogICAgfTsKCiAgICB2YXIgc2V0SlNPTkluTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24ocHJvcCwgZGF0YSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb3AsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTsKICAgIH07CgogICAgdmFyIGdldEpTT05Gcm9tTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKHByb3ApIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9wKSk7CiAgICB9OwoKICAgIHZhciBsb2NhbFN0b3JhZ2VVdGlsID0gewogICAgICAgIHNldFByb3AgOiBzZXRJbkxvY2FsU3RvcmFnZSwKICAgICAgICBnZXRQcm9wIDogZ2V0RnJvbUxvY2FsU3RvcmFnZSwKICAgICAgICBzZXRKU09OIDogc2V0SlNPTkluTG9jYWxTdG9yYWdlLAogICAgICAgIGdldEpTT04gOiBnZXRKU09ORnJvbUxvY2FsU3RvcmFnZQogICAgfTsKCiAgICB2YXIgZ2V0UXVlcnlTdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIga2V5ID0gZmFsc2UsIHJlcyA9IHt9LCBpdG0gPSBudWxsOwogICAgICAgIC8vIGdldCB0aGUgcXVlcnkgc3RyaW5nIHdpdGhvdXQgdGhlID8KICAgICAgICB2YXIgcXMgPSBsb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpOwogICAgICAgIC8vIGNoZWNrIGZvciB0aGUga2V5IGFzIGFuIGFyZ3VtZW50CiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXS5sZW5ndGggPiAxKQogICAgICAgICAgICBrZXkgPSBhcmd1bWVudHNbMF07CiAgICAgICAgLy8gbWFrZSBhIHJlZ2V4IHBhdHRlcm4gdG8gZ3JhYiBrZXkvdmFsdWUKICAgICAgICB2YXIgcGF0dGVybiA9IC8oW14mPV0rKT0oW14mXSopL2c7CiAgICAgICAgLy8gbG9vcCB0aGUgaXRlbXMgaW4gdGhlIHF1ZXJ5IHN0cmluZywgZWl0aGVyCiAgICAgICAgLy8gZmluZCBhIG1hdGNoIHRvIHRoZSBhcmd1bWVudCwgb3IgYnVpbGQgYW4gb2JqZWN0CiAgICAgICAgLy8gd2l0aCBrZXkvdmFsdWUgcGFpcnMKICAgICAgICB3aGlsZSAoaXRtID0gcGF0dGVybi5leGVjKHFzKSkgewogICAgICAgICAgICBpZiAoa2V5ICE9PSBmYWxzZSAmJiBkZWNvZGVVUklDb21wb25lbnQoaXRtWzFdKSA9PT0ga2V5KQogICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpdG1bMl0pOwogICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09IGZhbHNlKQogICAgICAgICAgICAgICAgcmVzW2RlY29kZVVSSUNvbXBvbmVudChpdG1bMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChpdG1bMl0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGtleSA9PT0gZmFsc2UgPyByZXMgOiBudWxsOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIHJlbmRlciA6IHJlbmRlciwKICAgICAgICBzdGFja2VkOiBzdGFja2VkLAogICAgICAgIGNvbXBvc2VVcmw6IGNvbXBvc2VVcmwsCiAgICAgICAgcG9zdFVybDogcG9zdFVybCwKICAgICAgICBjb21wb3NlUGFyYW1zOiBjb21wb3NlUGFyYW1zLAogICAgICAgIGNhcGl0YWxJdDogY2FwaXRhbEl0LAogICAgICAgIGJyZWFrSXQ6IGJyZWFrSXQsCiAgICAgICAgaGJzX3BhcnRpYWw6IGhic19wYXJ0aWFsLAogICAgICAgIGVuYWJsZV9sb2FkX2J1dHRvbjogZW5hYmxlX2xvYWRfYnV0dG9uLAogICAgICAgIGxvY2FsU3RvcmFnZVV0aWw6IGxvY2FsU3RvcmFnZVV0aWwsCiAgICAgICAgZ2V0UXVlcnlTdHJpbmc6IGdldFF1ZXJ5U3RyaW5nCiAgICB9Cn0pKCk7CgoKCnZhciBzaWduYWwgPSBzaWduYWwgfHwge307CgpzaWduYWwuYWxlcnRzX3V0aWxzID0gKGZ1bmN0aW9uKCkgewogICAgdmFyIHByaW9yaXRpZXM7CiAgICB2YXIgd29ya2Zsb3dTdGF0ZXM7CgogICAgdmFyIGdldF9wcmlvcml0aWVzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgdXJsOiAiL3NpZ25hbC93b3JrZmxvdy9wcmlvcml0aWVzIiwKICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgICAgICAgIHByaW9yaXRpZXMgPSByZXN1bHQKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gcHJpb3JpdGllcwogICAgfTsKCiAgICB2YXIgZ2V0X3dvcmtmbG93U3RhdGVzID0gZnVuY3Rpb24oaW5pdERhdGEpIHsKICAgICAgICAkLmFqYXgoewogICAgICAgICAgICB1cmw6ICIvc2lnbmFsL3dvcmtmbG93L3dvcmtmbG93U3RhdGUiLAogICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgIGRhdGE6IGluaXREYXRhLAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgICAgICAgIHdvcmtmbG93U3RhdGVzID0gcmVzdWx0CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIHdvcmtmbG93U3RhdGVzCiAgICB9OwoKICAgIHZhciBwcmlvcml0aWVzX3NlbGVjdGlvbnMgPSBmdW5jdGlvbihkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICB2YXIgbmV3X3NlbGVjdCA9ICc8ZGl2PjxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBhZGQtY3Vyc29yIiAnICsKICAgICAgICAgICAgJ3N0eWxlPSJoZWlnaHQ6IDMwcHg7IiBvbmNoYW5nZT0idXBkYXRlUHJpb3JpdHkodGhpcy52YWx1ZSwnICsgcm93LmlkICsgJykiPic7CiAgICAgICAgdmFyIHByaW9yaXR5ID0gcm93LnByaW9yaXR5OwoKICAgICAgICB2YXIgdGhlX3NlbGVjdCA9IF8ucmVkdWNlKHByaW9yaXRpZXMsIGZ1bmN0aW9uKG0sIHApewogICAgICAgICAgICBpZiAocC52YWx1ZSA9PSBwcmlvcml0eSkKICAgICAgICAgICAgICAgIHJldHVybiBtICsgJzxvcHRpb24gdmFsdWU9IicgKyBwLnZhbHVlICsgJyIgc2VsZWN0ZWQ+ICcgKyBwLmRpc3BsYXlOYW1lICsgJzwvb3B0aW9uPic7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJldHVybiBtICsgJzxvcHRpb24gdmFsdWU9IicgKyBwLnZhbHVlICsgJyI+JyArIHAuZGlzcGxheU5hbWUgKyAnPC9vcHRpb24+JwogICAgICAgIH0sIG5ld19zZWxlY3QpOwogICAgICAgIHRoZV9zZWxlY3QgPSB0aGVfc2VsZWN0ICsgJzwvc2VsZWN0PjwvZGl2Pic7CiAgICAgICAgcmV0dXJuIHRoZV9zZWxlY3Q7CiAgICB9OwoKICAgIHZhciB3b3JrZmxvd19zZWxlY3Rpb25zID0gZnVuY3Rpb24oZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgdmFyIG5ld19zZWxlY3QgPSAnPGRpdj48c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgYWRkLWN1cnNvciIgc3R5bGU9ImhlaWdodDogMzBweDsiIG9uY2hhbmdlPSJ1cGRhdGVTdGF0dXModGhpcy52YWx1ZSwnICsgcm93LmlkICsgJykiPic7CiAgICAgICAgdmFyIHdvcmtmbG93U3RhdGUgPSByb3cud29ya2Zsb3dTdGF0ZTsKCiAgICAgICAgdmFyIHRoZV9zZWxlY3QgPSBfLnJlZHVjZSh3b3JrZmxvd1N0YXRlcywgZnVuY3Rpb24obSwgd3MpewogICAgICAgICAgICBpZiAod3MudmFsdWUgPT0gd29ya2Zsb3dTdGF0ZSkKICAgICAgICAgICAgICAgIHJldHVybiBtICsgJzxvcHRpb24gdmFsdWU9IicgKyB3cy52YWx1ZSArICciIHNlbGVjdGVkPiAnICsgd3MuZGlzcGxheU5hbWUgKyAnPC9vcHRpb24+JzsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmV0dXJuIG0gKyAnPG9wdGlvbiB2YWx1ZT0iJyArIHdzLnZhbHVlICsgJyI+JyArIHdzLmRpc3BsYXlOYW1lICsgJzwvb3B0aW9uPicKICAgICAgICB9LCBuZXdfc2VsZWN0KTsKICAgICAgICB0aGVfc2VsZWN0ID0gdGhlX3NlbGVjdCArICc8L3NlbGVjdD48L2Rpdj4nOwogICAgICAgIHJldHVybiB0aGVfc2VsZWN0OwogICAgfTsKCiAgICB2YXIgY29tcG9zZV9lZGl0X3N0YXRlX2xpbmsgPSBmdW5jdGlvbih2YWx1ZSwgcm93SWQsIGZpbGVkTmFtZSkgewogICAgICAgIHJldHVybiAiPHNwYW4+IiArIHZhbHVlICsgIjwvc3Bhbj4iICsgIjxhIGhyZWY9JyMnIGNsYXNzPSdlZGl0LXN0YXRlJyA+IiArCiAgICAgICAgICAgICI8aSBjbGFzcz0nZmEgZmEtc2hhcmUtYWx0IHB1bGwtcmlnaHQnIGRhdGEtZmllbGQ9JyIgICsgZmlsZWROYW1lICsKICAgICAgICAgICAgIicgZGF0YS1pZD0nIiArIHJvd0lkICsgIicvPjwvYT4iCiAgICB9OwoKICAgIHZhciBzdGF0ZV9jaGFuZ2VkID0gZnVuY3Rpb24oZXh0cmFfdmFsdWVzKSB7CiAgICAgICAgJCgiI3ZhbHVlU2VsZWN0IikuY2hhbmdlKGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICB2YXIgYXZhaWxhYmxlX2V4dHJhX3ZhbHVlcyA9IGV4dHJhX3ZhbHVlc1skKHZhbHVlU2VsZWN0KS52YWwoKV0KICAgICAgICB9KQogICAgfTsKCiAgICAvL1RPRE8gdGhpcyBpcyBhIHRlbXAgc29sdXRpb24gZm9yIHRoZSBKU09OIGZvcm1hdC4gSXQgc2hvdWxkIGNvbWUgZnJvbSBzZXJ2ZXIgc2lkZQogICAgLy9GdW5jdGlvbiB0aGF0IGNvbnZlcnRzIHRoZSBqc29uIGlubmVyaHRtbCB0byB0aGUgY3N2IHZhbHVlcy4KICAgIC8vSXQgY29udmVydHMgdGhlIHByb3BlcnRpZXMgd2hpY2ggYXJlIG5vdCBpZC4KICAgIHZhciBzaG93X2pzb25fYXNfY3N2ID0gZnVuY3Rpb24gKGVsZW1lbnRDbGFzcykgewogICAgICAgICQoIi4iICsgZWxlbWVudENsYXNzKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmIChpc05hTigkKHRoaXMpLmh0bWwoKSkpIHsKICAgICAgICAgICAgICAgICAgdmFyIG1vZGlmaWVkVmFsID0gIiI7CiAgICAgICAgICAgICAgICAgIHZhciBqc29uVmFsID0gSlNPTi5wYXJzZSgkKHRoaXMpLmh0bWwoKSk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIG9iaiBpbiBqc29uVmFsKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uVmFsLmhhc093blByb3BlcnR5KG9iaikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uVmFsW29ial0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25WYWxbb2JqXS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCAhPSAnaWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkVmFsID0gbW9kaWZpZWRWYWwgKyBqc29uVmFsW29ial1bcHJvcF0gKyAiLCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICQodGhpcykuaHRtbChtb2RpZmllZFZhbC5zbGljZSgwLCAtMSkpCiAgICAgICAgICAgICAgfQogICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgIC8vRG8gbm90aGluZwogICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyKQogICAgICAgICAgIH0KICAgICAgICAgICAkKHRoaXMpLmh0bWwoKQogICAgICAgIH0pCiAgICB9OwoKICAgIHZhciBpbml0X21hdGNoZWRfYWxlcnRzX3RhYmxlID0gZnVuY3Rpb24odGFibGVFbGUsIHVybCkgewogICAgICAgIHZhciB0YWJsZSA9IHRhYmxlRWxlLkRhdGFUYWJsZSh7CiAgICAgICAgICAgICJsYW5ndWFnZSI6IHsKICAgICAgICAgICAgICAgICJ1cmwiOiAiL3NpZ25hbC9hc3NldHMvaTE4bi9kYXRhVGFibGVzXyIgKyB1c2VyTG9jYWxlICsgIi5qc29uIgogICAgICAgICAgICB9LAoKICAgICAgICAgICAgYWpheDogewogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhU3JjOiAnJywKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsc3RhdHVzLGVycm9yKXt9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhb0NvbHVtbnM6WwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG1EYXRhOiAnbmFtZScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbURhdGE6ICdwcm9kdWN0U2VsZWN0aW9uJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBtRGF0YTogJ3RvcGljJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBtRGF0YTogJ2RldGVjdGVkRGF0ZScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbURhdGE6ICdkaXNwb3NpdGlvbicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgZG9tOiAnJwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gdGFibGUKICAgIH07CgogICAgdmFyIGdldFNpZ25hbE5hbWVMaXN0ID0gZnVuY3Rpb24oc2lnbmFsc0FuZFRvcGljcykgewogICAgICAgIHZhciBzaWduYWxBbmRUb3BpY3MgPSAnJzsKICAgICAgICAkLmVhY2goc2lnbmFsc0FuZFRvcGljcywgZnVuY3Rpb24oaSwgb2JqKXsKICAgICAgICAgICAgdmFyIHVybCA9IHNpZ25hbERldGFpbFVybCArICc/aWQ9JyArIG9ialsnc2lnbmFsSWQnXTsKICAgICAgICAgICAgc2lnbmFsQW5kVG9waWNzID0gc2lnbmFsQW5kVG9waWNzICsgJzxzcGFuIGNsYXNzPSJjbGljayI+PGEgaHJlZj0iJyArIHVybCArICciPicgKyBvYmpbJ25hbWUnXSArICc8L2E+PC9zcGFuPiZuYnNwOycKICAgICAgICAgICAgc2lnbmFsQW5kVG9waWNzID0gc2lnbmFsQW5kVG9waWNzICsgIiwiCiAgICAgICAgfSk7CiAgICAgICAgaWYoc2lnbmFsQW5kVG9waWNzLmxlbmd0aCA+IDEpCiAgICAgICAgICAgIHJldHVybiAnPGRpdj4nICsgc2lnbmFsQW5kVG9waWNzLnN1YnN0cmluZygwLCBzaWduYWxBbmRUb3BpY3MubGVuZ3RoIC0gMSkgKyAnPC9kaXY+JzsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJldHVybiAnLSc7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgZ2V0X3ByaW9yaXRpZXM6IGdldF9wcmlvcml0aWVzLAogICAgICAgIHByaW9yaXRpZXNfc2VsZWN0aW9uczogcHJpb3JpdGllc19zZWxlY3Rpb25zLAogICAgICAgIGdldF93b3JrZmxvd1N0YXRlczogZ2V0X3dvcmtmbG93U3RhdGVzLAogICAgICAgIHdvcmtmbG93X3NlbGVjdGlvbnM6IHdvcmtmbG93X3NlbGVjdGlvbnMsCiAgICAgICAgY29tcG9zZV9lZGl0X3N0YXRlX2xpbms6IGNvbXBvc2VfZWRpdF9zdGF0ZV9saW5rLAogICAgICAgIHN0YXRlX2NoYW5nZTogc3RhdGVfY2hhbmdlZCwKICAgICAgICBzaG93X2pzb25fYXNfY3N2OiBzaG93X2pzb25fYXNfY3N2LAogICAgICAgIGluaXRfbWF0Y2hlZF9hbGVydHNfdGFibGU6IGluaXRfbWF0Y2hlZF9hbGVydHNfdGFibGUsCiAgICAgICAgZ2V0U2lnbmFsTmFtZUxpc3Q6IGdldFNpZ25hbE5hbWVMaXN0CiAgICB9Cn0pKCk7Cgp2YXIgc2lnbmFsID0gc2lnbmFsIHx8IHt9OwoKc2lnbmFsLmxpc3RfdXRpbHMgPSAoZnVuY3Rpb24gKCkgewogICAgdmFyIGZsYWdfaXQgPSBmdW5jdGlvbiAoZmxhZywgaWQpIHsKICAgICAgICB2YXIgdGhlSHRtbCA9ICc8aSBjbGFzcz0iZmEgZmEtZmxhZy1vIHRleHQtbXV0ZWQgcngtbGlzdC1mbGFnIiBkYXRhLWlkPSInICsgaWQgKyAnIj48L2k+JwogICAgICAgIGlmIChmbGFnKSB7CiAgICAgICAgICAgIHRoZUh0bWwgPSAnPGkgY2xhc3M9ImZhIGZhLWZsYWcgdGV4dC1wcmltYXJ5IHJ4LWxpc3QtZmxhZyIgZGF0YS1pZD0iJyArIGlkICsgJyI+PC9pPicKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoZUh0bWwKICAgIH07CgogICAgdmFyIGZsYWdfaGFuZGxlciA9IGZ1bmN0aW9uIChjb250cm9sbGVyLCBhY3Rpb24pIHsKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnJ4LWxpc3QtZmxhZycsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciBlbGUgPSBlLnRhcmdldDsKICAgICAgICAgICAgdmFyIGlkID0gJChlbGUpLmF0dHIoJ2RhdGEtaWQnKTsKCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6ICIvc2lnbmFsLyIgKyBjb250cm9sbGVyICsgIi8iICsgYWN0aW9uICsgIj9pZD0iICsgaWQsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5mbGFnZ2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5yZW1vdmVDbGFzcygnZmEtZmxhZy1vJykucmVtb3ZlQ2xhc3MoJ3RleHQtbXV0ZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLmFkZENsYXNzKCdmYS1mbGFnJykuYWRkQ2xhc3MoJ3RleHQtcHJpbWFyeScpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5hZGRDbGFzcygnZmEtZmxhZy1vJykuYWRkQ2xhc3MoJ3RleHQtbXV0ZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLnJlbW92ZUNsYXNzKCdmYS1mbGFnJykucmVtb3ZlQ2xhc3MoJ3RleHQtcHJpbWFyeScpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgIH0pCiAgICB9OwoKICAgIHZhciBwcmlvcml0eV9saW5rID0gZnVuY3Rpb24gKHByaW9yaXR5LCBpZCkgewogICAgICAgIHZhciBpY29uX3VybCA9IGNvbXBvc2VfcHJpb3JpdHlfaWNvbihwcmlvcml0eSk7CiAgICAgICAgcmV0dXJuICc8YSBocmVmPSIjIiBjbGFzcz0iY2hhbmdlLXByaW9yaXR5Ij48aW1nIGRhdGEtZmllbGQ9InByaW9yaXR5IiBkYXRhLWluZm89InJvdyIgZGF0YS1pZD0iJyArCiAgICAgICAgICAgIGlkICsgJyIgZGF0YS12YWx1ZT0iJyArIHByaW9yaXR5ICsgJyIgc3JjPSInICsgaWNvbl91cmwgKyAnIi8+PC9hPicKICAgIH07CgogICAgdmFyIGNvbXBvc2VfcHJpb3JpdHlfaWNvbiA9IGZ1bmN0aW9uIChwcmlvcml0eSkgewogICAgICAgIHZhciBpY29uX3VybCA9ICIvc2lnbmFsL2Fzc2V0cy9pY29ucy9kZWZhdWx0X3ByaW9yaXR5LnBuZyI7CgogICAgICAgIGlmIChfLmNvbnRhaW5zKFsnaGlnaCcsICdsb3cnLCAnbWVkaXVtJ10sIHByaW9yaXR5LnRvTG93ZXJDYXNlKCkpKSB7CiAgICAgICAgICAgIGljb25fdXJsID0gIi9zaWduYWwvYXNzZXRzL2ljb25zLyIgKyBwcmlvcml0eS50b0xvd2VyQ2FzZSgpICsgIl9wcmlvcml0eS5wbmciOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaWNvbl91cmw7CiAgICB9OwoKICAgIHZhciBjaGFuZ2VfcHJpb3JpdHkgPSBmdW5jdGlvbiAocHJpb3JpdHlFbGUsIHByaW9yaXR5KSB7CiAgICAgICAgdmFyIGljb25fdXJsID0gY29tcG9zZV9wcmlvcml0eV9pY29uKHByaW9yaXR5KTsKICAgICAgICAkKHByaW9yaXR5RWxlKS5hdHRyKCJzcmMiLCBpY29uX3VybCk7CiAgICAgICAgJChwcmlvcml0eUVsZSkuYXR0cigiZGF0YS12YWx1ZSIsIHByaW9yaXR5KTsKICAgIH07CgogICAgdmFyIGNoYW5nZV9wcmlvcml0eVRlc3QgPSBmdW5jdGlvbiAocHJpb3JpdHlFbGUsIHByaW9yaXR5KSB7CiAgICAgICAgJChwcmlvcml0eUVsZSkuYXR0cigiZGF0YS12YWx1ZSIsIHByaW9yaXR5KTsKICAgIH07CgogICAgY2hhbmdlX3ByaW9yaXR5VGVzdAoKICAgIHZhciBmaW5kX2ZpZWxkID0gZnVuY3Rpb24gKHRhYmxlX3Jvd19lbGUsIGF0dHJfbmFtZSkgewogICAgICAgIHJldHVybiAkKHRhYmxlX3Jvd19lbGUpLmZpbmQoIltkYXRhLWF0dHJpYnV0ZS1uYW1lPSciICsgYXR0cl9uYW1lICsgIiddIikKICAgIH07CgogICAgdmFyIHNldF92YWx1ZSA9IGZ1bmN0aW9uICh0YWJsZV9yb3dfZWxlLCBhdHRyX25hbWUsIGlkLCBkYXRhX2Z1biwgYXBwX25hbWUpIHsKICAgICAgICB2YXIgZWxlID0gZmluZF9maWVsZCh0YWJsZV9yb3dfZWxlLCBhdHRyX25hbWUpOwogICAgICAgIGVsZS5odG1sKGRhdGFfZnVuKGlkLCBhcHBfbmFtZSkpOwogICAgfTsKCiAgICB2YXIgZ2V0X2R1ZV9pbiA9IGZ1bmN0aW9uIChpZCwgYXBwX25hbWUpIHsKICAgICAgICB2YXIgZHVlSW4gPSAwOwogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHVybDogIi9zaWduYWwvYWxlcnQvZHVlSW4/YWxlcnRJZD0iICsgaWQgKyAiJmFwcE5hbWU9IiArIGFwcF9uYW1lLAogICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICBkdWVJbiA9IGRhdGEucmVzdWx0OwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGR1ZUluCiAgICB9OwoKICAgIHZhciBkdWVfaW5fY29tcCA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZSA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAiPGRpdiBkYXRhLWF0dHJpYnV0ZS1uYW1lPSdkdWVJbicgc3R5bGUgPSAnY29sb3I6cmVkJz4iICsgdmFsdWUgKyAiPC9kaXY+IjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIjxkaXYgZGF0YS1hdHRyaWJ1dGUtbmFtZT0nZHVlSW4nPiIgKyB2YWx1ZSArICI8L2Rpdj4iOwogICAgICAgIH0KICAgIH07CgogICAgdmFyIGFzc2lnbmVkX3RvX2NvbXAgPSBmdW5jdGlvbiAoaWQsIGFzc2lnbmVkVG8pIHsKICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IGNsYXNzPSJhc3NpZ25lZFRvQ29udGFpbmVyIj48c2VsZWN0IGNsYXNzPSJhc3NpZ25lZFRvU2VsZWN0IGZvcm0tY29udHJvbCBzZWxlY3QyIj48L3NlbGVjdD48aSBjbGFzcz0ibWRpIG1kaS1zcGluIG1kaS1sb2FkaW5nIGFzc2lnblRvUHJvY2Vzc2luZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPjwvaT48L2Rpdj4nOwogICAgICAgIHJldHVybiBodG1sCiAgICB9OwoKICAgIHZhciB0cnVuY2F0ZVRleHRBbmRTaG93VG9vbHRpcCA9IGZ1bmN0aW9uIChjdXRvZmYsIHdvcmRicmVhaywgZXNjYXBlSHRtbCkgewogICAgICAgIHZhciBlc2MgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8iL2csICcmcXVvdDsnKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQsIHR5cGUsIHJvdykgewogICAgICAgICAgICAvLyBPcmRlciwgc2VhcmNoIGFuZCB0eXBlIGdldCB0aGUgb3JpZ2luYWwgZGF0YQogICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2Rpc3BsYXknKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHR5cGVvZiBkICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgZCAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkID0gZC50b1N0cmluZygpOyAvLyBjYXN0IG51bWJlcnMKCiAgICAgICAgICAgIGlmIChkLmxlbmd0aCA8PSBjdXRvZmYpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlc2MoZCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzaG9ydGVuZWQgPSBkLnN1YnN0cigwLCBjdXRvZmYgLSAxKTsKCiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGxhc3Qgd2hpdGUgc3BhY2UgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcKICAgICAgICAgICAgaWYgKHdvcmRicmVhaykgewogICAgICAgICAgICAgICAgc2hvcnRlbmVkID0gc2hvcnRlbmVkLnJlcGxhY2UoL1xzKFteXHNdKikkLywgJycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgdW5jb250cm9sbGVkIEhUTUwgaW5wdXQKICAgICAgICAgICAgaWYgKGVzY2FwZUh0bWwpIHsKICAgICAgICAgICAgICAgIHNob3J0ZW5lZCA9IGVzYyhzaG9ydGVuZWQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPSJlbGxpcHNpcyIgdGl0bGU9IicgKyBlc2MoZCkgKyAnIj4nICsgc2hvcnRlbmVkICsgJyYjODIzMDs8L3NwYW4+JzsKICAgICAgICB9OwogICAgfTsKCiAgICB2YXIgYWRkX2ZpbHRlcnMgPSBmdW5jdGlvbiAodGFibGUsIGZpbHRlcnMsIGZpbHRlcl90b2dnbGVfYnRfY29udGFpbmVyKSB7CgogICAgICAgIHZhciB5YWRjZl9maWx0ZXJzID0gXy5maWx0ZXIoZmlsdGVycywgZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgaWYgKGZbMV0gIT0gJ2N1c3RvbWl6ZWQnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgY3VzdF9maWx0ZXJzID0gXy5kaWZmZXJlbmNlKGZpbHRlcnMsIHlhZGNmX2ZpbHRlcnMpOwoKICAgICAgICB5YWRjZi5pbml0KHRhYmxlLCBfLm1hcCh5YWRjZl9maWx0ZXJzLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICBpZiAoaXRlbVsyXSA9PSB0cnVlKQogICAgICAgICAgICAgICAgcmV0dXJuIHtjb2x1bW5fbnVtYmVyOiBpdGVtWzBdLCBmaWx0ZXJfdHlwZTogaXRlbVsxXSwgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiAneCd9OwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4ge2NvbHVtbl9udW1iZXI6IGl0ZW1bMF0sIGZpbHRlcl90eXBlOiBpdGVtWzFdLCBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlfTsKICAgICAgICB9KSk7CgogICAgICAgIGlmIChmaWx0ZXJfdG9nZ2xlX2J0X2NvbnRhaW5lcikgewogICAgICAgICAgICBhZGRfZmlsdGVyX3RvZ2dsZV9idXR0b24oJ2lkeHh4eHh4JywgZmlsdGVyX3RvZ2dsZV9idF9jb250YWluZXIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGN1c3RfZmlsdGVycykgewogICAgICAgICAgICBfLmVhY2goY3VzdF9maWx0ZXJzLCBmdW5jdGlvbiAoZikgewogICAgICAgICAgICAgICAgJCh0YWJsZS5jb2x1bW4oZlswXSkuaGVhZGVyKCkpLmFwcGVuZChjcmVhdGVfc3RhY2tlZF9maWx0ZXIoZlswXSkpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBjcmVhdGVfc3RhY2tlZF9maWx0ZXIgPSBmdW5jdGlvbiAoaWR4KSB7CiAgICAgICAgcmV0dXJuICQoIjxpbnB1dCB0eXBlPSd0ZXh0JyBkYXRhLWluZGV4PSciICsgaWR4ICsgIicgY2xhc3M9J2NvbHVtbi1maWx0ZXInIHBsYWNlaG9sZGVyPSdUeXBlIHRvIGZpbHRlcic+IiArCiAgICAgICAgICAgICI8aW5wdXQgdHlwZT0ndGV4dCcgZGF0YS1pbmRleD0nIiArIGlkeCArICInIGNsYXNzPSdjb2x1bW4tZmlsdGVyJyBwbGFjZWhvbGRlcj0nVHlwZSB0byBmaWx0ZXInPiIpOwogICAgfTsKCiAgICB2YXIgYWRkX2ZpbHRlcl90b2dnbGVfYnV0dG9uID0gZnVuY3Rpb24gKHRhYmxlX2lkLCBjb250YWluZXIpIHsKICAgICAgICAkKCcueWFkY2YtZmlsdGVyLXdyYXBwZXIsIC5jb2x1bW4tZmlsdGVyJykuaGlkZSgpOwogICAgICAgICQoJy5jb2x1bW4tZmlsdGVyJykuY2xpY2soZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwogICAgICAgICQoJy5jb2x1bW4tZmlsdGVyJykub24oJ2tleXVwJywgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAvLyBQZXJmb3JtIHNlYXJjaAogICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmRhdGEoJ2luZGV4Jyk7CiAgICAgICAgICAgICQodGFibGVfaWQpLkRhdGFUYWJsZSgpLmNvbHVtbihpbmRleCkuc2VhcmNoKCQodGhpcykudmFsKCkpLmRyYXcoKTsKICAgICAgICB9KTsKICAgICAgICB2YXIgZmlsdGVyVG9nZ2xlID0gIjxpIGNsYXNzPSd0YWJsZS1maWx0ZXItdG9nZ2xlIGdseXBoaWNvbiBnbHlwaGljb24tZmlsdGVyJyBkYXRhLXRhYmxlPSciICsgdGFibGVfaWQgKwogICAgICAgICAgICAiJyBvbmNsaWNrPSdzaWduYWwubGlzdF91dGlscy5oYW5kbGVfZmlsdGVyX3RvZ2dsZScgZGF0YS1zaG93LWZpbHRlcj0ndHJ1ZSc+PC9pPiI7CiAgICAgICAgdmFyIHRvZ2dsZV9idXR0b24gPSAkLnBhcnNlSFRNTChmaWx0ZXJUb2dnbGUpOwogICAgICAgIGlmICghKF8uaXNVbmRlZmluZWQoY29udGFpbmVyKSAmJiBfLmlzTnVsbChjb250YWluZXIpKSkgewogICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKHRvZ2dsZV9idXR0b24pOwogICAgICAgIH0KCiAgICAgICAgJChkb2N1bWVudCkub24oJ2ZpbHRlci10b2dnbGUtaW5pdCcsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgJCgnLnRhYmxlLWZpbHRlci10b2dnbGUnKS5jbGljayhmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgICAgICB2YXIgaGlkZV9zaG93X2ZpdGxlciA9IGZ1bmN0aW9uICh0YWJsZUlkLCBoaWRlT3JTaG93KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZGVPclNob3cgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGFibGVJZCArICdfd3JhcHBlciAueWFkY2YtZmlsdGVyLXdyYXBwZXIsLmNvbHVtbi1maWx0ZXInKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCh0YWJsZUlkICsgJ193cmFwcGVyIC55YWRjZi1maWx0ZXItd3JhcHBlciwuY29sdW1uLWZpbHRlcicpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZhciB0YXJnZXRGaWx0ZXJUb2dnbGUgPSAkKGV2dC50YXJnZXQpOwogICAgICAgICAgICAgICAgdmFyIHRhYmxlSWQgPSB0YXJnZXRGaWx0ZXJUb2dnbGUuZGF0YSgndGFibGUnKTsKICAgICAgICAgICAgICAgIHZhciBzaG93RmlsdGVyID0gdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3Nob3ctZmlsdGVyJyk7CiAgICAgICAgICAgICAgICBpZiAoc2hvd0ZpbHRlciA9PT0gJ3RydWUnKSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3Nob3dGaWx0ZXInLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgICAgICBoaWRlX3Nob3dfZml0bGVyKHRhYmxlSWQsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3Nob3dGaWx0ZXInLCAndHJ1ZScpOwogICAgICAgICAgICAgICAgICAgIGhpZGVfc2hvd19maXRsZXIodGFibGVJZCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdmaWx0ZXItdG9nZ2xlLWluaXQnKTsKICAgICAgICByZXR1cm4gJCh0b2dnbGVfYnV0dG9uKTsKICAgIH07CgogICAgdmFyIGhhbmRsZV9maWx0ZXJfdG9nZ2xlID0gZnVuY3Rpb24gKGV2dCkgewogICAgICAgICQodGhpcykuYXR0cigndGFyZ2V0LXRhYmxlJyk7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgZmxhZ19pdDogZmxhZ19pdCwKICAgICAgICBmbGFnX2hhbmRsZXI6IGZsYWdfaGFuZGxlciwKICAgICAgICBwcmlvcml0eV9saW5rOiBwcmlvcml0eV9saW5rLAogICAgICAgIGNoYW5nZV9wcmlvcml0eTogY2hhbmdlX3ByaW9yaXR5LAogICAgICAgIGZpbmRfZmllbGQ6IGZpbmRfZmllbGQsCiAgICAgICAgc2V0X3ZhbHVlOiBzZXRfdmFsdWUsCiAgICAgICAgZ2V0X2R1ZV9pbjogZ2V0X2R1ZV9pbiwKICAgICAgICBkdWVfaW5fY29tcDogZHVlX2luX2NvbXAsCiAgICAgICAgYXNzaWduZWRfdG9fY29tcDogYXNzaWduZWRfdG9fY29tcCwKICAgICAgICB0cnVuY2F0ZVRleHRBbmRTaG93VG9vbHRpcDogdHJ1bmNhdGVUZXh0QW5kU2hvd1Rvb2x0aXAsCiAgICAgICAgYWRkX2ZpbHRlcnM6IGFkZF9maWx0ZXJzLAogICAgICAgIGhhbmRsZV9maWx0ZXJfdG9nZ2xlOiBoYW5kbGVfZmlsdGVyX3RvZ2dsZSwKICAgICAgICBhZGRfZmlsdGVyX3RvZ2dsZV9idXR0b246IGFkZF9maWx0ZXJfdG9nZ2xlX2J1dHRvbgogICAgfQp9KSgpOwp2YXIgc2lnbmFsID0gc2lnbmFsIHx8IHt9CgpzaWduYWwuYWN0aXZpdGllc191dGlscyA9IChmdW5jdGlvbigpIHsKICAgIHZhciBhY3Rpdml0eV90YWJsZTsKICAgIHZhciBzb3J0aW5nQ291bnQgPSAzOwoKICAgIHZhciBpbml0X2FjdGl2aXRpZXNfdGFibGUgPSBmdW5jdGlvbih0YWJsZSwgdXJsLCBhcHBUeXBlKSB7CiAgICAgICAgdmFyIGNvbHVtbnMgPSBjcmVhdGVfYWN0aXZpdHlfY29sdW1uX2RhdGEoYXBwVHlwZSk7CiAgICAgICAgYWN0aXZpdHlfdGFibGUgPSAkKHRhYmxlKS5EYXRhVGFibGUoewogICAgICAgICAgICAic1BhZ2luYXRpb25UeXBlIjogImJvb3RzdHJhcCIsCgogICAgICAgICAgICAibGFuZ3VhZ2UiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogIi4uL2Fzc2V0cy9pMThuL2RhdGFUYWJsZXNfIiArIHVzZXJMb2NhbGUgKyAiLmpzb24iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhamF4IjogewogICAgICAgICAgICAgICAgInVybCI6IHVybCwKICAgICAgICAgICAgICAgICJkYXRhU3JjIjogIiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZm5EcmF3Q2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQoJ2FbaHJlZj0iI2FjdGl2aXRpZXMiXScpLm9uKCJzaG93bi5icy50YWIiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICQoJyNhY3Rpdml0aWVzVGFibGUnKS5EYXRhVGFibGUoKS5hamF4LnVybChnZXRBY3Rpdml0eVVybCgpKS5sb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgYWRkR3JpZFNob3J0Y3V0cygnI2FjdGl2aXRpZXNUYWJsZScpOwogICAgICAgICAgICAgICAgICAgIHJlbW92ZUdyaWRTaG9ydGN1dHMoJyNhbGVydHNEZXRhaWxzVGFibGUnKTsKICAgICAgICAgICAgICAgICAgICByZW1vdmVHcmlkU2hvcnRjdXRzKCcjYXJjaGl2ZWRBbGVydHNUYWJsZScpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhYVNvcnRpbmciOiBbW3NvcnRpbmdDb3VudCwgImRlc2MiXV0sCiAgICAgICAgICAgICJiTGVuZ3RoQ2hhbmdlIjogdHJ1ZSwKICAgICAgICAgICAgImlEaXNwbGF5TGVuZ3RoIjogMTAsCiAgICAgICAgICAgICJiQXV0b1dpZHRoIjogZmFsc2UsCiAgICAgICAgICAgICJhb0NvbHVtbnMiOiBjb2x1bW5zLAogICAgICAgICAgICAic2Nyb2xsWCI6IHRydWUsCiAgICAgICAgICAgICJzY3JvbGxZIjoiY2FsYygxMDB2aCAtIDMwMXB4KSIsCiAgICAgICAgICAgICJhdXRvV2lkdGgiOnRydWUsCiAgICAgICAgICAgIGNvbHVtbkRlZnM6IFt7CiAgICAgICAgICAgICAgICAidGFyZ2V0cyI6ICdfYWxsJywKICAgICAgICAgICAgICAgICJyZW5kZXIiOiAkLmZuLmRhdGFUYWJsZS5yZW5kZXIudGV4dCgpCiAgICAgICAgICAgIH1dCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGFjdGl2aXR5X3RhYmxlOwogICAgfTsKCiAgICB2YXIgY3JlYXRlX2FjdGl2aXR5X2NvbHVtbl9kYXRhID0gZnVuY3Rpb24oYXBwVHlwZSkgewogICAgICAgIHZhciBhb0NvbHVtbnMgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJ0eXBlIiwKICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgaWYocm93LnR5cGU9PSdQRUNEaXNzb2NpYXRlZCcpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BFQyBEaXNzb2NpYXRlZCcKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYocm93LnR5cGU9PSdQRUNBc3NvY2lhdGVkJykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BFQyBBc3NvY2lhdGVkJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2lnbmFsLnV0aWxzLmJyZWFrSXQocm93LnR5cGUpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm1EYXRhIjogImRldGFpbHMiLAogICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbihkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICByb3cuZGV0YWlscyA9IHJvdy5kZXRhaWxzLnJlcGxhY2UoLzxicj4vZywnXG4nKQogICAgICAgICAgICAgICAgICAgIGlmIChyb3cuanVzdGlmaWNhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjxzcGFuIGNsYXNzPSd3b3JkLXdyYXAtYnJlYWstd29yZCc+Iitlc2NhcGVIVE1MKHJvdy5kZXRhaWxzKSArICIgLS0gd2l0aCBKdXN0aWZpY2F0aW9uICciICsgZXNjYXBlSFRNTChyb3cuanVzdGlmaWNhdGlvbikgKyAiJyIrIjwvc3Bhbj4iOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvblRleHQgPSBwcm9jZXNzX2Rlc2NyaXB0aW9uKHJvdy5kZXRhaWxzKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI8c3BhbiBjbGFzcz0nd29yZC13cmFwLWJyZWFrLXdvcmQnPiIrZGVzY3JpcHRpb25UZXh0KyI8L3NwYW4+IjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTIwMCBjb2wtbWF4LTMwMCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm1EYXRhIjogInBlcmZvcm1lZEJ5IiwKICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgIGlmKHJvdy5wZXJmb3JtZWRCeURlcHQgJiYgcm93LnBlcmZvcm1lZEJ5RGVwdCAhPSAnJykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXNjYXBlSFRNTChyb3cucGVyZm9ybWVkQnkgKyAiICgiICsgcm93LnBlcmZvcm1lZEJ5RGVwdCArICIpIikKICAgICAgICAgICAgICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cucGVyZm9ybWVkQnkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm1EYXRhIjogInRpbWVzdGFtcCIsCiAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIGZ1bGwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnY29sLW1pbi0xNTAnCiAgICAgICAgICAgIH0KICAgICAgICBdOwogICAgICAgIGlmKGFwcFR5cGUgPT0gJ1NpbmdsZSBDYXNlIEFsZXJ0JykgewogICAgICAgICAgICBhb0NvbHVtbnMuc3BsaWNlKDAsMCx7CiAgICAgICAgICAgICAgICAibURhdGEiOiAiY2FzZU51bWJlciIsCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMTAwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSgyLDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogInN1c3BlY3QiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTIwMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMywwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJldmVudE5hbWUiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoNSwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJjdXJyZW50QXNzaWdubWVudCIsCiAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VyckFzc2lnbm1lbnQKICAgICAgICAgICAgICAgICAgICBpZiAocm93LmN1cnJlbnRBc3NpZ25tZW50RGVwdCAmJiByb3cuY3VycmVudEFzc2lnbm1lbnREZXB0ICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJBc3NpZ25tZW50ID0gcm93LmN1cnJlbnRBc3NpZ25tZW50ICsgIiAoIiArIHJvdy5jdXJyZW50QXNzaWdubWVudERlcHQgKyAiKSIKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjdXJyQXNzaWdubWVudCA9IChyb3cuY3VycmVudEFzc2lnbm1lbnQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVIVE1MKGN1cnJBc3NpZ25tZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnY29sLW1pbi0xNTAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb3J0aW5nQ291bnQgPSA3CiAgICAgICAgfWVsc2UgaWYoYXBwVHlwZSA9PSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnKSB7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMCwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJhcnRpY2xlSWQiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTEwMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMiwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJzZWFyY2hTdHJpbmciLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTEwMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMywwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJwcm9kdWN0TmFtZSIsCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMjAwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSg0LDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogImV2ZW50TmFtZSIsCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMTUwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSg2LDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogImN1cnJlbnRBc3NpZ25tZW50IiwKICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgIHZhciBjdXJyQXNzaWdubWVudAogICAgICAgICAgICAgICAgICAgIGlmIChyb3cuY3VycmVudEFzc2lnbm1lbnREZXB0ICYmIHJvdy5jdXJyZW50QXNzaWdubWVudERlcHQgIT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VyckFzc2lnbm1lbnQgPSByb3cuY3VycmVudEFzc2lnbm1lbnQgKyAiICgiICsgcm93LmN1cnJlbnRBc3NpZ25tZW50RGVwdCArICIpIgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJBc3NpZ25tZW50ID0gKHJvdy5jdXJyZW50QXNzaWdubWVudCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZUhUTUwoY3VyckFzc2lnbm1lbnQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHNvcnRpbmdDb3VudCA9IDgKICAgICAgICB9IGVsc2UgaWYgKGFwcFR5cGUgPT0gJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JyB8fCBhcHBUeXBlID09ICdFVkRBUyBBbGVydCcpIHsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSgxLDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogInN1c3BlY3QiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMiwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJldmVudE5hbWUiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoNCwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJjdXJyZW50QXNzaWdubWVudCIsCiAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VyckFzc2lnbm1lbnQKICAgICAgICAgICAgICAgICAgICBpZiAocm93LmN1cnJlbnRBc3NpZ25tZW50RGVwdCAmJiByb3cuY3VycmVudEFzc2lnbm1lbnREZXB0ICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJBc3NpZ25tZW50ID0gcm93LmN1cnJlbnRBc3NpZ25tZW50ICsgIiAoIiArIHJvdy5jdXJyZW50QXNzaWdubWVudERlcHQgKyAiKSIKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjdXJyQXNzaWdubWVudCA9IChyb3cuY3VycmVudEFzc2lnbm1lbnQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVIVE1MKGN1cnJBc3NpZ25tZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnY29sLW1pbi0xNTAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb3J0aW5nQ291bnQgPSA2CiAgICAgICAgfQogICAgICAgIHJldHVybiBhb0NvbHVtbnMKICAgIH07CgogICAgdmFyIHJlbG9hZF9hY3Rpdml0eV90YWJsZSA9IGZ1bmN0aW9uKCkgewoKICAgICAgICBpZiAodHlwZW9mIGFjdGl2aXR5X3RhYmxlICE9ICJ1bmRlZmluZWQiICYmIGFjdGl2aXR5X3RhYmxlICE9IG51bGwpIHsKICAgICAgICAgICAgYWN0aXZpdHlfdGFibGUuYWpheC5yZWxvYWQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmxvZygiVW5hYmxlIHRvIHJlbG9hZCB0aGUgYWN0aXZpdHkgdGFibGUuIFBsZWFzZSByZWZyZXNoIHRoZSBwYWdlLiIpCiAgICAgICAgfQoKICAgIH07CgogICAgdmFyIHByb2Nlc3NfZGVzY3JpcHRpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvblN0cikgewogICAgICAgIGlmICh0eXBlb2YgZGVzY3JpcHRpb25TdHIgIT0gInVuZGVmaW5lZCIgJiYgZGVzY3JpcHRpb25TdHIgIT0gbnVsbCkgewogICAgICAgICAgICB2YXIgZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25TdHIuc3BsaXQoJ3wnKTsKICAgICAgICAgICAgLy92YXIgZm9ybWF0dGVkU3RyaW5nID0gJycKICAgICAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9ICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleDxkZXNjcmlwdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbnNbaW5kZXhdOwogICAgICAgICAgICAgICAgdmFyIGRlc2NTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgZGVzY1NwYW4uaW5uZXJIVE1MID0gZXNjYXBlSFRNTChkZXNjcmlwdGlvbik7CiAgICAgICAgICAgICAgICBkZXNjU3Bhbi5pbm5lckhUTUwgPSBkZXNjU3Bhbi5pbm5lckhUTUwucmVwbGFjZSgvXG4vZywgJzxicj4nKQogICAgICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nLmFwcGVuZENoaWxkKGRlc2NTcGFuKTsKICAgICAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RyaW5nLmlubmVySFRNTDsKICAgICAgICB9CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgaW5pdF9hY3Rpdml0aWVzX3RhYmxlIDogaW5pdF9hY3Rpdml0aWVzX3RhYmxlLAogICAgICAgIHByb2Nlc3NfZGVzY3JpcHRpb24gOiBwcm9jZXNzX2Rlc2NyaXB0aW9uLAogICAgICAgIHJlbG9hZF9hY3Rpdml0eV90YWJsZSA6IHJlbG9hZF9hY3Rpdml0eV90YWJsZQogICAgfQp9KSgpOwoKZnVuY3Rpb24gZ2V0QWN0aXZpdHlVcmwoKSB7CiAgICBpZiAoYXBwbGljYXRpb25OYW1lID09PSBBTEVSVF9DT05GSUdfVFlQRS5MSVRFUkFUVVJFX1NFQVJDSF9BTEVSVCkgewogICAgICAgIHJldHVybiBhbGVydEFjdGl2aXRpZXM7CiAgICB9IGVsc2UgaWYgKGFwcGxpY2F0aW9uTmFtZSA9PT0gQUxFUlRfQ09ORklHX1RZUEUuU0lHTkFMX01BTkFHRU1FTlQpIHsKICAgICAgICByZXR1cm4gYWN0aXZpdHlVcmw7CiAgICB9CiAgICByZXR1cm4gYWxlcnRBY3Rpdml0aWVzVXJsICsgJz9leGVjdXRlZElkTGlzdD0nICsgZXhlY3V0ZWRJZExpc3QgKyAiJmFwcFR5cGU9IiArIGFwcGxpY2F0aW9uTmFtZQoKfQoKCkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2kxOG4nLAogICAgZnVuY3Rpb24oc3RyKXsKICAgICAgICByZXR1cm4gKCAodHlwZW9mIGkxOG4pICE9PSAndW5kZWZpbmVkJyA/IHN0ciA6IHN0cikKICAgIH0KKTsKCkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ3NlbGVjdCcsIGZ1bmN0aW9uKG5hbWUsIHNlbGVjdGVkVmFsdWUsIG9wdGlvbnMsIGRpc3BfZmllbGQsIHZhbHVlX2ZpZWxkKSB7CiAgICB2YXIgb3V0ID0gIjxzZWxlY3QgY2xhc3M9J2Zvcm0tY29udHJvbCBzZWxlY3RCb3gnIGlkPVwnIiArIG5hbWUgKyAiXCcgbmFtZT0iICsgbmFtZSArICI+XG4iOwogICAgXy5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKHYpIHsKICAgICAgICBvdXQgKz0gIjxvcHRpb24gdmFsdWU9JyIgKyB2W3ZhbHVlX2ZpZWxkXSArICInIiArCiAgICAgICAgICAgICh2W3ZhbHVlX2ZpZWxkXSA9PSBzZWxlY3RlZFZhbHVlW3ZhbHVlX2ZpZWxkXSA/ICIgc2VsZWN0ZWQgIiA6ICIiKSArICIgPiIgKwogICAgICAgICAgICBlc2NhcGVIVE1MKHZbZGlzcF9maWVsZF0pICsgIjwvb3B0aW9uPlxuIgogICAgfSk7CiAgICBvdXQgKz0gIjwvc2VsZWN0PiI7CgogICAgcmV0dXJuIG5ldyBIYW5kbGViYXJzLlNhZmVTdHJpbmcob3V0KQp9KTsKCkhhbmRsZWJhcnMucmVnaXN0ZXJQYXJ0aWFsKCdkYXRlX3BpY2tlcl90ZW1wbGF0ZScsIHNpZ25hbC51dGlscy5oYnNfcGFydGlhbCgnZGF0ZV9waWNrZXJfdGVtcGxhdGUnKSk7CgovL0hhbmRsZWJhciBoZWxwZXIgdG8gaW1pdGF0ZSB0aGUgaWYgY29uZGl0aW9ucwpIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZl9lcScsIGZ1bmN0aW9uKGEsIGIsIG9wdHMpIHsKICAgIGlmIChhID09IGIpIHsKICAgICAgICByZXR1cm4gb3B0cy5mbih0aGlzKTsKICAgIH0KfSk7CgovL0hhbmRsZWJhciBoZWxwZXIgdG8gaW1pdGF0ZSB0aGUgaWYuLmVsc2UgY29uZGl0aW9ucwpIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZl9lbHNlX2VxJywgZnVuY3Rpb24oYSwgYiwgb3B0cykgewogICAgaWYgKGEgPT0gYikgewogICAgICAgIHJldHVybiBvcHRzLmZuKHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gb3B0cy5pbnZlcnNlKHRoaXMpOwogICAgfQp9KTsKdmFyIHNob3dUb3BpY1dpZGdldCA9IGZ1bmN0aW9uICgpIHsKICAgICQoIiN0b3BpYyIpLnNlbGVjdDIoewogICAgICAgIHRhZ3M6IHRydWUsCiAgICAgICAgcGxhY2Vob2xkZXI6ICJTZWxlY3QgdG9waWMiLAogICAgICAgIGFsbG93Q2xlYXI6IHRydWUsCiAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICBjcmVhdGVUYWc6IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICAgICAgdmFyIHRlcm0gPSAkLnRyaW0ocGFyYW1zLnRlcm0pOwogICAgICAgICAgICBpZiAodGVybSAhPSAiIikgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBpZDogdGVybSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXJtCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICB9CiAgICB9KTsKfTsKLy89IHJlcXVpcmUgYXBwL3B2cy9jb21tb24vcnhfY29tbW9uLmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvY29tbW9uL3J4X2xpc3RfdXRpbHMuanMKLy89IHJlcXVpcmUgYXBwL3B2cy9jb21tb24vcnhfaGFuZGxlYmFyX2V4dC5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL3RvcGljL2F0dGFjaEFsZXJ0VG9Ub3BpYy5qcwoKdmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCnZhciB0b3BpY0RhdGE7CnZhciBjb2x1bW5TZXE7CnZhciBpc1ZpZXdJbnN0YW5jZSA9IDE7Cgp2YXIgc2lnbmFsQWxlcnRUeXBlID0gewogICAgU0lOR0xFX0NBU0VfQUxFUlQ6ICJTaW5nbGUgQ2FzZSBBbGVydCIsCiAgICBBR0dSRUdBVEVfQUxFUlQ6ICJBZ2dyZWdhdGUgQ2FzZSBBbGVydCIsCiAgICBFVkRBU19BTEVSVDogIkV2ZGFzIEFsZXJ0IiwKICAgIEFESE9DX0FMRVJUOiAiQWQtSG9jIEFsZXJ0IiwKICAgIExJVEVSQVRVUkVfU0VBUkNIX0FMRVJUOiAiTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQiCn0KCnNpZ25hbC5hbGVydFJldmlldyA9IChmdW5jdGlvbiAoKSB7CgogICAgdmFyIGlkcyA9IFtdOwogICAgdmFyIHJvd3MgPSBbXTsKCiAgICB2YXIgYXBwbHlCdXNpbmVzc1J1bGVzID0gZnVuY3Rpb24gKHJvdywgZGF0YSkgewogICAgICAgIC8vQXBwbHkgdGhlIGV1ZHJhIHJ1bGVzLgogICAgICAgIGlmIChkYXRhLmZvcm1hdCkgewogICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShkYXRhLmZvcm1hdCk7CiAgICAgICAgICAgIHZhciB0ZXh0T2JqOwogICAgICAgICAgICAkLmVhY2gob2JqLnRleHQudGMsIGZ1bmN0aW9uIChpbmRleCwgZGF0YSkgewogICAgICAgICAgICAgICAgdGV4dE9iaiA9ICQocm93KS5maW5kKCcuJyArIGRhdGEpOwogICAgICAgICAgICAgICAgdGV4dE9iai5jc3MoJ2NvbG9yJywgb2JqLnRleHQuY29sb3IpOwogICAgICAgICAgICAgICAgaWYgKG9iai50ZXh0LmJvbGQpIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0T2JqLmNzcygnZm9udC13ZWlnaHQnLCAnOTAwJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob2JqLnRleHQuaXRhbGljKSB7CiAgICAgICAgICAgICAgICAgICAgdGV4dE9iai5jc3MoJ2ZvbnQtc3R5bGUnLCAnaXRhbGljJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob2JqLnRleHQudW5kZXJsaW5lKSB7CiAgICAgICAgICAgICAgICAgICAgdGV4dE9iai5jc3MoJ3RleHQtZGVjb3JhdGlvbicsICd1bmRlcmxpbmUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQuZWFjaChvYmouY2VsbC50YywgZnVuY3Rpb24gKGluZGV4LCBkYXRhKSB7CiAgICAgICAgICAgICAgICAkKHJvdykuZmluZCgnLicgKyBkYXRhKS5wYXJlbnRzKCd0ZCcpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIG9iai5jZWxsLmNvbG9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgZW5hYmxlTWVudVRvb2x0aXBzID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoIi5ncmlkLW1lbnUtdG9vbHRpcCIpLm1vdXNlb3ZlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7CiAgICAgICAgICAgIHZhciB0b29sdGlwVGV4dCA9ICR0aGlzLmF0dHIoImRhdGEtdGl0bGUiKTsKICAgICAgICAgICAgJHRoaXMudG9vbHRpcCh7CiAgICAgICAgICAgICAgICB0aXRsZTogdG9vbHRpcFRleHQsCiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6ICJib3R0b20iCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkdGhpcy50b29sdGlwKCdzaG93Jyk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBzb3J0SWNvbkhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRoQXJyYXkgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCkuY29sdW1ucygpLmhlYWRlcigpOwogICAgICAgIGlmIChpc1ZpZXdJbnN0YW5jZSkgewogICAgICAgICAgICB2YXIgY29sdW1uTmFtZTsKICAgICAgICAgICAgdmFyIGluZGV4T2ZDb2x1bW4gPSAwOwogICAgICAgICAgICBjb2x1bW5TZXEuZXZlcnkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHNlcSA9IGNvbHVtblNlcVtpbmRleE9mQ29sdW1uXS5zZXE7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gc2VxKSB7CiAgICAgICAgICAgICAgICAgICAgY29sdW1uTmFtZSA9IGNvbHVtblNlcVtpbmRleE9mQ29sdW1uXS5uYW1lOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGluZGV4T2ZDb2x1bW4rKzsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLmZpbmQoInRoW2RhdGEtZmllbGQ9IiArIGNvbHVtbk5hbWUgKyAiXSIpLmF0dHIoJ2RhdGEtY29sdW1uLWluZGV4Jyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29sdW1uSW5kZXggPSBpbmRleDsKICAgICAgICB9CiAgICAgICAgJC5lYWNoKHRoQXJyYXksIGZ1bmN0aW9uIChjdXJyZW50SW5kZXgsIGVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzb3J0aW5nX2FzYycpKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NvcnRpbmdfYXNjJyk7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoInNvcnRpbmciKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc29ydGluZ19kZXNjJykpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc29ydGluZ19kZXNjJyk7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoInNvcnRpbmciKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID09IGNvbHVtbkluZGV4ICYmICFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc29ydGluZ19kaXNhYmxlZCcpKSB7CiAgICAgICAgICAgICAgICBpZiAoZGlyID09ICdhc2MnKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzb3J0aW5nJyk7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzb3J0aW5nX2FzYyIpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXIgPT0gJ2Rlc2MnKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzb3J0aW5nJyk7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzb3J0aW5nX2Rlc2MiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKCiAgICAvKioKICAgICAqIFRoZSByZXNldCBtb2RhbCBzY3JlZW4gZnVuY3Rpb24gd2hpY2ggcmVzZXRzIHRoZSBwYXNzd29yZCBkaXYgaW4gdGhlIHdvcmtmbG93IG1vZGFsIHNjcmVlbi4KICAgICAqIFRoaXMgaXMgaW50ZXJuYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGludGVybmFsbHkgaW4gdGhpcyBvYmplY3Qgc2NvcGUuCiAgICAgKi8KICAgIHZhciByZXNldE1vZGFsU2NyZWVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vQ2xlYW4gdXAgdGhlIHRoZSBkaXNwb3NpdGlvbnMgZmllbGRzLgogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI2V4dHJhLXZhbHVlLXNlbGVjdCcpLmh0bWwoIjxvcHRpb24+PC9vcHRpb24+Iik7CiAgICAgICAgLy9IaWRlIHRoZSBwYXNzd29yZAogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI3Bhc3N3b3JkRGl2JykuYWRkQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNpc1Bhc3N3b3JkRW5hYmxlZCcpLnZhbCgwKTsKICAgIH0KCiAgICB2YXIgc2hvd1Bhc3N3b3JkRmllbGQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjcGFzc3dvcmREaXYnKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI2lzUGFzc3dvcmRFbmFibGVkJykudmFsKDEpOwogICAgfQoKICAgIHZhciBjaGFuZ2VXb3JrZmxvd0VkaXRTY3JlZW4gPSBmdW5jdGlvbiAoYXZhaWxhYmxlVmFsdWVzLCB0YXJnZXRWYWwpIHsKCiAgICAgICAgdmFyIGF2YWlsYWJsZVZhbE9iaiA9IF8uZmluZFdoZXJlKGF2YWlsYWJsZVZhbHVlcywge3ZhbHVlOiB0YXJnZXRWYWx9KTsKCiAgICAgICAgaWYgKHR5cGVvZiBhdmFpbGFibGVWYWxPYmogIT0gJ3VuZGVmaW5lZCcgJiYgYXZhaWxhYmxlVmFsT2JqKSB7CiAgICAgICAgICAgIGlmIChhdmFpbGFibGVWYWxPYmouYXBwcm92YWxSZXF1aXJlZCkgewogICAgICAgICAgICAgICAgc2hvd1Bhc3N3b3JkRmllbGQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlc2V0TW9kYWxTY3JlZW4oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9DbGVhbiB1cCB0aGUgdGhlIGRpc3Bvc2l0aW9ucyBmaWVsZHMKICAgICAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjZXh0cmEtdmFsdWUtc2VsZWN0JykuaHRtbCgnJykKCiAgICAgICAgICAgIC8vRmlsbCB1cCB0aGUgZGlzcG9zaXRpb25zIGluIHRoZSBjb21ibwogICAgICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNleHRyYS12YWx1ZS1zZWxlY3QnKS5odG1sKGdldERpc3Bvc2l0aW9uT3B0aW9ucyhhdmFpbGFibGVWYWxPYmopKQogICAgICAgIH0KICAgIH0KCiAgICB2YXIgZ2V0RGlzcG9zaXRpb25PcHRpb25zID0gZnVuY3Rpb24gKGF2YWlsYWJsZVZhbE9iaikgewogICAgICAgIHZhciBkaXNwb3NpdGlvblN0ciA9ICI8b3B0aW9uPjwvb3B0aW9uPiI7CiAgICAgICAgXy5lYWNoKGF2YWlsYWJsZVZhbE9iai5kaXNwb3NpdGlvbnMsIGZ1bmN0aW9uIChkaXNwb3NpdGlvbikgewogICAgICAgICAgICBkaXNwb3NpdGlvblN0ciA9IGRpc3Bvc2l0aW9uU3RyICsKICAgICAgICAgICAgICAgICI8b3B0aW9uIHZhbHVlPVwiIiArIGRpc3Bvc2l0aW9uLnZhbHVlICsgIlwiPiIgKyBkaXNwb3NpdGlvbi5kaXNwbGF5TmFtZSArICI8L29wdGlvbj4iCiAgICAgICAgfSkKICAgICAgICByZXR1cm4gZGlzcG9zaXRpb25TdHIKICAgIH0KCiAgICB2YXIgYXV0aGVudGljYXRlVXNlciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgcmV0dXJuVmFsID0gZmFsc2UKICAgICAgICB2YXIgcGFzc3dvcmRKc29uID0gewogICAgICAgICAgICAicGFzc3dvcmQiOiAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNwYXNzd29yZEF1dGhlbnRpY2F0aW9uJykudmFsKCkKICAgICAgICB9CgogICAgICAgIHZhciBhdXRoVXJsID0gJy9zaWduYWwvdXNlci9hdXRoZW50aWNhdGUnCgogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHVybDogYXV0aFVybCwKICAgICAgICAgICAgZGF0YTogcGFzc3dvcmRKc29uLAogICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuYXV0aG9yaXplZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRydWUKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gZmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmV0dXJuVmFsCiAgICB9CgogICAgdmFyIHRvZ2dsZUVycm9yTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIGlmIChhY3Rpb24gPT0gJ2hpZGUnKSB7CiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsIC5lcnJvck5vdGlmaWNhdGlvbicpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnLmVycm9yTWVzc2FnZScpLmh0bWwoJycpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsIC5lcnJvck5vdGlmaWNhdGlvbicpLnJlbW92ZUNsYXNzKCdoaWRlJykKICAgICAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcuZXJyb3JNZXNzYWdlJykuaHRtbCgnIEF1dGhlbnRpY2F0aW9uIEZhaWxlZCEnKTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBvcGVuQ2FzZUhpc3RvcnlNb2RhbCA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgLy9CaW5kIHRoZSBjbGljayBldmVudCBvbiB0aGUgY2FzZSBoaXN0b3J5IGljb24uCiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5jYXNlLWhpc3RvcnktaWNvbicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dJbmRleCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoaXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KHNlbGVjdGVkUm93SW5kZXgpKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0luZGV4ID0gc2VsZWN0ZWRSb3dJbmRleCAvIDIKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaXNTaWduYWwgPSAkKHRoaXMpLmRhdGEoJ3NpZ25hbCcpOwoKICAgICAgICAgICAgdmFyIHJvd09iamVjdCA9IHt9OwogICAgICAgICAgICBpZiAoIWlzU2lnbmFsKSB7CiAgICAgICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZS5yb3dzKHNlbGVjdGVkUm93SW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlU2luZ2xlUmV2aWV3LnJvdygkKHRoaXMpLnBhcmVudHMoJ3RyJykpLmRhdGEoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY2FzZU51bWJlciA9IHJvd09iamVjdC5jYXNlTnVtYmVyOwogICAgICAgICAgICB2YXIgcHJvZHVjdEZhbWlseSA9IHJvd09iamVjdC5wcm9kdWN0RmFtaWx5OwogICAgICAgICAgICB2YXIgY2FzZVZlcnNpb24gPSByb3dPYmplY3QuY2FzZVZlcnNpb247CiAgICAgICAgICAgIHZhciBwcm9kdWN0TmFtZSA9IHJvd09iamVjdC5wcm9kdWN0TmFtZTsKICAgICAgICAgICAgdmFyIHB0ID0gcm93T2JqZWN0LnByaW1hcnlFdmVudDsKICAgICAgICAgICAgdmFyIGFsZXJ0Q29uZmlnSWQgPSByb3dPYmplY3QuYWxlcnRDb25maWdJZDsKCiAgICAgICAgICAgIHZhciBjYXNlSGlzdG9yeU1vZGFsID0gJCgnI2Nhc2VIaXN0b3J5TW9kYWwnKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjY2FzZU51bWJlciIpLmh0bWwoY2FzZU51bWJlcik7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI3Byb2R1Y3RGYW1pbHkiKS5odG1sKHByb2R1Y3RGYW1pbHkpOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLmZpbmQoIiNjYXNlVmVyc2lvbiIpLnZhbChjYXNlVmVyc2lvbik7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI3Byb2R1Y3ROYW1lIikudmFsKHByb2R1Y3ROYW1lKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjYWxlcnRDb25maWdJZCIpLnZhbChhbGVydENvbmZpZ0lkKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjcHQiKS52YWwocHQpOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLm1vZGFsKCdzaG93Jyk7CgogICAgICAgICAgICBpZih0eXBlb2Ygc2luZ2xlQ2FzZVVwZGF0ZUp1c3RpZmljYXRpb25VcmwgIT0gJ3VuZGVmaW5lZCcpCiAgICAgICAgICAgICAgICB1cGRhdGVKdXN0aWZpY2F0aW9uVXJsID0gc2luZ2xlQ2FzZVVwZGF0ZUp1c3RpZmljYXRpb25Vcmw7CgogICAgICAgICAgICBzaWduYWwuY2FzZUhpc3RvcnlUYWJsZS5pbml0X2Nhc2VfaGlzdG9yeV90YWJsZShjYXNlSGlzdG9yeVVybCk7CiAgICAgICAgICAgIHNpZ25hbC5jYXNlSGlzdG9yeVRhYmxlLmluaXRfY2FzZV9oaXN0b3J5X3RhYmxlX3N1c3BlY3QoY2FzZUhpc3RvcnlTdXNwZWN0VXJsKTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIG9wZW5BbGVydENvbW1lbnRNb2RhbCA9IGZ1bmN0aW9uIChhbGVydFR5cGUsIGFwcGxpY2F0aW9uTmFtZSkgewoKICAgICAgICAvL01vZGFsIG9iamVjdAogICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudE1vZGFsJyk7CiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5jb21tZW50LWljb24nLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpczsKICAgICAgICAgICAgdmFyIGRhdGFJbmZvOwogICAgICAgICAgICB2YXIgaXNDYXNlRGV0YWlsOwogICAgICAgICAgICB2YXIgYXBwVHlwZTsKICAgICAgICAgICAgdmFyIHZhbGlkYXRlZFNpZ25hbElkOwogICAgICAgICAgICB2YXIgY29tbWVudEFsZXJ0VHlwZSA9ICQoJHRoaXMpLmRhdGEoJ25hbWUnKTsKICAgICAgICAgICAgdmFyIGlzU2lnbmFsID0gJCgkdGhpcykuZGF0YSgnc2lnbmFsJyk7CgogICAgICAgICAgICBpZiAoY29tbWVudEFsZXJ0VHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBhbGVydFR5cGUgPSBjb21tZW50QWxlcnRUeXBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZhciBjYXNlSnNvbkFycmF5ID0gW107CiAgICAgICAgICAgIGRhdGFJbmZvID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5mbycpOwogICAgICAgICAgICBpc0Nhc2VEZXRhaWwgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1jb21tZW50Jyk7CgogICAgICAgICAgICBhcHBUeXBlID0gJCgiI2FwcGxpY2F0aW9uIikuaHRtbCgpOwogICAgICAgICAgICBpZiAoYXBwVHlwZSA9PT0gJycpIHsKICAgICAgICAgICAgICAgIGFwcFR5cGUgPSBjb21tZW50TW9kYWwuZmluZCgiI2FwcGxpY2F0aW9uIikuaHRtbCgpOwogICAgICAgICAgICAgICAgdmFsaWRhdGVkU2lnbmFsSWQgPSBjb21tZW50TW9kYWwuZmluZCgiI3ZhbGlkYXRlZFNpZ25hbElkIikuaHRtbCgpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJvd0NvdW50OwogICAgICAgICAgICBpZiAoJCgnI2RldGFpbGVkLXZpZXctY2hlY2tib3gnKS5pcygnOmNoZWNrZWQnKSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93Q291bnQgPSAkKCd0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2VsZWN0ZWRSb3dDb3VudCA+IDEgJiYgJCgkdGhpcykuY2xvc2VzdCgndHInKS5maW5kKCIuY29weS1zZWxlY3QiKS5wcm9wKCJjaGVja2VkIikpIHsKICAgICAgICAgICAgICAgIHZhciB0ZXh0VG9EaXNwbGF5OwogICAgICAgICAgICAgICAgc3dpdGNoIChhcHBsaWNhdGlvbk5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlICdTaW5nbGUgQ2FzZSBBbGVydCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb0Rpc3BsYXkgPSAnQ2FzZSc7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JzoKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRvRGlzcGxheSA9ICdQRUMnOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdFVkRBUyBBbGVydCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb0Rpc3BsYXkgPSAnUEVDJzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnOgogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0VG9EaXNwbGF5ID0gJ0FydGljbGUnOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uJykuc2hvdygpOwogICAgICAgICAgICAgICAgJChjb21tZW50TW9kYWwpLmZpbmQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gc3Bhbi5hbGVydFR5cGVUZXh0JykuaHRtbCh0ZXh0VG9EaXNwbGF5KTsKICAgICAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uIHNwYW4uY291bnQnKS5odG1sKHNlbGVjdGVkUm93Q291bnQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJChjb21tZW50TW9kYWwpLmZpbmQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24nKS5oaWRlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gaW5wdXRbbmFtZT1idWxrT3B0aW9uc10nKS51bmJpbmQoKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc3dpdGNoICgkKHRoaXMpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWxsU2VsZWN0ZWQnOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbkFycmF5ID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYXRlU2luZ2xlQnVsa1Jvd0NvbW1lbnRQcm9jZXNzKGNhc2VKc29uQXJyYXksIGNvbW1lbnRNb2RhbCwgYWxlcnRUeXBlLCBpc0Nhc2VEZXRhaWwsIGlzU2lnbmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmluZEFkZENvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25BcnJheSwgImJ1bGsiLCBhbGVydFR5cGUsIHZhbGlkYXRlZFNpZ25hbElkLCBpc0Nhc2VEZXRhaWwpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdjdXJyZW50JzoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25BcnJheSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBpbml0aWF0ZVNpbmdsZVJvd0NvbW1lbnRQcm9jZXNzKCR0aGlzLCBjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRBZGRDb21tZW50cyhjb21tZW50TW9kYWwsIGNhc2VKc29uQXJyYXksICJyb3ciLCBhbGVydFR5cGUsIHZhbGlkYXRlZFNpZ25hbElkLCBpc0Nhc2VEZXRhaWwpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoZGF0YUluZm8gPT09ICJyb3ciKSB7CiAgICAgICAgICAgICAgICBpbml0aWF0ZVNpbmdsZVJvd0NvbW1lbnRQcm9jZXNzKCR0aGlzLCBjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICBiaW5kQWRkQ29tbWVudHMoY29tbWVudE1vZGFsLCBjYXNlSnNvbkFycmF5LCBkYXRhSW5mbywgYWxlcnRUeXBlLCB2YWxpZGF0ZWRTaWduYWxJZCwgaXNDYXNlRGV0YWlsLCAkdGhpcykKICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgYmluZEFkZENvbW1lbnRzID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25BcnJheSwgZGF0YUluZm8sIGFsZXJ0VHlwZSwgdmFsaWRhdGVkU2lnbmFsSWQsIGlzQ2FzZURldGFpbCwgY3VycmVudFJvdykgewogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuYWRkLWNvbW1lbnRzIikudW5iaW5kKCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgY2FzZUpzb247CiAgICAgICAgICAgIHZhciBjYXNlSnNvbk9iajsKICAgICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICAgIHZhciB1cmw7CiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7CiAgICAgICAgICAgIHZhciBjYXNlSnNvbk9iakFycmF5ID0gW107CiAgICAgICAgICAgIGlmIChkYXRhSW5mbyA9PT0gInJvdyIpIHsKICAgICAgICAgICAgICAgIGNhc2VKc29uID0gY2FzZUpzb25BcnJheVswXTsKCiAgICAgICAgICAgICAgICBpZiAoY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50SWQiKS52YWwoKSkgewogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhbGVydFR5cGUiOiBhbGVydFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb21tZW50IjogY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZGF0ZWRTaWduYWxJZCI6IHZhbGlkYXRlZFNpZ25hbElkLAogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNJZCI6ICQoIiN0b3BpY0lkIikuaHRtbCgpLAogICAgICAgICAgICAgICAgICAgICAgICAiZXhlY3V0ZWRDb25maWdJZCI6IGNhc2VKc29uLmV4ZWN1dGVkQ29uZmlnSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJhZGhvY0FsZXJ0SWQiOiBjYXNlSnNvbi5hZGhvY0FsZXJ0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb25maWdJZCI6IGNhc2VKc29uLmNvbmZpZ0lkLAogICAgICAgICAgICAgICAgICAgICAgICAibGl0ZXJhdHVyZUFsZXJ0SWQiOiBjYXNlSnNvbi5saXRlcmF0dXJlQWxlcnRJZAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5jb21tZW50PT0iIikgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvZGVsZXRlQ29tbWVudCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvdXBkYXRlQ29tbWVudCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvc2F2ZUNvbW1lbnQiOwoKICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogY2FzZUpzb24ucHJvZHVjdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJldmVudE5hbWUiOiBjYXNlSnNvbi5ldmVudE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJwdCI6IGNhc2VKc29uLnB0LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tbWVudHMiOiBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRib3giKS52YWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImNhc2VOdW1iZXIiOiBjYXNlSnNvbi5jYXNlTnVtYmVyLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IGNhc2VKc29uLnByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZGF0ZWRTaWduYWxJZCI6IHZhbGlkYXRlZFNpZ25hbElkLAogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNJZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjdG9waWNJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFzc2lnbmVkVG8iOiBjYXNlSnNvbi5hc3NpZ25lZFRvLAogICAgICAgICAgICAgICAgICAgICAgICAiYWRob2NBbGVydElkIjogY2FzZUpzb24uYWRob2NBbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAiZXhlY3V0ZWRDb25maWdJZCI6IGNhc2VKc29uLmV4ZWN1dGVkQ29uZmlnSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9kdWN0SWQiOiBjYXNlSnNvbi5wcm9kdWN0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJwdENvZGUiOiBjYXNlSnNvbi5wdENvZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb25maWdJZCI6IGNhc2VKc29uLmNvbmZpZ0lkLAogICAgICAgICAgICAgICAgICAgICAgICAibGl0ZXJhdHVyZUFsZXJ0SWQiOiBjYXNlSnNvbi5saXRlcmF0dXJlQWxlcnRJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImFydGljbGVJZCI6IGNhc2VKc29uLmFydGljbGVJZAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmpBcnJheS5wdXNoKGNhc2VKc29uT2JqKTsKICAgICAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iakFycmF5OiBKU09OLnN0cmluZ2lmeShjYXNlSnNvbk9iakFycmF5KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHVybCA9ICIvc2lnbmFsL2FsZXJ0Q29tbWVudC9zYXZlQ29tbWVudCI7CiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dDb3VudDsKICAgICAgICAgICAgICAgIGlmICgkKCcjZGV0YWlsZWQtdmlldy1jaGVja2JveCcpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkJykubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHNlbGVjdGVkUm93Q291bnQ7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWRTaWduYWxJZCA9ICQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKTsKICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbiA9IGNhc2VKc29uQXJyYXlbaW5kZXhdOwoKICAgICAgICAgICAgICAgICAgICAvL0Nhc2UgSlNPTi4KICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogY2FzZUpzb24ucHJvZHVjdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJldmVudE5hbWUiOiBjYXNlSnNvbi5ldmVudE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJwdCI6IGNhc2VKc29uLnB0LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tbWVudHMiOiBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRib3giKS52YWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImNhc2VOdW1iZXIiOiBjYXNlSnNvbi5jYXNlTnVtYmVyLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IGNhc2VKc29uLnByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZGF0ZWRTaWduYWxJZCI6IHZhbGlkYXRlZFNpZ25hbElkLAogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNJZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjdG9waWNJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFzc2lnbmVkVG8iOiBjYXNlSnNvbi5hc3NpZ25lZFRvLAogICAgICAgICAgICAgICAgICAgICAgICAiYWRob2NBbGVydElkIjogY2FzZUpzb24uYWRob2NBbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdElkIjogY2FzZUpzb24ucHJvZHVjdElkLAogICAgICAgICAgICAgICAgICAgICAgICAicHRDb2RlIjogY2FzZUpzb24ucHRDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAiY29uZmlnSWQiOiBjYXNlSnNvbi5jb25maWdJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImxpdGVyYXR1cmVBbGVydElkIjogY2FzZUpzb24ubGl0ZXJhdHVyZUFsZXJ0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcnRpY2xlSWQiOiBjYXNlSnNvbi5hcnRpY2xlSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJleGVjdXRlZENvbmZpZ0lkIjogY2FzZUpzb24uZXhlY3V0ZWRDb25maWdJZAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmpBcnJheS5wdXNoKGNhc2VKc29uT2JqKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iakFycmF5OiBKU09OLnN0cmluZ2lmeShjYXNlSnNvbk9iakFycmF5KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvL1NhdmUgY29tbWVudCBjYWxsCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoImkuaXNQcm9jZXNzaW5nIikuc2hvdygpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiaS5pc1Byb2Nlc3NpbmciKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgLy9Qb3B1bGF0ZSB0aGUgY29tbWVudHMgYWdhaW4gaWYgc2luZ2xlIGNvbW1lbnQgaXMgYWRkZWQuCiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpc0Nhc2VEZXRhaWwgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUluZm8gPT09ICJyb3ciKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbC5hbGVydENvbW1lbnRzLnBvcHVsYXRlX2NvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY29tbWVudGJveCcpLnZhbCgnJykuYmx1cigpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb21tZW50ICE9ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tbWVudEljb24oY3VycmVudFJvdykgOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ29tbWVudEljb24oY3VycmVudFJvdykgOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm1vZGFsLWJhY2tkcm9wJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveFNlbGVjdG9yID0gJ3RhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkJzsKICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCQoY2hlY2tib3hTZWxlY3RvciksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb21tZW50SWNvbih0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJC5Ob3RpZmljYXRpb24ubm90aWZ5KCdzdWNjZXNzJywgJ3RvcCByaWdodCcsICJTdWNjZXNzIiwgIkNvbW1lbnRzIGFkZGVkIHN1Y2Nlc3NmdWxseS4iLCB7YXV0b0hpZGVEZWxheTogMTAwMDB9KTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgaW5pdGlhdGVTaW5nbGVSb3dDb21tZW50UHJvY2VzcyA9IGZ1bmN0aW9uICgkdGhpcywgY2FzZUpzb25BcnJheSwgY29tbWVudE1vZGFsLCBhbGVydFR5cGUsIGlzQ2FzZURldGFpbCwgaXNTaWduYWwpIHsKICAgICAgICB2YXIgYWRob2NBbGVydElkOwogICAgICAgIHZhciBsaXRlcmF0dXJlQWxlcnRJZDsKICAgICAgICB2YXIgYXJ0aWNsZUlkOwoKICAgICAgICB2YXIgcm93T2JqZWN0ID0ge307CiAgICAgICAgaWYgKChhbGVydFR5cGUgPT09ICdBZ2dyZWdhdGUgQ2FzZSBBbGVydCcgfHwgYWxlcnRUeXBlID09PSAnU2luZ2xlIENhc2UgQWxlcnQnIHx8IGFsZXJ0VHlwZSA9PT0gJ0VWREFTIEFsZXJ0JyB8fCBhbGVydFR5cGUgPT09ICdMaXRlcmF0dXJlIFNlYXJjaCBBbGVydCcpICYmICFpc1NpZ25hbCkgewogICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dJbmRleCA9ICQoJHRoaXMpLmNsb3Nlc3QoJ3RyJykuaW5kZXgoKTsKICAgICAgICAgICAgaWYgKGlzQWJzdHJhY3RWaWV3T3JDYXNlVmlldyhzZWxlY3RlZFJvd0luZGV4KSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dJbmRleCA9IHNlbGVjdGVkUm93SW5kZXggLyAyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGUucm93KHNlbGVjdGVkUm93SW5kZXgpLmRhdGEoKTsKICAgICAgICB9IGVsc2UgaWYgKGFsZXJ0VHlwZSA9PT0gJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JykgewogICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZUFnZ1Jldmlldy5yb3coJCgkdGhpcykucGFyZW50cygndHInKSkuZGF0YSgpOwogICAgICAgIH0gZWxzZSBpZiAoYWxlcnRUeXBlID09PSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnKSB7CiAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlTGl0ZXJhdHVyZVJldmlldy5yb3coJCgkdGhpcykucGFyZW50cygndHInKSkuZGF0YSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlU2luZ2xlUmV2aWV3LnJvdygkKCR0aGlzKS5wYXJlbnRzKCd0cicpKS5kYXRhKCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2FzZU51bWJlciA9IHJvd09iamVjdC5jYXNlTnVtYmVyOwogICAgICAgIHZhciBwcm9kdWN0RmFtaWx5ID0gcm93T2JqZWN0LnByb2R1Y3RGYW1pbHk7CiAgICAgICAgdmFyIGNhc2VWZXJzaW9uID0gcm93T2JqZWN0LmNhc2VWZXJzaW9uOwogICAgICAgIHZhciBwcm9kdWN0TmFtZSA9IHJvd09iamVjdC5wcm9kdWN0TmFtZTsKICAgICAgICB2YXIgZXZlbnROYW1lID0gcm93T2JqZWN0LnByZWZlcnJlZFRlcm07CiAgICAgICAgdmFyIHB0ID0gcm93T2JqZWN0LnB0OwogICAgICAgIHZhciBhc3NpZ25lZFRvID0gcm93T2JqZWN0LmFzc2lnbmVkVG8uaWQ7CiAgICAgICAgdmFyIHByb2R1Y3RJZCA9IHJvd09iamVjdC5wcm9kdWN0SWQ7CiAgICAgICAgdmFyIHB0Q29kZSA9IHJvd09iamVjdC5wdENvZGU7CiAgICAgICAgdmFyIGNvbmZpZ0lkID0gcm93T2JqZWN0LmFsZXJ0Q29uZmlnSWQ7CiAgICAgICAgdmFyIGV4ZWN1dGVkQ29uZmlnSWQgPSByb3dPYmplY3QuZXhlY0NvbmZpZ0lkOwoKICAgICAgICBpZiAoYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuQURIT0NfQUxFUlQpIHsKICAgICAgICAgICAgYWRob2NBbGVydElkID0gcm93T2JqZWN0LmlkOwogICAgICAgIH0gZWxzZSBpZiAoYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuTElURVJBVFVSRV9TRUFSQ0hfQUxFUlQpIHsKICAgICAgICAgICAgbGl0ZXJhdHVyZUFsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgICAgIGFydGljbGVJZCA9IHJvd09iamVjdC5hcnRpY2xlSWQKICAgICAgICB9CiAgICAgICAgdmFyIGNhc2VKc29uID0gewogICAgICAgICAgICAiYWxlcnRUeXBlIjogYWxlcnRUeXBlLAogICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IHByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICJjYXNlTnVtYmVyIjogY2FzZU51bWJlciwKICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogcHJvZHVjdE5hbWUsCiAgICAgICAgICAgICJldmVudE5hbWUiOiBldmVudE5hbWUsCiAgICAgICAgICAgICJwdCI6IHB0LAogICAgICAgICAgICAicHRDb2RlIjogcHRDb2RlLAogICAgICAgICAgICAicHJvZHVjdElkIjogcHJvZHVjdElkLAogICAgICAgICAgICAiYXNzaWduZWRUbyI6IGFzc2lnbmVkVG8sCiAgICAgICAgICAgICJleGVjdXRlZENvbmZpZ0lkIjogZXhlY3V0ZWRDb25maWdJZCwKICAgICAgICAgICAgImNvbmZpZ0lkIjogY29uZmlnSWQsCiAgICAgICAgICAgICJhZGhvY0FsZXJ0SWQiOiBhZGhvY0FsZXJ0SWQsCiAgICAgICAgICAgICJsaXRlcmF0dXJlQWxlcnRJZCI6IGxpdGVyYXR1cmVBbGVydElkLAogICAgICAgICAgICAiYXJ0aWNsZUlkIjogYXJ0aWNsZUlkCiAgICAgICAgfTsKCiAgICAgICAgY2FzZUpzb25BcnJheS5wdXNoKGNhc2VKc29uKTsKICAgICAgICB2YXIgY29tbWVudE1ldGFJbmZvID0gIiI7CgogICAgICAgIGlmIChjYXNlSnNvbi5hbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5BR0dSRUdBVEVfQUxFUlQgfHwgY2FzZUpzb24uYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuRVZEQVNfQUxFUlQpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiAoY2FzZUpzb24uZXZlbnROYW1lKSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIChjYXNlSnNvbi5wcm9kdWN0TmFtZSkgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICBjb21tZW50TWV0YUluZm8gPSAiIgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29tbWVudE1ldGFJbmZvID0gJzxzcGFuIGlkPSJwcm9kdWN0TmFtZSI+JyArIGNhc2VKc29uLnByb2R1Y3ROYW1lICsgJzwvc3Bhbj4gLSA8c3BhbiBpZD0iZXZlbnROYW1lIj4nICsgY2FzZUpzb24uZXZlbnROYW1lICsgJzwvc3Bhbj4nICsgJzxzcGFuIGNsYXNzPSJoaWRkZW4iIGlkPSJwcm9kdWN0SWQiPicgKyBjYXNlSnNvbi5wcm9kdWN0SWQgKyAnPC9zcGFuPicgKwogICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz0iaGlkZGVuIiBpZD0icHRDb2RlIj4nICsgY2FzZUpzb24ucHRDb2RlICsgJzwvc3Bhbj4nCiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodHlwZW9mIChjYXNlSnNvbi5jYXNlTnVtYmVyKSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIChjYXNlSnNvbi5wcm9kdWN0RmFtaWx5KSA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICIiCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb21tZW50TWV0YUluZm8gPSAnPHNwYW4gaWQ9ImNhc2VOdW1iZXIiPicgKyBjYXNlSnNvbi5jYXNlTnVtYmVyICsgJzwvc3Bhbj4gLSA8c3BhbiBpZD0icHJvZHVjdEZhbWlseSI+JyArIGNhc2VKc29uLnByb2R1Y3RGYW1pbHkgKyAnPC9zcGFuPicKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnQtbWV0YS1pbmZvIikuaHRtbChjb21tZW50TWV0YUluZm8pOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjYXNzaWduZWRUbyIpLmh0bWwoYXNzaWduZWRUbyk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNjb25maWdJZCIpLmh0bWwoY29uZmlnSWQpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjYXBwbGljYXRpb24iKS5odG1sKGNhc2VKc29uLmFsZXJ0VHlwZSk7CgogICAgICAgIC8vUG9wdWxhdGUgdGhlIGV4aXN0aW5nIGNvbW1lbnRzIGFuZCBiaW5kIGV2ZW50cyB0byB0aGVtIGluIGNhc2Ugb2Ygc2luZ2xlIGNvbW1lbnQuCiAgICAgICAgaWYgKHR5cGVvZiBpc0Nhc2VEZXRhaWwgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICQoJyNsb2FkaW5nQ29tbWVudHMnKS5odG1sKCcnKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNpZ25hbC5hbGVydENvbW1lbnRzLnBvcHVsYXRlX2NvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pOwogICAgICAgIH0KICAgICAgICAkKCIjY29tbWVudE1vZGFsIikub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgnI2NvbW1lbnRib3gnKS52YWwoJycpOwogICAgICAgICAgICAkKCcuYWRkLWNvbW1lbnRzJykuaHRtbCgnQWRkJyk7CiAgICAgICAgICAgICQoIi5jcmVhdGVkQnkiKS50ZXh0KCcnKTsKICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgaW5pdGlhdGVTaW5nbGVCdWxrUm93Q29tbWVudFByb2Nlc3MgPSBmdW5jdGlvbiAoY2FzZUpzb25BcnJheSwgY29tbWVudE1vZGFsLCBhbGVydFR5cGUsIGlzQ2FzZURldGFpbCwgaXNTaWduYWwpIHsKICAgICAgICB2YXIgaW5kZXhTZXQgPSBuZXcgU2V0KCk7CiAgICAgICAgdmFyIGNoZWNrYm94U2VsZWN0b3I7CiAgICAgICAgaWYgKCQoJyNkZXRhaWxlZC12aWV3LWNoZWNrYm94JykuaXMoJzpjaGVja2VkJykpIHsKICAgICAgICAgICAgY2hlY2tib3hTZWxlY3RvciA9ICd0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNoZWNrYm94U2VsZWN0b3IgPSAndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgIH0KICAgICAgICAkLmVhY2goJChjaGVja2JveFNlbGVjdG9yKSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpbmRleFNldC5hZGQoKCQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpKSk7CiAgICAgICAgfSk7CiAgICAgICAgaW5kZXhTZXQuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICAgICAgdmFyIGFkaG9jQWxlcnRJZDsKICAgICAgICAgICAgdmFyIGxpdGVyYXR1cmVBbGVydElkOwogICAgICAgICAgICB2YXIgYXJ0aWNsZUlkOwogICAgICAgICAgICB2YXIgcm93T2JqZWN0ID0ge307CiAgICAgICAgICAgIGlmICgoYWxlcnRUeXBlID09PSAnQWdncmVnYXRlIENhc2UgQWxlcnQnIHx8IGFsZXJ0VHlwZSA9PT0gJ1NpbmdsZSBDYXNlIEFsZXJ0JyB8fCBhbGVydFR5cGUgPT09ICdFVkRBUyBBbGVydCcgfHwgYWxlcnRUeXBlID09PSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnKSAmJiAhaXNTaWduYWwpIHsKICAgICAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlLnJvd3MoaW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgfSBlbHNlIGlmIChhbGVydFR5cGUgPT09ICdBZ2dyZWdhdGUgQ2FzZSBBbGVydCcpIHsKICAgICAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlQWdnUmV2aWV3LnJvd3MoaW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlU2luZ2xlUmV2aWV3LnJvd3MoaW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNhc2VOdW1iZXIgPSByb3dPYmplY3QuY2FzZU51bWJlcjsKICAgICAgICAgICAgdmFyIHByb2R1Y3RGYW1pbHkgPSByb3dPYmplY3QucHJvZHVjdEZhbWlseTsKICAgICAgICAgICAgdmFyIGNhc2VWZXJzaW9uID0gcm93T2JqZWN0LmNhc2VWZXJzaW9uOwogICAgICAgICAgICB2YXIgcHJvZHVjdE5hbWUgPSByb3dPYmplY3QucHJvZHVjdE5hbWU7CiAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSByb3dPYmplY3QucHJlZmVycmVkVGVybTsKICAgICAgICAgICAgdmFyIHB0ID0gcm93T2JqZWN0LnB0OwogICAgICAgICAgICB2YXIgYXNzaWduZWRUbyA9IHJvd09iamVjdC5hc3NpZ25lZFRvLmlkOwogICAgICAgICAgICB2YXIgcHJvZHVjdElkID0gcm93T2JqZWN0LnByb2R1Y3RJZDsKICAgICAgICAgICAgdmFyIHB0Q29kZSA9IHJvd09iamVjdC5wdENvZGU7CiAgICAgICAgICAgIHZhciBjb25maWdJZCA9IHJvd09iamVjdC5hbGVydENvbmZpZ0lkOwogICAgICAgICAgICB2YXIgZXhlY3V0ZWRDb25maWdJZCA9IHJvd09iamVjdC5leGVjQ29uZmlnSWQ7CgogICAgICAgICAgICBpZiAoYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuQURIT0NfQUxFUlQpIHsKICAgICAgICAgICAgICAgIGFkaG9jQWxlcnRJZCA9IHJvd09iamVjdC5pZDsKICAgICAgICAgICAgfSBlbHNlIGlmIChhbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5MSVRFUkFUVVJFX1NFQVJDSF9BTEVSVCkgewogICAgICAgICAgICAgICAgbGl0ZXJhdHVyZUFsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgICAgICAgICBhcnRpY2xlSWQgPSByb3dPYmplY3QuYXJ0aWNsZUlkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGNhc2VKc29uID0gewogICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICJwcm9kdWN0RmFtaWx5IjogcHJvZHVjdEZhbWlseSwKICAgICAgICAgICAgICAgICJjYXNlTnVtYmVyIjogY2FzZU51bWJlciwKICAgICAgICAgICAgICAgICJwcm9kdWN0TmFtZSI6IHByb2R1Y3ROYW1lLAogICAgICAgICAgICAgICAgImV2ZW50TmFtZSI6IGV2ZW50TmFtZSwKICAgICAgICAgICAgICAgICJwdCI6IHB0LAogICAgICAgICAgICAgICAgInB0Q29kZSI6IHB0Q29kZSwKICAgICAgICAgICAgICAgICJwcm9kdWN0SWQiOiBwcm9kdWN0SWQsCiAgICAgICAgICAgICAgICAiYXNzaWduZWRUbyI6IGFzc2lnbmVkVG8sCiAgICAgICAgICAgICAgICAiZXhlY3V0ZWRDb25maWdJZCI6IGV4ZWN1dGVkQ29uZmlnSWQsCiAgICAgICAgICAgICAgICAiY29uZmlnSWQiOiBjb25maWdJZCwKICAgICAgICAgICAgICAgICJhZGhvY0FsZXJ0SWQiOiBhZGhvY0FsZXJ0SWQsCiAgICAgICAgICAgICAgICAibGl0ZXJhdHVyZUFsZXJ0SWQiOiBsaXRlcmF0dXJlQWxlcnRJZCwKICAgICAgICAgICAgICAgICJhcnRpY2xlSWQiOiBhcnRpY2xlSWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY2FzZUpzb25BcnJheS5wdXNoKGNhc2VKc29uKQogICAgICAgIH0pOwoKICAgICAgICAvL1NldCB2YWx1ZXMgdG8gdGhlIG1vZGFsIGVsZW1lbnRzLgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjbG9hZGluZ0NvbW1lbnRzIikuaGlkZSgpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudC1tZXRhLWluZm8iKS5odG1sKCIiKTsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiLnByZXZpb3VzLWNvbW1lbnRzIikuaHRtbCgiIik7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50SWQiKS52YWwoJycpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgnJyk7CiAgICAgICAgaWYgKGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykuaHRtbCgpICE9ICdVcGRhdGUnKSB7CiAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykuaHRtbCgiQWRkIik7CiAgICAgICAgfQogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCBmYWxzZSk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Ym94Jykub24oImtleXVwIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Ym94JykudmFsKCkubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5wcm9wKCJkaXNhYmxlZCIsIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgcmVzdGFydFJldmlldyA9IGZ1bmN0aW9uIChjYXNlUmV2aWV3UHJldmlvdXNVcmwpIHsKCiAgICAgICAgLy9FdmVudCB3aGVuIHJldmlldyByZXN0YXJ0IGlzIGNsaWNrZWQuCiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5jYXNlLXJlc3RhcnQtcmV2aWV3JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZhciBwYXJlbnRfcm93ID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgIHZhciBjYXNlTnVtYmVyID0gcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImNhc2VOdW1iZXIiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIGZvbGxvd1VwTnVtYmVyID0gcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImZvbGxvd1VwTnVtYmVyIl0nKS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBjYXNlVmVyc2lvbiA9IHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJjYXNlVmVyc2lvbiJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgcHJvZHVjdEZhbWlseSA9IHBhcmVudF9yb3cuZmluZCgnaW5wdXRbZGF0YS1maWVsZD0icHJvZHVjdEZhbWlseSJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgZm9sbG93VXBNb2RhbCA9ICQoJyNmb2xsb3dVcE1vZGFsJyk7CiAgICAgICAgICAgIGZvbGxvd1VwTW9kYWwubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgZm9sbG93VXBNb2RhbC5maW5kKCIucHJldmlvdXMtZm9sbG93VXAiKS51bmJpbmQoKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZ2V0UHJldmlvdXNTdGF0ZSA9IGNhc2VSZXZpZXdQcmV2aW91c1VybCArICI/Y2FzZU51bWJlcj0iICsgY2FzZU51bWJlciArCiAgICAgICAgICAgICAgICAgICAgIiZjYXNlVmVyc2lvbj0iICsgY2FzZVZlcnNpb24gKyAiJnByb2R1Y3RGYW1pbHk9IiArIHByb2R1Y3RGYW1pbHkgKyAiJmZvbGxvd1VwTnVtYmVyPSIgKyBmb2xsb3dVcE51bWJlcjsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiBnZXRQcmV2aW91c1N0YXRlLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9IndvcmtmbG93U3RhdGUiXScpLnRleHQocmVzdWx0LnByZXZpb3VzU3RhdGUpOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iZGlzcG9zaXRpb24iXScpLnRleHQocmVzdWx0LnByZXZpb3VzRGlzcG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iaW5mby1zaWduIl0nKS5hZGRDbGFzcygiaGlkZGVuIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGxvd1VwTW9kYWwubW9kYWwoJ2Rlc3Ryb3knKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgb3BlblNpbWlsYXJDYXNlc01vZGFsID0gZnVuY3Rpb24gKGNhc2VJbmZvVXJsKSB7CgogICAgICAgIC8vRXZlbnQgdHJpZ2dlcmVkIHdoZW4gc2ltaWxhciBjYXNlcyBjb3VudCBpcyBjbGlja2VkLgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuc2ltaWxhci1jYXNlcycsIGZ1bmN0aW9uIChldmVudCkgewoKICAgICAgICAgICAgdmFyIHNpbWlsYXJDYXNlTW9kYWwgPSAkKCcjc2ltaWxhckNhc2VNb2RhbCcpOwogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgdmFyIHBhcmVudF9yb3cgPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgidHIiKTsKCiAgICAgICAgICAgIC8vRmV0Y2ggdGhlIHZhbHVlcyBvZiB0aGUgZXZlbnQuCiAgICAgICAgICAgIHZhciBldmVudFZhbCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdkYXRhLWV2ZW50LXZhbCcpOwogICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtZmllbGQnKTsKICAgICAgICAgICAgdmFyIGV4ZWN1dGVkQ29uZmlnSWQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgcHQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cigiZGF0YS1wdCIpOwogICAgICAgICAgICB2YXIgZXZlbnRDb2RlOwogICAgICAgICAgICBpZiAoZXZlbnRUeXBlKSB7CiAgICAgICAgICAgICAgICBldmVudENvZGUgPSAoZXZlbnRUeXBlLnNwbGl0KCJfY29kZSIpWzBdKTsKICAgICAgICAgICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZS5zcGxpdCgiXyIpWzJdOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY2FzZU51bWJlciA9IHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJjYXNlTnVtYmVyIl0nKS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBjYXNlVmVyc2lvbiA9IHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJjYXNlVmVyc2lvbiJdJykuYXR0cigiZGF0YS1pZCIpOwoKICAgICAgICAgICAgLy9TaG93IG1vZGFsIGFuZCBzZXQgaXRzIHZhbHVlcy4KICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNldmVudFR5cGUiKS5odG1sKGV2ZW50VHlwZSk7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2V2ZW50VmFsIikuaHRtbChldmVudFZhbCk7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2Nhc2VOdW1iZXJJbmZvIikudmFsKGNhc2VOdW1iZXIpOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNleGVjdXRlZENvbmZpZ0lkIikudmFsKGV4ZWN1dGVkQ29uZmlnSWQpOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNjYXNlQ3VycmVudFZlcnNpb24iKS52YWwoY2FzZVZlcnNpb24pOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNldmVudENvZGUiKS52YWwoZXZlbnRDb2RlKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjZXZlbnRDb2RlVmFsIikudmFsKGV2ZW50VmFsKTsKICAgICAgICAgICAgLy9NYWtlIHRoZSBtb2RhbCB0YWJsZSBhcyBkYXRhdGFibGUKCiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc2lnbmFsLnNpbWlsYXJDYXNlVGFibGUuaW5pdF9zaW1pbGFyX2Nhc2VfdGFibGUoY2FzZUluZm9VcmwpCiAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuQXR0YWNobWVudE1vZGFsID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuc2hvdy1hdHRhY2htZW50LWljb24nLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpczsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgdmFyIHBhcmVudF9yb3cgPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgndHInKTsKICAgICAgICAgICAgdmFyIGFsZXJ0SWQgPSBwYXJlbnRfcm93LmZpbmQoJ2FbZGF0YS1maWVsZD0iYXR0YWNobWVudCJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgY2FzZUNvbnRyb2xsZXIgPSBwYXJlbnRfcm93LmZpbmQoJ2FbZGF0YS1maWVsZD0iYXR0YWNobWVudCJdJykuYXR0cigiZGF0YS1jb250cm9sbGVyIik7CiAgICAgICAgICAgIHZhciB1cmwgPSAiL3NpZ25hbC8iICsgY2FzZUNvbnRyb2xsZXIgKyAiL3VwbG9hZCI7CiAgICAgICAgICAgIHZhciBnZXRBdHRhY2htZW50VXJsID0gIi9zaWduYWwvIiArIGNhc2VDb250cm9sbGVyICsgIi9mZXRjaEF0dGFjaG1lbnQ/YWxlcnRJZD0iICsgYWxlcnRJZDsKICAgICAgICAgICAgJCgnI3Nob3dBdHRhY2htZW50TW9kYWwgI2F0dGFjaG1lbnRGb3JtICNhdHRhY2htZW50Rm9ybUlkJykuYXR0cigndmFsdWUnLCBhbGVydElkKTsKICAgICAgICAgICAgdmFyIGNhc2VIaXN0b3J5TW9kYWwgPSAkKCcjc2hvd0F0dGFjaG1lbnRNb2RhbCcpOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgICQoIiNzaG93QXR0YWNobWVudE1vZGFsIGZvcm0jYXR0YWNobWVudEZvcm0iKS51bmJpbmQoJ3N1Ym1pdCcpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcyk7CiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpOwogICAgICAgICAgICAgICAgaWYgKCR0aGlzLmZpbmQoJy5hdHRhY2htZW50LWZpbGUnKS52YWwoKSkgewogICAgICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLAogICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoJy5hdHRhY2htZW50LWZpbGUnKS52YWwoJycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0F0dGFjaG1lbnRJY29uKHBhcmVudF9yb3cpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3Nob3dBdHRhY2htZW50TW9kYWwgI2F0dGFjaG1lbnQtdGFibGUnKS5EYXRhVGFibGUoKS5hamF4LnJlbG9hZCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKCcjc2hvd0F0dGFjaG1lbnRNb2RhbCAjYXR0YWNobWVudC10YWJsZScpLkRhdGFUYWJsZSh7CiAgICAgICAgICAgICAgICBkZXN0cm95OiB0cnVlLAogICAgICAgICAgICAgICAgc2VhcmNoaW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgIHNQYWdpbmF0aW9uVHlwZTogImJvb3RzdHJhcCIsCiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGxhbmd1YWdlOiB7CiAgICAgICAgICAgICAgICAgICAgInVybCI6ICIuLi9hc3NldHMvaTE4bi9kYXRhVGFibGVzXyIgKyB1c2VyTG9jYWxlICsgIi5qc29uIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJhamF4IjogewogICAgICAgICAgICAgICAgICAgICJ1cmwiOiBnZXRBdHRhY2htZW50VXJsLAogICAgICAgICAgICAgICAgICAgICJkYXRhU3JjIjogIiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmbkRyYXdDYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoJy5yZW1vdmUtYXR0YWNobWVudCcpLmNsaWNrKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRhY2htZW50Um93ID0gJChlLnRhcmdldCkuY2xvc2VzdCgndHInKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnRJZCA9IGF0dGFjaG1lbnRSb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJyZW1vdmVBdHRhY2htZW50Il0nKS5hdHRyKCJkYXRhLWF0dGFjaG1lbnRJZCIpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlVXJsID0gJy9zaWduYWwvJyArIGNhc2VDb250cm9sbGVyICsgJy9kZWxldGVBdHRhY2htZW50P2F0dGFjaG1lbnRJZD0nICsgYXR0YWNobWVudElkOwogICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiByZW1vdmVVcmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7YWxlcnRJZDogYWxlcnRJZH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCgnLnJlbW92ZS1hdHRhY2htZW50JykubGVuZ3RoID09PTEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUF0dGFjaG1lbnRJY29uKCR0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2hvd0F0dGFjaG1lbnRNb2RhbCAjYXR0YWNobWVudC10YWJsZScpLkRhdGFUYWJsZSgpLmFqYXgucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ2Vycm9yJywgJ3RvcCByaWdodCcsICJFcnJvciIsICJBbGwgc2VsZWN0ZWQgc2FmZXR5IG9ic2VydmF0aW9ucyBtdXN0IGJlIGluIHNhbWUgZGlzcG9zaXRpb24gZm9yIHBlcmZvcm1pbmcgdGhlIGJ1bGsgdXBkYXRlLiIsIHthdXRvSGlkZURlbGF5OiAxMDAwMH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImFvQ29sdW1ucyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxhIGhyZWY9Ii9zaWduYWwvYXR0YWNobWVudGFibGUvZG93bmxvYWQ/aWQ9JyArIHJvdy5pZCArICciPicgKyBlc2NhcGVIVE1MKHJvdy5uYW1lKSArICc8L2E+JwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAidGltZVN0YW1wIgogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogIm1vZGlmaWVkQnkiCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPHNwYW4gdGFiaW5kZXg9IjAiIHRpdGxlPSJSZW1vdmUgQXR0YWNobWVudCIgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSByZW1vdmUtYXR0YWNobWVudCIgZGF0YS1maWVsZD0icmVtb3ZlQXR0YWNobWVudCIgZGF0YS1hdHRhY2htZW50SWQ9JyArIHJvdy5pZCArICc+PC9zcGFuPicKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiYkxlbmd0aENoYW5nZSI6IGZhbHNlLAogICAgICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICAgICAidGFyZ2V0cyI6ICdfYWxsJywKICAgICAgICAgICAgICAgICAgICAicmVuZGVyIjogJC5mbi5kYXRhVGFibGUucmVuZGVyLnRleHQoKQogICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBiaW5kR3JpZER5bmFtaWNGaWx0ZXJzID0gZnVuY3Rpb24gKGZpbHRlcnNEYXRhLCBwcmVmaXgsIGlkKSB7CiAgICAgICAgLy9BZGQgZmlsdGVycyB0byB0aGUgZGF0YSB0YWJsZS4KICAgICAgICB2YXIgZGF0YVRhYmxlc19sZW5ndGggPSAkKCcuZGF0YVRhYmxlc19sZW5ndGgnKTsKICAgICAgICBkYXRhVGFibGVzX2xlbmd0aC5hZGRDbGFzcygnY29sLXNtLTEyJyk7CiAgICAgICAgZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCkucmVtb3ZlQ2xhc3MoImNvbC14cy0yIik7CiAgICAgICAgYXBwbGljYXRpb25OYW1lID09IEFMRVJUX0NPTkZJR19UWVBFLkFESE9DX0FMRVJUID8gZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCI6bm90KCcuZGF0YVRhYmxlc193cmFwcGVyJykiKS5hZGRDbGFzcygiY29sLXhzLTkiKSA6IGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikuYWRkQ2xhc3MoImNvbC14cy0xMCIpOwogICAgICAgIGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikubmV4dCgpLnJlbW92ZUNsYXNzKCJjb2wteHMtMTAiKTsKICAgICAgICBhcHBsaWNhdGlvbk5hbWUgPT0gQUxFUlRfQ09ORklHX1RZUEUuQURIT0NfQUxFUlQgPyBkYXRhVGFibGVzX2xlbmd0aC5wYXJlbnQoIjpub3QoJy5kYXRhVGFibGVzX3dyYXBwZXInKSIpLm5leHQoKS5hZGRDbGFzcygiY29sLXhzLTMiKSA6IGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikubmV4dCgpLmFkZENsYXNzKCJjb2wteHMtMiIpOwogICAgICAgIGRhdGFUYWJsZXNfbGVuZ3RoLmZpbmQoImxhYmVsIikuYWRkQ2xhc3MoJ2NvbC14cy0yJyk7CiAgICAgICAgZGF0YVRhYmxlc19sZW5ndGguZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBkdEJ1dHRvbnMgPSAnPGRpdiBjbGFzcz0iZGF0YVRhYmxlLXRvcC1kaXNwb3NpdGlvbiBjb2wteHMtMTAiPic7CiAgICAgICAgICAgICQuZWFjaChmaWx0ZXJzRGF0YSwgZnVuY3Rpb24gKGluZGV4LCBvYmopIHsKICAgICAgICAgICAgICAgIGlmIChvYmouY2xvc2VkIHx8IG9iai5pc0Nsb3NlZCkgewogICAgICAgICAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPGRpdiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBjaGVja2JveC1pbmxpbmUgbS1sLTMgY2hlY2tib3gtcG9zLWFicyI+JzsKICAgICAgICAgICAgICAgICAgICBkdEJ1dHRvbnMgKz0gJzxpbnB1dCBpZD0iZmlsdGVyJyArIGluZGV4ICsgJyIgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJkeW5hbWljLWZpbHRlcnMiIG5hbWU9InJlbGF0ZWRSZXN1bHRzIiBkYXRhLWNsb3NlZD0iJyArIG9iai5pc0Nsb3NlZCArICciIHZhbHVlPSInICsgb2JqLnZhbHVlICsgJyIgLz4gPGxhYmVsIGNsYXNzPSJtLXItMzAiICBmb3I9ImZpbHRlcicgKyBpbmRleCArICciPicgKyBvYmoudmFsdWUgKyAnPC9sYWJlbD48L2Rpdj4nCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPGRpdiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBjaGVja2JveC1pbmxpbmUgbS1sLTMgY2hlY2tib3gtcG9zLWFicyI+JzsKICAgICAgICAgICAgICAgICAgICBkdEJ1dHRvbnMgKz0gJzxpbnB1dCBpZD0iZmlsdGVyJyArIGluZGV4ICsgJyIgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJkeW5hbWljLWZpbHRlcnMiIG5hbWU9InJlbGF0ZWRSZXN1bHRzIiBkYXRhLWNsb3NlZD0iJyArIG9iai5pc0Nsb3NlZCArICciIGNoZWNrZWQ9ImNoZWNrZWQiIHZhbHVlPSInICsgb2JqLnZhbHVlICsgJyIgLz4gPGxhYmVsIGNsYXNzPSJtLXItMzAiIGZvcj0iZmlsdGVyJyArIGluZGV4ICsgJyI+JyArIG9iai52YWx1ZSArICc8L2xhYmVsPjwvZGl2PicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPC9kaXY+JzsKICAgICAgICAgICAgZHRCdXR0b25zID0gZHRCdXR0b25zICsgJzwvZGl2Pic7CiAgICAgICAgICAgIGlmICh0aGlzLmlkICE9PSAnYXJjaGl2ZWRBbGVydHNUYWJsZV9sZW5ndGgnICYmIHRoaXMuaWQgIT09ICdhY3Rpdml0aWVzVGFibGVfbGVuZ3RoJykKICAgICAgICAgICAgICAgICQodGhpcykuYXBwZW5kKGR0QnV0dG9ucyk7CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZHluYW1pYy1maWx0ZXJzJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGFsZXJ0RGV0YWlsc1RhYmxlOwogICAgICAgICAgICAgICAgdmFyIGZyZXFTZWxlY3RlZCA9ICIiOwogICAgICAgICAgICAgICAgaWYgKCQoIiNmcmVxdWVuY3lOYW1lcyIpKSB7CiAgICAgICAgICAgICAgICAgICAgZnJlcVNlbGVjdGVkID0gJCgiI2ZyZXF1ZW5jeU5hbWVzIikudmFsKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyQXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJWYWx1ZXMgPSBbXTsKICAgICAgICAgICAgICAgICQoJy5keW5hbWljLWZpbHRlcnMnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclZhbHVlcy5wdXNoKCQodGhpcykudmFsKCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmaWx0ZXJBcnJheS5wdXNoKCQodGhpcykuaXMoJzpjaGVja2VkJykpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHByZWZpeCArICJmaWx0ZXJzX3N0b3JlIiwgSlNPTi5zdHJpbmdpZnkoZmlsdGVyQXJyYXkpKTsKICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0ocHJlZml4ICsgImZpbHRlcnNfdmFsdWUiLCBKU09OLnN0cmluZ2lmeShmaWx0ZXJWYWx1ZXMpKTsKICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0ocHJlZml4ICsgImlkIiwgaWQpOwogICAgICAgICAgICAgICAgdmFyIHVybDsKICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbk5hbWUgPT0gJ0xpdGVyYXR1cmUgU2VhcmNoIEFsZXJ0JykgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0RGV0YWlsc1RhYmxlID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSgpOwogICAgICAgICAgICAgICAgICAgIHVybCA9IGxpc3RDb25maWdVcmwgKyAiP2ZpbHRlcnM9IiArIGZpbHRlclZhbHVlcy5qb2luKCIsIikKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnREZXRhaWxzVGFibGUgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgdXJsID0gbGlzdENvbmZpZ1VybCArICImZnJlcXVlbmN5PSIgKyBmcmVxU2VsZWN0ZWQgKyAiJmlzRmlsdGVyUmVxdWVzdD10cnVlJmZpbHRlcnM9IiArIEpTT04uc3RyaW5naWZ5KGZpbHRlclZhbHVlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbGVydERldGFpbHNUYWJsZS5hamF4LnVybCh1cmwpLmxvYWQoKQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICB9OwoKICAgIHZhciBpc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZSA9IGZ1bmN0aW9uIChwcmVmaXgpIHsKICAgICAgICB2YXIgYyA9IHNpZ25hbC51dGlscy5nZXRRdWVyeVN0cmluZygiY29uZmlnSWQiKTsKICAgICAgICByZXR1cm4gYyA/IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0ocHJlZml4ICsgImlkIikgPT0gYyA6IGZhbHNlCiAgICB9OwoKICAgIHZhciByZW1vdmVGaWx0ZXJzRnJvbVNlc3Npb25TdG9yYWdlID0gZnVuY3Rpb24gKHByZWZpeCkgewogICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0ocHJlZml4ICsgImZpbHRlcnNfc3RvcmUiKTsKICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHByZWZpeCArICJmaWx0ZXJzX3ZhbHVlIik7CiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShwcmVmaXggKyAiaWQiKTsKICAgIH07CgogICAgdmFyIG9wZW5TYXZlVmlld01vZGFsID0gZnVuY3Rpb24gKGZpbHRlckluZGV4LCBhcHBsaWNhdGlvbk5hbWUsIHZpZXdJZCkgewogICAgICAgIHZhciBzeXN0ZW1EZWZhdWx0ID0gWyJTeXN0ZW0gVmlldyJdOwogICAgICAgIHZhciB2aWV3SW5mbzsKCiAgICAgICAgLy9zYXZpbmcgbmV3IHZpZXcKICAgICAgICAkKCIuc2F2ZVZpZXciKS51bmJpbmQoJ2NsaWNrJyk7CiAgICAgICAgJCgnLnNhdmVWaWV3Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2aWV3SW5mbyA9IGdlbmVyYXRlVmlld0luZm8oZmlsdGVySW5kZXgpOwoKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19maWx0ZXJzJykudmFsKEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLmZpbHRlck1hcCkpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2NvbHVtbkxpc3QnKS52YWwodmlld0luZm8ubm90VmlzaWJsZUNvbHVtbik7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWxlcnRUeXBlJykudmFsKGFwcGxpY2F0aW9uTmFtZSk7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfc29ydGluZycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5zb3J0ZWRDb2x1bW4pKTsKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19hZHZhbmNlZF9maWx0ZXInKS52YWwodmlld0luZm8uYWR2YW5jZWRGaWx0ZXIpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICNjdXJyZW50X3ZpZXdfaWQnKS52YWwodmlld0lkKTsKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAuc2F2ZV9idXR0b25zJykuc2hvdygpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsJykubW9kYWwoJ3Nob3cnKTsKICAgICAgICB9KQoKICAgICAgICAvL3VwZGF0aW5nIGV4aXN0aW5nIHZpZXcKICAgICAgICAkKCIudXBkYXRlVmlldyIpLnVuYmluZCgnY2xpY2snKTsKICAgICAgICAkKCcudXBkYXRlVmlldycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmlld0luZm8gPSBnZW5lcmF0ZVZpZXdJbmZvKGZpbHRlckluZGV4KTsKICAgICAgICAgICAgaWYgKCQuaW5BcnJheSgkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKSwgc3lzdGVtRGVmYXVsdCkgIT0gLTEpIHsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfZmlsdGVycycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5maWx0ZXJNYXApKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfY29sdW1uTGlzdCcpLnZhbCh2aWV3SW5mby5ub3RWaXNpYmxlQ29sdW1uKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWxlcnRUeXBlJykudmFsKGFwcGxpY2F0aW9uTmFtZSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X3NvcnRpbmcnKS52YWwoSlNPTi5zdHJpbmdpZnkodmlld0luZm8uc29ydGVkQ29sdW1uKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2FkdmFuY2VkX2ZpbHRlcicpLnZhbCh2aWV3SW5mby5hZHZhbmNlZEZpbHRlcik7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICNjdXJyZW50X3ZpZXdfaWQnKS52YWwodmlld0lkKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgLnNhdmVfYnV0dG9ucycpLnNob3coKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgT2JqZWN0KCk7CiAgICAgICAgICAgICAgICByZXF1ZXN0WyduYW1lJ10gPSAkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ2ZpbHRlck1hcCddID0gSlNPTi5zdHJpbmdpZnkodmlld0luZm8uZmlsdGVyTWFwKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ2NvbHVtbkxpc3QnXSA9IHZpZXdJbmZvLm5vdFZpc2libGVDb2x1bW4udG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ2FsZXJ0VHlwZSddID0gYXBwbGljYXRpb25OYW1lOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnaWQnXSA9ICQoJy52aWV3U2VsZWN0JykudmFsKCk7CiAgICAgICAgICAgICAgICByZXF1ZXN0Wydzb3J0aW5nJ10gPSBKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5zb3J0ZWRDb2x1bW4pOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnYWR2YW5jZWRGaWx0ZXInXSA9IHZpZXdJbmZvLmFkdmFuY2VkRmlsdGVyOwogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHVwZGF0ZVZpZXdVcmwsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlcXVlc3QsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZVVSTCA9ICQobG9jYXRpb24pLmF0dHIoImhyZWYiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VVUkwuaW5kZXhPZigidmlld0lkIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHBhZ2VVUkwuc2xpY2UoMCwgcGFnZVVSTC5pbmRleE9mKCJ2aWV3SWQiKSArIDcpICsgZGF0YS52aWV3SWQKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlVVJMLmluZGV4T2YoIiMiKSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VVUkwgPSBwYWdlVVJMLnNsaWNlKDAsIHBhZ2VVUkwuaW5kZXhPZigiIyIpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFnZVVSTCArICImdmlld0lkPSIgKyBkYXRhLnZpZXdJZAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvL3NlbGVjdGluZyBhbm90aGVyIHZpZXcKICAgICAgICAkKCcudmlld1NlbGVjdCcpLnVuYmluZCgnY2xpY2snKTsKICAgICAgICAkKCcudmlld1NlbGVjdCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBwYWdlVVJMID0gJChsb2NhdGlvbikuYXR0cigiaHJlZiIpOwogICAgICAgICAgICB2YXIgc2VsZWN0ZWRWaWV3ID0gJCgnLnZpZXdTZWxlY3QnKS52YWwoKTsKICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnaXNWaWV3Q2FsbCcsICd0cnVlJyk7CiAgICAgICAgICAgIGlmIChwYWdlVVJMLmluZGV4T2YoInZpZXdJZCIpICE9IC0xKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBhZ2VVUkwuc2xpY2UoMCwgcGFnZVVSTC5pbmRleE9mKCJ2aWV3SWQiKSArIDcpICsgc2VsZWN0ZWRWaWV3CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAocGFnZVVSTC5pbmRleE9mKCIjIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBwYWdlVVJMID0gcGFnZVVSTC5zbGljZSgwLCBwYWdlVVJMLmluZGV4T2YoIiMiKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcGFnZVVSTCArICImdmlld0lkPSIgKyBzZWxlY3RlZFZpZXcKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvL2RlbGV0aW5nIG9yIGVkaXRpbmcgc2VsZWN0ZWQgdmlldwogICAgICAgICQoJy5lZGl0VmlldycpLnVuYmluZCgnY2xpY2snKTsKICAgICAgICAkKCcuZWRpdFZpZXcnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZpZXdJbmZvID0gZ2VuZXJhdGVWaWV3SW5mbyhmaWx0ZXJJbmRleCk7CgogICAgICAgICAgICBpZiAoJC5pbkFycmF5KCQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5yZXBsYWNlKCIoZGVmYXVsdCkiLCAiIikudHJpbSgpLCBzeXN0ZW1EZWZhdWx0KSA9PSAtMSkgewogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19uYW1lJykudmFsKCQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5yZXBsYWNlKCIoZGVmYXVsdCkiLCAiIikpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19kZWZhdWx0JykucHJvcCgnY2hlY2tlZCcsICgkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkuaW5kZXhPZigiKGRlZmF1bHQpIikgIT0gLTEpKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfaWQnKS52YWwoJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudmFsKCkpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19maWx0ZXJzJykudmFsKEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLmZpbHRlck1hcCkpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19jb2x1bW5MaXN0JykudmFsKHZpZXdJbmZvLm5vdFZpc2libGVDb2x1bW4pOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19zb3J0aW5nJykudmFsKEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLnNvcnRlZENvbHVtbikpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19hZHZhbmNlZF9maWx0ZXInKS52YWwodmlld0luZm8uYWR2YW5jZWRGaWx0ZXIpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19hbGVydFR5cGUnKS52YWwoYXBwbGljYXRpb25OYW1lKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgLmVkaXRfYnV0dG9ucycpLnNob3coKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgnI2FsZXJ0LXZpZXctbW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICB9CiAgICAgICAgfSkKICAgIH07CgogICAgdmFyIGdlbmVyYXRlVmlld0luZm8gPSBmdW5jdGlvbiAoZmlsdGVySW5kZXgpIHsKICAgICAgICB2YXIgb1RhYmxlID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSgpOwoKICAgICAgICAvL2dlbmVyYXRlIGZpbHRlciB2YWx1ZSBtYXAKICAgICAgICB2YXIgZmlsdGVyTWFwID0gbmV3IE9iamVjdCgpOwogICAgICAgICQuZWFjaChmaWx0ZXJJbmRleCwgZnVuY3Rpb24gKGlkeCwgb2JqKSB7CiAgICAgICAgICAgIHZhciBmaWx0ZXJWYWwgPSB5YWRjZi5leEdldENvbHVtbkZpbHRlclZhbChvVGFibGUsIG9iaik7CiAgICAgICAgICAgIGlmIChmaWx0ZXJWYWwpIHsKICAgICAgICAgICAgICAgIGZpbHRlck1hcFtvYmpdID0gZmlsdGVyVmFsCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy9nZW5lcmF0ZSBjb2x1bW5zIHZpc2libGUgbGlzdAogICAgICAgIHZhciBub3RWaXNpYmxlQ29sdW1uID0gJCgnI2NvbHVtbkluZGV4JykudmFsKCk7CgogICAgICAgIC8vZ2VuZXJhdGUgc29ydGluZyBjb2x1bW4gaW5mbwogICAgICAgIHZhciBzb3J0ZWRDb2x1bW4gPSBuZXcgT2JqZWN0KCk7CiAgICAgICAgaWYgKCQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5kYXRhVGFibGUoKS5mblNldHRpbmdzKCkuYWFTb3J0aW5nWzBdKSB7CiAgICAgICAgICAgIHZhciBzb3J0ZWRDb2wgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuZGF0YVRhYmxlKCkuZm5TZXR0aW5ncygpLmFhU29ydGluZ1swXVswXTsKICAgICAgICAgICAgdmFyIGNvbHVtbk5hbWUgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuZmluZCgidGgiKS5lcShzb3J0ZWRDb2wpLmF0dHIoImRhdGEtZmllbGQiKTsKICAgICAgICAgICAgdmFyIGluZGV4ID0gMDsKICAgICAgICAgICAgY29sdW1uU2VxLmV2ZXJ5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBzZXFOYW1lID0gY29sdW1uU2VxW2luZGV4XS5uYW1lOwogICAgICAgICAgICAgICAgaWYgKGNvbHVtbk5hbWUgPT0gc2VxTmFtZSkgewogICAgICAgICAgICAgICAgICAgIHNvcnRlZENvbCA9IGNvbHVtblNlcVtpbmRleF0uc2VxOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGluZGV4Kys7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBzb3J0ZWREaXIgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuZGF0YVRhYmxlKCkuZm5TZXR0aW5ncygpLmFhU29ydGluZ1swXVsxXTsKICAgICAgICAgICAgc29ydGVkQ29sdW1uW3NvcnRlZENvbF0gPSBzb3J0ZWREaXI7CiAgICAgICAgfQoKICAgICAgICAvL2dlbmVyYXRlIGFkdmFuY2VkIGZpbHRlciBpbmZvCiAgICAgICAgdmFyIGFkdmFuY2VkRml0ZXJJZCA9ICQoJy5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24nKS52YWwoKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAnZmlsdGVyTWFwJzogZmlsdGVyTWFwLAogICAgICAgICAgICAnbm90VmlzaWJsZUNvbHVtbic6IG5vdFZpc2libGVDb2x1bW4sCiAgICAgICAgICAgICdzb3J0ZWRDb2x1bW4nOiBzb3J0ZWRDb2x1bW4sCiAgICAgICAgICAgICdhZHZhbmNlZEZpbHRlcic6IGFkdmFuY2VkRml0ZXJJZAogICAgICAgIH0KICAgIH07CgogICAgdmFyIGNyZWF0ZVNvcnRpbmdNYXAgPSBmdW5jdGlvbiAoaW5mb0tleSwgdmlld05hbWUpIHsKICAgICAgICB2YXIgc29ydGluZ01hcCA9IFtdOwogICAgICAgIHZhciBzb3J0aW5nID0ge307CiAgICAgICAgdmFyIHNlc3Npb25TdG9yZWRWYWw7CiAgICAgICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0odmlld05hbWUpID09ICQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5yZXBsYWNlKCIoZGVmYXVsdCkiLCAiIikudHJpbSgpKSB7CiAgICAgICAgICAgIHNlc3Npb25TdG9yZWRWYWwgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGluZm9LZXkpOwogICAgICAgIH0KICAgICAgICBpZiAoc2Vzc2lvblN0b3JlZFZhbCkgewogICAgICAgICAgICBzb3J0aW5nID0gJC5wYXJzZUpTT04oc2Vzc2lvblN0b3JlZFZhbCk7CiAgICAgICAgfSBlbHNlIGlmICgkKCIjc29ydGVkQ29sdW1uIikudmFsKCkgIT0gIiIgJiYgJCgiI3NvcnRlZENvbHVtbiIpLnZhbCgpICE9ICJ7fSIgJiYgY2FsbGluZ1NjcmVlbiA9PSAncmV2aWV3JykgewogICAgICAgICAgICBzb3J0aW5nID0gJC5wYXJzZUpTT04oJCgnI3NvcnRlZENvbHVtbicpLnZhbCgpKTsKICAgICAgICB9CiAgICAgICAgJC5lYWNoKHNvcnRpbmcsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIHNvcnRpbmdNYXAucHVzaChbcGFyc2VJbnQoa2V5KSwgdmFsdWVdKQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBzb3J0aW5nTWFwCiAgICB9OwoKICAgIHZhciBjcmVhdGVGaWx0ZXJNYXAgPSBmdW5jdGlvbiAoaW5mb0tleSwgdmlld05hbWUpIHsKICAgICAgICB2YXIgZmlsdGVyc1ZhbHVlID0gW107CiAgICAgICAgdmFyIGZpbHRlck1hcCA9IHt9OwogICAgICAgIHZhciBzZXNzaW9uU3RvcmVkVmFsOwogICAgICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHZpZXdOYW1lKSA9PSAkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKSkgewogICAgICAgICAgICBzZXNzaW9uU3RvcmVkVmFsID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShpbmZvS2V5KTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlc3Npb25TdG9yZWRWYWwgJiYgc2Vzc2lvblN0b3JlZFZhbCAhPSB7fSkgewogICAgICAgICAgICBmaWx0ZXJNYXAgPSAkLnBhcnNlSlNPTihzZXNzaW9uU3RvcmVkVmFsKTsKICAgICAgICB9IGVsc2UgaWYgKCQoJyNmaWx0ZXJNYXAnKS52YWwoKSAhPSAiIiAmJiAkKCcjZmlsdGVyTWFwJykudmFsKCkgIT0gInt9IiAmJiBjYWxsaW5nU2NyZWVuID09ICdyZXZpZXcnKSB7CiAgICAgICAgICAgIGZpbHRlck1hcCA9ICQucGFyc2VKU09OKCQoJyNmaWx0ZXJNYXAnKS52YWwoKSk7CiAgICAgICAgfQogICAgICAgICQuZWFjaChmaWx0ZXJNYXAsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIHZhciBmaWx0ZXJBcnIgPSBbcGFyc2VJbnQoa2V5KSwgdmFsdWVdOwogICAgICAgICAgICBmaWx0ZXJzVmFsdWUucHVzaChmaWx0ZXJBcnIpCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGZpbHRlcnNWYWx1ZQogICAgfTsKCiAgICB2YXIgY3JlYXRlTGlzdE9mSW5kZXggPSBmdW5jdGlvbiAoaW5mb0tleSwgaXNFdmRhcywgdmlld05hbWUpIHsKICAgICAgICB2YXIgbG9pID0gW107CiAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gW10KICAgICAgICB2YXIgc2Vzc2lvblN0b3JlZFZhbDsKICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh2aWV3TmFtZSkgPT0gJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLnJlcGxhY2UoIihkZWZhdWx0KSIsICIiKS50cmltKCkpIHsKICAgICAgICAgICAgc2Vzc2lvblN0b3JlZFZhbCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oaW5mb0tleSk7CiAgICAgICAgfQogICAgICAgIGlmIChjYWxsaW5nU2NyZWVuID09ICdyZXZpZXcnKSB7CiAgICAgICAgICAgIGlmIChzZXNzaW9uU3RvcmVkVmFsKSB7CiAgICAgICAgICAgICAgICBjb2x1bW5JbmRleCA9IHNlc3Npb25TdG9yZWRWYWwuc3BsaXQoJywnKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29sdW1uSW5kZXggPSAkKCcjY29sdW1uSW5kZXgnKS52YWwoKS5zcGxpdCgnLCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICQuZWFjaChjb2x1bW5JbmRleCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKGlzRXZkYXMpIHsKICAgICAgICAgICAgICAgICAgICBsb2kucHVzaChwYXJzZUludCh0aGlzKSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbG9pLnB1c2gocGFyc2VJbnQodGhpcykgKyAxKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxvaQogICAgfTsKCiAgICB2YXIgc2V0U29ydE9yZGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoIiNhbGVydHNEZXRhaWxzVGFibGVSb3ciKS5vbignbW91c2Vkb3duJywgJ3RoJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpbmRleCA9ICQodGhpcykuYXR0cigiZGF0YS1jb2x1bW4taW5kZXgiKTsKICAgICAgICAgICAgZGlyID0gJ2FzYyc7CiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzb3J0aW5nX2FzYycpKSB7CiAgICAgICAgICAgICAgICBkaXIgPSAnZGVzYycKICAgICAgICAgICAgfSBlbHNlIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzb3J0aW5nX2Rlc2MnKSkgewogICAgICAgICAgICAgICAgZGlyID0gJ2FzYycKICAgICAgICAgICAgfQogICAgICAgICAgICBpc1ZpZXdJbnN0YW5jZSA9IDA7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuQWxlcnRUYWdNb2RhbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmVkaXRBbGVydFRhZ3MnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIHZhciBwYXJlbnRfcm93ID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICB2YXIgcm93T2JqZWN0ID0gdGFibGUucm93cyhpbmRleCkuZGF0YSgpWzBdOwogICAgICAgICAgICB2YXIgYWxlcnRJZCA9IHJvd09iamVjdC5pZDsKICAgICAgICAgICAgdmFyIGV4ZWNDb25maWdJZCA9IHBhcmVudF9yb3cuZmluZCgnLmV4ZWNDb25maWdJZCcpLmF0dHIoInZhbHVlIik7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IGZldGNoVGFnc1VybCwKICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBhbGVydElkOiBhbGVydElkCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBhbGVydFRhZ01vZGFsT2JqID0gJCgnI2FsZXJ0VGFnTW9kYWwnKTsKICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS5zZWxlY3QyKHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJBZGQgVGFncyIsCiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICB0YWdzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQudGFnTGlzdAoKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjc2luZ2xlQWxlcnRUYWdzJykudmFsKHJlc3VsdC5hbGVydFRhZ0xpc3QpOwogICAgICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgiLmFkZFRhZ3MiKS51bmJpbmQoKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNhdmVUYWdVcmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdzOiBKU09OLnN0cmluZ2lmeShhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS52YWwoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRJZDogYWxlcnRJZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjQ29uZmlnSWQ6IGV4ZWNDb25maWdJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuYWpheC5yZWxvYWQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuU2luZ2xlQWxlcnRUYWdNb2RhbCA9IGZ1bmN0aW9uICh0YWJsZU9iaiwgdGFnc09iaikgewogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZWRpdEFsZXJ0VGFncycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykuaW5kZXgoKTsKICAgICAgICAgICAgaWYgKGlzQWJzdHJhY3RWaWV3T3JDYXNlVmlldyhpbmRleCkpIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggLyAyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJvd09iamVjdCA9IHRhYmxlT2JqLnJvd3MoaW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgdmFyIGFsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgICAgIHZhciBleGVjQ29uZmlnSWQgPSBwYXJlbnRfcm93LmZpbmQoJy5leGVjQ29uZmlnSWQnKS5hdHRyKCJ2YWx1ZSIpOwogICAgICAgICAgICB2YXIgYWxlcnRUYWdNb2RhbE9iaiA9ICQoJyNhbGVydFRhZ01vZGFsJyk7CiAgICAgICAgICAgIHZhciAkc2luZ2xlQ2FzZUFsZXJ0VGFncyA9IGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpOwogICAgICAgICAgICB2YXIgJGdsb2JhbFRhZ3MgPSBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNnbG9iYWxUYWdzJyk7CiAgICAgICAgICAgIGFwcGx5U2VsZWN0MkZvclRhZ3MoJHNpbmdsZUNhc2VBbGVydFRhZ3MsIGZldGNoVGFnc1VybCwgJ0Nhc2UgU2VyaWVzIFRhZ3MnLCB0cnVlKTsKICAgICAgICAgICAgYXBwbHlTZWxlY3QyRm9yVGFncygkZ2xvYmFsVGFncywgZmV0Y2hUYWdzVXJsLCAnR2xvYmFsIFRhZ3MnLCBmYWxzZSk7CiAgICAgICAgICAgICRzaW5nbGVDYXNlQWxlcnRUYWdzLnZhbChudWxsKS50cmlnZ2VyKCJjaGFuZ2UiKTsKICAgICAgICAgICAgJGdsb2JhbFRhZ3MudmFsKG51bGwpLnRyaWdnZXIoImNoYW5nZSIpOwogICAgICAgICAgICAkLmVhY2gocm93T2JqZWN0LmNhc2VTZXJpZXNUYWdzLCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gbmV3IE9wdGlvbih2YWx1ZSwgdmFsdWUsIHRydWUsIHRydWUpOwogICAgICAgICAgICAgICAgJHNpbmdsZUNhc2VBbGVydFRhZ3MuYXBwZW5kKG9wdGlvbik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkLmVhY2gocm93T2JqZWN0Lmdsb2JhbFRhZ3MsIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBuZXcgT3B0aW9uKHZhbHVlLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAkZ2xvYmFsVGFncy5hcHBlbmQob3B0aW9uKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNnbG9iYWxUYWdzJykudHJpZ2dlcignY2hhbmdlJyk7CiAgICAgICAgICAgIHZhciBlbmFibGVDYXNlU2VyaWVzVGFncyA9IHJvd09iamVjdC5pc0Nhc2VTZXJpZXNHZW5lcmF0ZWQ7CiAgICAgICAgICAgIGlmICghZW5hYmxlQ2FzZVNlcmllc1RhZ3MpIHsKICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLmF0dHIoJ2Rpc2FibGVkJywgJycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmoubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCIuYWRkVGFncyIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiBzYXZlVGFnVXJsLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdzOiBKU09OLnN0cmluZ2lmeShhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS52YWwoKSksCiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFRhZ3M6IEpTT04uc3RyaW5naWZ5KGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI2dsb2JhbFRhZ3MnKS52YWwoKSksCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZWRDYXNlU2VyaWVzVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5kZWxldGVkQ2FzZVNlcmllc1RhZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVkR2xvYmFsVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5kZWxldGVkR2xvYmFsVGFncyksCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkQ2FzZVNlcmllc1RhZ3M6IEpTT04uc3RyaW5naWZ5KHRhZ3NPYmouYWRkZWRDYXNlU2VyaWVzVGFncyksCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkR2xvYmFsVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5hZGRlZEdsb2JhbFRhZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBhbGVydElkOiBhbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICBleGVjQ29uZmlnSWQ6IGV4ZWNDb25maWdJZAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocGF5bG9hZCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlT2JqLmFqYXgucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ3N1Y2Nlc3MnLCAndG9wIHJpZ2h0JywgIlN1Y2Nlc3MiLCBwYXlsb2FkLm1lc3NhZ2UsIHthdXRvSGlkZURlbGF5OiAyMDAwfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ2Vycm9yJywgJ3RvcCByaWdodCcsICJFcnJvciIsIHBheWxvYWQubWVzc2FnZSwge2F1dG9IaWRlRGVsYXk6IDIwMDB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2luZ2xlLWNhc2UtYWxlcnQtc3Bpbm5lcicpLmFkZENsYXNzKCdoaWRkZW4nKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICQoJyNzaW5nbGUtY2FzZS1hbGVydC1zcGlubmVyJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIHBvcHVsYXRlQWR2YW5jZWRGaWx0ZXJTZWxlY3QgPSBmdW5jdGlvbiAoYWxlcnRUeXBlKSB7CgogICAgICAgICQoIi5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24iKS5zZWxlY3QyKHsKICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICQuaTE4bi5fKCdzZWxlY3RPbmUnKSwKICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSwKICAgICAgICAgICAgYWpheDogewogICAgICAgICAgICAgICAgdXJsOiBmZXRjaEFkdkZpbHRlclVybCwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgIHF1aWV0TWlsbGlzOiA1MCwKICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydFR5cGU6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGVybTogcGFyYW1zLnRlcm0gfHwgJycsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlIHx8IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogcGFyYW1zLm1heCB8fCAzMAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdHM6IGZ1bmN0aW9uIChkYXRhLCBwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXMucGFnZSA9IHBhcmFtcy5wYWdlIHx8IDE7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogJC5tYXAoZGF0YS5saXN0LCBmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGZpbHRlci5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBmaWx0ZXIuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmU6IChwYXJhbXMucGFnZSAqIDMwKSA8IGRhdGEudG90YWxDb3VudAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvL3NlbGVjdCBhZHZhbmNlZCBmaWx0ZXIgYmFzZWQgb24gY3VycmVudCB2aWV3CiAgICAgICAgaWYgKCQoJyNhZHZhbmNlZEZpbHRlclZpZXcnKS52YWwoKSkgewogICAgICAgICAgICB2YXIgYWR2YW5jZWRGaWx0ZXJWaWV3ID0gJC5wYXJzZUpTT04oJCgnI2FkdmFuY2VkRmlsdGVyVmlldycpLnZhbCgpKTsKICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG5ldyBPcHRpb24oYWR2YW5jZWRGaWx0ZXJWaWV3Lm5hbWUsIGFkdmFuY2VkRmlsdGVyVmlldy5pZCwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICQoIi5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24iKS5hcHBlbmQob3B0aW9uKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICB9CgogICAgICAgICQoJyNhZGRBZHZhbmNlZEZpbHRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2lnbmFsLmFkdmFuY2VkRmlsdGVyLmluaXRpYWxpemVBZHZhbmNlZEZpbHRlcnMoJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwnKSk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNzZWxlY3RPcGVyYXRvcicpLmVtcHR5KCkuYXBwZW5kKCc8b3B0aW9uIHNlbGVjdGVkPSJzZWxlY3RlZCIgdmFsdWU9IiI+U2VsZWN0IE9wZXJhdG9yPC9vcHRpb24+Jyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNuYW1lJykudmFsKCcnKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2Rlc2NyaXB0aW9uJykudmFsKCcnKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI3F1ZXJ5SlNPTicpLnZhbCgnJyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNhbGVydFR5cGUnKS52YWwoJycpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAjYnVpbGRlckFsbCcpLmZpbmQoJy5leHByZXNzaW9uJykucmVtb3ZlKCk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsIC5kZWxldGVBZHZGaWx0ZXInKS5hZGRDbGFzcygnaGlkZScpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAuZmlsdGVyc1dpdGhvdXRTYXZpbmcnKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCcpLm1vZGFsKCdzaG93Jyk7CgogICAgICAgIH0pOwoKICAgICAgICAkKCcjZWRpdEFkdmFuY2VkRmlsdGVyJykudW5iaW5kKCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYWR2YW5jZWRGaWx0ZXJJZCA9ICQoJy5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24nKS52YWwoKTsKICAgICAgICAgICAgaWYgKGFkdmFuY2VkRmlsdGVySWQpIHsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiBmZXRjaEFkdmFuY2VkRmlsdGVySW5mb1VybCwKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7J2FkdmFuY2VkRmlsdGVyLmlkJzogYWR2YW5jZWRGaWx0ZXJJZH0sCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNzZWxlY3RPcGVyYXRvcicpLmVtcHR5KCkuYXBwZW5kKCc8b3B0aW9uIHNlbGVjdGVkPSJzZWxlY3RlZCIgdmFsdWU9IiI+U2VsZWN0IE9wZXJhdG9yPC9vcHRpb24+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNuYW1lJykudmFsKHJlc3VsdC5uYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2Rlc2NyaXB0aW9uJykudmFsKHJlc3VsdC5kZXNjcmlwdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNxdWVyeUpTT04nKS52YWwocmVzdWx0LkpTT05RdWVyeSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNhbGVydFR5cGUnKS52YWwoYWxlcnRUeXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2ZpbHRlcklkJykudmFsKGFkdmFuY2VkRmlsdGVySWQpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAuZmlsdGVyc1dpdGhvdXRTYXZpbmcnKS5hZGRDbGFzcygnaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAuZGVsZXRlQWR2RmlsdGVyJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgLm1vZGFsLXRpdGxlJykuaHRtbCgiRWRpdCBGaWx0ZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsLmFkdmFuY2VkRmlsdGVyLmluaXRpYWxpemVBZHZhbmNlZEZpbHRlcnMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgICQoIi5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24iKS5vbigiY2hhbmdlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdGFibGUuYWpheC5yZWxvYWQoKQogICAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIG9wZW5BbGVydENvbW1lbnRNb2RhbDogb3BlbkFsZXJ0Q29tbWVudE1vZGFsLAogICAgICAgIG9wZW5DYXNlSGlzdG9yeU1vZGFsOiBvcGVuQ2FzZUhpc3RvcnlNb2RhbCwKICAgICAgICByZXN0YXJ0UmV2aWV3OiByZXN0YXJ0UmV2aWV3LAogICAgICAgIG9wZW5TaW1pbGFyQ2FzZXNNb2RhbDogb3BlblNpbWlsYXJDYXNlc01vZGFsLAogICAgICAgIGFwcGx5QnVzaW5lc3NSdWxlczogYXBwbHlCdXNpbmVzc1J1bGVzLAogICAgICAgIHNob3dBdHRhY2htZW50TW9kYWw6IG9wZW5BdHRhY2htZW50TW9kYWwsCiAgICAgICAgYmluZEdyaWREeW5hbWljRmlsdGVyczogYmluZEdyaWREeW5hbWljRmlsdGVycywKICAgICAgICBlbmFibGVNZW51VG9vbHRpcHM6IGVuYWJsZU1lbnVUb29sdGlwcywKICAgICAgICBzb3J0SWNvbkhhbmRsZXI6IHNvcnRJY29uSGFuZGxlciwKICAgICAgICBpc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZTogaXNBbGVydFBlcnNpc3RlZEluU2Vzc2lvblN0b3JhZ2UsCiAgICAgICAgcmVtb3ZlRmlsdGVyc0Zyb21TZXNzaW9uU3RvcmFnZTogcmVtb3ZlRmlsdGVyc0Zyb21TZXNzaW9uU3RvcmFnZSwKICAgICAgICBvcGVuU2F2ZVZpZXdNb2RhbDogb3BlblNhdmVWaWV3TW9kYWwsCiAgICAgICAgY3JlYXRlU29ydGluZ01hcDogY3JlYXRlU29ydGluZ01hcCwKICAgICAgICBjcmVhdGVGaWx0ZXJNYXA6IGNyZWF0ZUZpbHRlck1hcCwKICAgICAgICBjcmVhdGVMaXN0T2ZJbmRleDogY3JlYXRlTGlzdE9mSW5kZXgsCiAgICAgICAgb3BlbkFsZXJ0VGFnTW9kYWw6IG9wZW5BbGVydFRhZ01vZGFsLAogICAgICAgIHNldFNvcnRPcmRlcjogc2V0U29ydE9yZGVyLAogICAgICAgIG9wZW5TaW5nbGVBbGVydFRhZ01vZGFsOiBvcGVuU2luZ2xlQWxlcnRUYWdNb2RhbCwKICAgICAgICBnZW5lcmF0ZVZpZXdJbmZvOiBnZW5lcmF0ZVZpZXdJbmZvLAogICAgICAgIHBvcHVsYXRlQWR2YW5jZWRGaWx0ZXJTZWxlY3Q6IHBvcHVsYXRlQWR2YW5jZWRGaWx0ZXJTZWxlY3QKICAgIH0KCn0pKCk7CgpmdW5jdGlvbiBzaG93RXJyb3JNZXNzYWdlSW5Nb2RhbCgkbW9kYWwsIHRleHQpIHsKICAgIGNsZWFyX2Vycm9ycygpOwogICAgaWYgKHRleHQpIHsKICAgICAgICB0ZXh0ID0gdGV4dDsKICAgIH0gZWxzZSB7CiAgICAgICAgdGV4dCA9ICdQbGVhc2UgZmlsbCAgdGhlIHJlcXVpcmVkIEZpZWxkcyc7CiAgICB9CiAgICB2YXIgYWxlcnRIdG1sID0gZ2V0RXJyb3JNZXNzYWdlSHRtbCh0ZXh0KTsKICAgICRtb2RhbC5maW5kKCcubW9kYWwtYm9keScpLnByZXBlbmQoYWxlcnRIdG1sKTsKfQoKZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlSHRtbChtc2cpIHsKICAgIHZhciBhbGVydEh0bWwgPSAnPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlIiByb2xlPSJhbGVydCI+ICcgKwogICAgICAgICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9ImFsZXJ0Ij4gJyArCiAgICAgICAgJzxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPiAnICsKICAgICAgICAnPHNwYW4gY2xhc3M9InNyLW9ubHkiPjxnOm1lc3NhZ2UgY29kZT0iZGVmYXVsdC5idXR0b24uY2xvc2UubGFiZWwiIC8+PC9zcGFuPiAnICsKICAgICAgICAnPC9idXR0b24+ICcgKyBtc2c7CiAgICAnPC9kaXY+JzsKICAgIHJldHVybiBhbGVydEh0bWw7Cn0KCnZhciBjbGVhcl9lcnJvcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAkKCcubW9kYWwgLm1vZGFsLWJvZHkgLmFsZXJ0JykucmVtb3ZlKCk7Cn07CgpmdW5jdGlvbiBzZWFyY2gobmFtZUtleSwgbXlBcnJheSkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBteUFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKG15QXJyYXlbaV0ubmFtZSA9PT0gbmFtZUtleSkgewogICAgICAgICAgICByZXR1cm4gbXlBcnJheVtpXTsKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIHBvcHVsYXRlVG9waWNEZXRhaWwoJG1vZGFsLCB0b3BpY09iaikgewogICAgJG1vZGFsLmZpbmQoJyNzdGFydERhdGUnKS52YWwodG9waWNPYmouc3RhcnREYXRlKTsKICAgICRtb2RhbC5maW5kKCcjZW5kRGF0ZScpLnZhbCh0b3BpY09iai5lbmREYXRlKTsKICAgICRtb2RhbC5maW5kKCcucHJvZHVjdC1zcGFuJykudGV4dChnZXRQcm9kdWN0TmFtZUxpc3QoSlNPTi5wYXJzZSh0b3BpY09iai5wcm9kdWN0cykpKTsKICAgICRtb2RhbC5maW5kKCcjc3RhcnREYXRlJykuYXR0cigiZGlzYWJsZWQiLCAiIik7CiAgICAkbW9kYWwuZmluZCgnI2VuZERhdGUnKS5hdHRyKCJkaXNhYmxlZCIsICIiKTsKICAgIGlmICh0b3BpY09iai5wcm9kdWN0cykgewogICAgICAgICRtb2RhbC5maW5kKCcjcHJvZHVjdCcpLmF0dHIoImRpc2FibGVkIiwgIiIpOwogICAgfQp9CgpmdW5jdGlvbiBkZXBvcHVsYXRlVG9waWNEZXRhaWwoJG1vZGFsKSB7CiAgICB2YXIgcHJvZHVjdEpzb24gPSAkbW9kYWwuZmluZCgnLnByb2R1Y3QtanNvbi1jb250YWluZXInKS52YWwoKTsKICAgICRtb2RhbC5maW5kKCcjc3RhcnREYXRlJykudmFsKCIiKTsKICAgICRtb2RhbC5maW5kKCcjZW5kRGF0ZScpLnZhbCgiIik7CiAgICAkbW9kYWwuZmluZCgnI3Byb2R1Y3QnKS52YWwoIiIpOwogICAgJG1vZGFsLmZpbmQoJy5wcm9kdWN0LXNwYW4nKS50ZXh0KGdldFByb2R1Y3ROYW1lTGlzdChKU09OLnBhcnNlKHByb2R1Y3RKc29uKSkpOwogICAgJG1vZGFsLmZpbmQoJyNzdGFydERhdGUnKS5yZW1vdmVBdHRyKCJkaXNhYmxlZCIpOwogICAgJG1vZGFsLmZpbmQoJyNlbmREYXRlJykucmVtb3ZlQXR0cigiZGlzYWJsZWQiKTsKICAgICRtb2RhbC5maW5kKCcjcHJvZHVjdCcpLnJlbW92ZUF0dHIoImRpc2FibGVkIik7Cn0KCmZ1bmN0aW9uIGdlbmVyYXRlUHJvZHVjdEpzb24ocHJvZHVjdElkLCBwcm9kdWN0TmFtZSwgbGV2ZWwpIHsKICAgIHZhciB0b3BpY1Byb2R1Y3RWYWx1ZXMgPSB7IjEiOiBbXSwgIjIiOiBbXSwgIjMiOiBbXSwgIjQiOiBbXSwgIjUiOiBbXX07CiAgICB0b3BpY1Byb2R1Y3RWYWx1ZXNbbGV2ZWxdLnB1c2goe25hbWU6IHByb2R1Y3ROYW1lLCBpZDogcHJvZHVjdElkfSk7CiAgICByZXR1cm4gdG9waWNQcm9kdWN0VmFsdWVzOwp9CgpmdW5jdGlvbiBnZXRQcm9kdWN0TmFtZUxpc3Qob2JqKSB7CiAgICB2YXIgcHJvZHVjdEFycmF5ID0gW107CiAgICB2YXIgb2JqQXJyYXkgPSBvYmpbJzMnXTsKICAgICQuZWFjaChvYmpBcnJheSwgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkgewogICAgICAgIHByb2R1Y3RBcnJheS5wdXNoKHZhbHVlLm5hbWUpOwogICAgfSk7CiAgICByZXR1cm4gcHJvZHVjdEFycmF5LmpvaW4oJywnKTsKfQoKZnVuY3Rpb24gZ2V0UHJvZHVjdEpzb24oYXBwbGljYXRpb25OYW1lLCByb3cpIHsKICAgIHZhciBwcm9kdWN0SnNvbjsKICAgIGlmIChhcHBsaWNhdGlvbk5hbWUgPT0gIkFkLUhvYyBBbGVydCIpIHsKICAgICAgICBpZiAocm93LmZpbmQoJy5yb3ctcHJvZHVjdC1qc29uLWNvbnRhaW5lcicpLnZhbCgpKQogICAgICAgICAgICBwcm9kdWN0SnNvbiA9IEpTT04ucGFyc2Uocm93LmZpbmQoJy5yb3ctcHJvZHVjdC1qc29uLWNvbnRhaW5lcicpLnZhbCgpKTsKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHByb2R1Y3ROYW1lID0gcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0icHJvZHVjdE5hbWUiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICB2YXIgcHJvZHVjdElkID0gcm93LmZpbmQoJy5yb3ctcHJvZHVjdC1pZCcpLnZhbCgpOwogICAgICAgIHZhciBsZXZlbCA9IHJvdy5maW5kKCcucm93LWxldmVsLWlkJykudmFsKCk7CiAgICAgICAgaWYgKCFsZXZlbCkgewogICAgICAgICAgICBsZXZlbCA9IDM7CiAgICAgICAgfQogICAgICAgIHByb2R1Y3RKc29uID0gZ2VuZXJhdGVQcm9kdWN0SnNvbihwcm9kdWN0SWQsIHByb2R1Y3ROYW1lLCBsZXZlbCk7CiAgICB9CiAgICByZXR1cm4gcHJvZHVjdEpzb247Cn0KCmZ1bmN0aW9uIGFwcGx5U2VsZWN0MkZvclRhZ3MoJHNlbGVjdG9yLCB1cmwsIHBsYWNlSG9sZGVyVGV4dCwgaXNDYXNlU2VyaWVzVGFnKSB7CiAgICAkc2VsZWN0b3Iuc2VsZWN0Mih7CiAgICAgICAgbWluaW11bUlucHV0TGVuZ3RoOiAwLAogICAgICAgIG11bHRpcGxlOiB0cnVlLAogICAgICAgIHRhZ3M6IHRydWUsCiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlSG9sZGVyVGV4dCwKICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLAogICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgY3JlYXRlVGFnOiBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgICAgICAgIHZhciB0ZXJtID0gJC50cmltKHBhcmFtcy50ZXJtKTsKICAgICAgICAgICAgaWYgKHRlcm0gIT0gIiIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IHRlcm0sCiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGVybQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgfSwKICAgICAgICBhamF4OiB7CiAgICAgICAgICAgIHF1aWV0TWlsbGlzOiAyNTAsCiAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRlcm06IHBhcmFtcy50ZXJtLAogICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlIHx8IDEsCiAgICAgICAgICAgICAgICAgICAgbWF4OiAzMCwKICAgICAgICAgICAgICAgICAgICBsYW5nOiB1c2VyTG9jYWxlLAogICAgICAgICAgICAgICAgICAgIGlzQ2FzZVNlcmllc1RhZzogaXNDYXNlU2VyaWVzVGFnCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9jZXNzUmVzdWx0czogZnVuY3Rpb24gKGRhdGEsIHBhcmFtcykgewogICAgICAgICAgICAgICAgcGFyYW1zLnBhZ2UgPSBwYXJhbXMucGFnZSB8fCAxOwogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiBkYXRhLmxpc3QsCiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogewogICAgICAgICAgICAgICAgICAgICAgICBtb3JlOiAocGFyYW1zLnBhZ2UgKiAzMCkgPCBkYXRhLnRvdGFsQ291bnQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7Cn0KCmZ1bmN0aW9uIHNob3dDb21tZW50SWNvbihjdXJyZW50Um93KSB7CiAgICB2YXIgJGJ0bkdyb3VwID0gJChjdXJyZW50Um93KS5jbG9zZXN0KCd0cicpLmZpbmQoJ3RkLmRyb3BEb3duIC5idG4tZ3JvdXAnKTsKICAgIGlmICgkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5sZW5ndGggPT09IDApIHsKICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmRyb3Bkb3duLXRvZ2dsZScpLmFmdGVyKCc8aSBjbGFzcz0ibWRpIG1kaS1jaGF0IGJsdWUtMiBmb250LTEzIHBvcy1hYiBjb21tZW50IiB0aXRsZT0iJyArICQuaTE4bi5fKCdjb21tZW50QXZhaWxhYmxlJykgKyAnIj48L2k+Jyk7CiAgICB9Cn0KCmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRJY29uKGN1cnJlbnRSb3cpIHsKICAgIHZhciAkYnRuR3JvdXAgPSAkKGN1cnJlbnRSb3cpLmNsb3Nlc3QoJ3RyJykuZmluZCgndGQuZHJvcERvd24gLmJ0bi1ncm91cCcpOwogICAgJCgkYnRuR3JvdXApLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKS5uZXh0KCdpJykucmVtb3ZlKCk7Cn0KCmZ1bmN0aW9uIHJlbW92ZUF0dGFjaG1lbnRJY29uKGN1cnJlbnRSb3cpIHsKICAgIHZhciAkYnRuR3JvdXAgPSAkKGN1cnJlbnRSb3cpLmNsb3Nlc3QoJ3RyJykuZmluZCgndGQuZHJvcERvd24gLmJ0bi1ncm91cCcpOwogICAgaWYgKCQoJGJ0bkdyb3VwKS5maW5kKCcuY29tbWVudCcpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICQoJGJ0bkdyb3VwKS5maW5kKCcuZHJvcGRvd24tdG9nZ2xlJykubmV4dCgnaScpLnJlbW92ZSgpOwogICAgfSBlbHNlIHsKICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5uZXh0KCdpJykucmVtb3ZlKCk7CiAgICB9Cn0KCmZ1bmN0aW9uIHNob3dBdHRhY2htZW50SWNvbih0clJvdykgewogICAgdmFyICRidG5Hcm91cCA9ICQodHJSb3cpLmZpbmQoJ3RkLmRyb3BEb3duIC5idG4tZ3JvdXAnKTsKICAgIGlmICgkKCRidG5Hcm91cCkuZmluZCgnLmF0dGFjaCcpLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGlmICgkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgJCgkYnRuR3JvdXApLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKS5hZnRlcignIDxpIGNsYXNzPSJtZGkgbWRpLWF0dGFjaG1lbnQgYmx1ZS0xIGZvbnQtMTMgcG9zLWFiIGF0dGFjaCIgdGl0bGU9IicgKyAkLmkxOG4uXygnYXR0YWNobWVudEF2YWlsYWJsZScpICsgJyI+PC9pPiAnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5hZnRlcignIDxpIGNsYXNzPSJtZGkgbWRpLWF0dGFjaG1lbnQgYmx1ZS0xIGZvbnQtMTMgcG9zLWFiIGF0dGFjaCIgdGl0bGU9IicgKyAkLmkxOG4uXygnYXR0YWNobWVudEF2YWlsYWJsZScpICsgJyI+PC9pPiAnKTsKICAgICAgICB9CiAgICB9Cn0KCnZhciBpc1NhZmV0eUxlYWRBbGxvd2VkID0gZnVuY3Rpb24gKGxpc3RQcm9kdWN0SWRzLCBzZWxlY3RlZFByb2R1Y3RJZCkgewogICAgcmV0dXJuIGxpc3RQcm9kdWN0SWRzLmluZGV4T2Yoc2VsZWN0ZWRQcm9kdWN0SWQpICE9PSAtMQp9OwoKdmFyIHNldENvbHVtblNlcSA9IGZ1bmN0aW9uIChtYXBTZXEpIHsKICAgIGNvbHVtblNlcSA9IG1hcFNlcQp9Cgp2YXIgc2lnbmFsID0gc2lnbmFsIHx8IHt9CgpzaWduYWwuYWxlcnRDb21tZW50cyA9IChmdW5jdGlvbiAoKSB7CgogICAgdmFyIGxpc3RDb21tZW50cyA9IGZ1bmN0aW9uIChjYXNlSnNvbikgewoKICAgICAgICAvL01vZGFsIG9iamVjdAogICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudE1vZGFsJyk7CgogICAgICAgIC8vUG9wdWxhdGUgdGhlIGV4aXN0aW5nIGNvbW1lbnRzIGFuZCBiaW5kIGV2ZW50cyB0byB0aGVtLgogICAgICAgIHBvcHVsYXRlQ29tbWVudHMoY29tbWVudE1vZGFsLCBjYXNlSnNvbik7CgogICAgICAgIC8vU2V0IHZhbHVlcyB0byB0aGUgbW9kYWwgZWxlbWVudHMuCiAgICAgICAgdmFyIGNvbW1lbnRNZXRhSW5mbyA9ICIiCiAgICAgICAgaWYgKGNhc2VKc29uLmFsZXJ0VHlwZSA9PSAiQWdncmVnYXRlIENhc2UgQWxlcnQiKSB7CiAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICc8c3BhbiBpZD0icHJvZHVjdE5hbWUiPicgKyBjYXNlSnNvbi5wcm9kdWN0TmFtZSArICc8L3NwYW4+IC0gPHNwYW4gaWQ9ImV2ZW50TmFtZSI+JyArIGNhc2VKc29uLmV2ZW50TmFtZSArICc8L3NwYW4+JwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICc8c3BhbiBpZD0iY2FzZU51bWJlciI+JyArIGNhc2VKc29uLmNhc2VOdW1iZXIgKyAnPC9zcGFuPiAtIDxzcGFuIGlkPSJwcm9kdWN0RmFtaWx5Ij4nICsgY2FzZUpzb24ucHJvZHVjdEZhbWlseSArICc8L3NwYW4+JwogICAgICAgIH0KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnQtbWV0YS1pbmZvIikuaHRtbChjb21tZW50TWV0YUluZm8pOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjYXBwbGljYXRpb24iKS5odG1sKGNhc2VKc29uLmFsZXJ0VHlwZSk7CiAgICAgICAgY29tbWVudE1vZGFsLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgYmluZFNhdmVDb21tZW50KGNvbW1lbnRNb2RhbCk7CiAgICB9OwoKICAgIHZhciBwb3B1bGF0ZUNvbW1lbnRzID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24sIG9uU2lnbmFsU2NyZWVuKSB7CiAgICAgICAgdmFyIHVwZGF0ZWRDb21tZW50cyA9ICQoIiNjb21tZW50Ym94IikudmFsKCk7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgdXJsOiAiL3NpZ25hbC9hbGVydENvbW1lbnQvbGlzdENvbW1lbnRzIiwKICAgICAgICAgICAgZGF0YTogY2FzZUpzb24sCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI25vLWNvbW1lbnRzIikuYWRkQ2xhc3MoImhpZGUiKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5yZW1vdmVDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykuaHRtbCgiVXBkYXRlIik7CiAgICAgICAgICAgICAgICAgICAgaWYodXBkYXRlZENvbW1lbnRzLmxlbmd0aCA+PSByZXN1bHQuY29tbWVudHMubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKHVwZGF0ZWRDb21tZW50cyk7CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbChyZXN1bHQuY29tbWVudHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbChyZXN1bHQuaWQpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgiTGFzdCBNb2RpZmllZCBieSAiICsgcmVzdWx0Lm1vZGlmaWVkQnkgKyAiIG9uICIgKyByZXN1bHQuZGF0ZVVwZGF0ZWQpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgaXNDb21tZW50QWRkZWQgIT0gJ3VuZGVmaW5lZCcgJiYgaXNDb21tZW50QWRkZWQgJiYgb25TaWduYWxTY3JlZW4pewogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCcnKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLmh0bWwoIkFkZCIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNuby1jb21tZW50cyIpLnJlbW92ZUNsYXNzKCJoaWRlIik7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5wcm9wKCJkaXNhYmxlZCIsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgnJyk7CgogICAgICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mIGlzQ29tbWVudEFkZGVkICE9ICd1bmRlZmluZWQnICYmIGlzQ29tbWVudEFkZGVkKXsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5odG1sKCJBZGQiKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRib3giKS52YWwoJycpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjbm8tY29tbWVudHMiKS5yZW1vdmVDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5hZGRDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgnJyk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIi5jcmVhdGVkQnkiKS50ZXh0KCcnKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLmh0bWwoIkFkZCIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5vbigia2V5dXAiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50SWQiKS52YWwoKT09IiIgJiYgY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Ym94JykudmFsKCk9PSIiKQogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLnByb3AoImRpc2FibGVkIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiVW5hYmxlIHRvIGxvYWQgcHJldmlvdXMgY29tbWVudHMuIik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGJpbmRTYXZlQ29tbWVudCA9IGZ1bmN0aW9uIChjb21tZW50TW9kYWwpIHsKCiAgICAgICAgLy9BZGQgY2xpY2sgZXZlbnQgdG8gdGhlIGFkZCBjb21tZW50IGJ1dHRvbi4KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiLmFkZC1jb21tZW50cyIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGNhc2VKc29uT2JqQXJyYXkgPSBbXTsKICAgICAgICAgICAgdmFyIGFwcFR5cGUgPSAkKCIjYXBwbGljYXRpb24iKS5odG1sKCk7CiAgICAgICAgICAgIHZhciB2YWxpZGF0ZWRTaWduYWxJZCA9ICQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKTsKICAgICAgICAgICAgdmFyIHRvcGljSWQgPSAkKCIjdG9waWNJZCIpLmh0bWwoKTsKCiAgICAgICAgICAgIGlmIChhcHBUeXBlID09ICcnKSB7CiAgICAgICAgICAgICAgICBhcHBUeXBlID0gY29tbWVudE1vZGFsLmZpbmQoIiNhcHBsaWNhdGlvbiIpLmh0bWwoKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRlZFNpZ25hbElkID0gY29tbWVudE1vZGFsLmZpbmQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKTsKICAgICAgICAgICAgICAgIHRvcGljSWQgPSBjb21tZW50TW9kYWwuZmluZCgiI3RvcGljSWQiKS5odG1sKCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNhc2VKc29uT2JqOwogICAgICAgICAgICB2YXIgdXJsOwogICAgICAgICAgICB2YXIgZGF0YTsKICAgICAgICAgICAgLy9DYXNlIEpTT04uCiAgICAgICAgICAgIGNhc2VKc29uT2JqID0gewogICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFwcFR5cGUsCiAgICAgICAgICAgICAgICAicHJvZHVjdE5hbWUiOiBjb21tZW50TW9kYWwuZmluZCgiI3Byb2R1Y3ROYW1lIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImV2ZW50TmFtZSI6IGNvbW1lbnRNb2RhbC5maW5kKCIjZXZlbnROYW1lIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImNvbW1lbnRzIjogY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKCksCiAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiB2YWxpZGF0ZWRTaWduYWxJZCwKICAgICAgICAgICAgICAgICJhc3NpZ25lZFRvIjogY29tbWVudE1vZGFsLmZpbmQoIiNhc3NpZ25lZFRvIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjb21tZW50TW9kYWwuZmluZCgiI2V4ZWN1dGVkQ29uZmlnSWQiKS5odG1sKCksCiAgICAgICAgICAgICAgICAiY29uZmlnSWQiIDogY29tbWVudE1vZGFsLmZpbmQoIiNjb25maWdJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICJ0b3BpY0lkIjogY29tbWVudE1vZGFsLmZpbmQoIiN0b3BpY0lkIikuaHRtbCgpLAogICAgICAgICAgICAgICAgInByb2R1Y3RGYW1pbHkiOiBjb21tZW50TW9kYWwuZmluZCgiI3Byb2RGYW1pbHkiKS5odG1sKCksCiAgICAgICAgICAgICAgICAiY2FzZU51bWJlciI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY2FzZU5vIikuaHRtbCgpLAogICAgICAgICAgICAgICAgInByb2R1Y3RJZCI6IHBhcnNlSW50KGNvbW1lbnRNb2RhbC5maW5kKCIjcHJvZHVjdElkIikuaHRtbCgpKSwKICAgICAgICAgICAgICAgICJwdENvZGUiOiBwYXJzZUludChjb21tZW50TW9kYWwuZmluZCgiI3B0Q29kZSIpLmh0bWwoKSkKCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNhc2VKc29uT2JqQXJyYXkucHVzaChjYXNlSnNvbk9iaik7CiAgICAgICAgICAgIGlmKGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCkpewogICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L3VwZGF0ZUNvbW1lbnQiOwogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAiYWxlcnRUeXBlIjogYXBwVHlwZSwKICAgICAgICAgICAgICAgICAgICAiY29tbWVudCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgICJpZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjb21tZW50TW9kYWwuZmluZCgiI2V4ZWN1dGVkQ29uZmlnSWQiKS5odG1sKCksCiAgICAgICAgICAgICAgICAgICAgInZhbGlkYXRlZFNpZ25hbElkIjogdmFsaWRhdGVkU2lnbmFsSWQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L3NhdmVDb21tZW50IjsKICAgICAgICAgICAgICAgIGRhdGEgPSB7ImNhc2VKc29uT2JqQXJyYXkiOiBKU09OLnN0cmluZ2lmeShjYXNlSnNvbk9iakFycmF5KX0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2lzVXBkYXRlZCIpLnZhbCgidHJ1ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUNvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25PYmpBcnJheVswXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjb21tZW50Ym94JykudmFsKCcnKS5ibHVyKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBiaW5kRWRpdENvbW1lbnQgPSBmdW5jdGlvbiAoY29tbWVudE1vZGFsKSB7CgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5maW5kKCcuZWRpdC1jb21tZW50JykuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoIi51cGRhdGUtY29tbWVudCIpLnJlbW92ZUNsYXNzKCJoaWRkZW4iKTsKICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKCIuY29tbWVudC1hcmVhIikuYXR0cignZGlzYWJsZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoImhpZGRlbiIpCiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBiaW5kRGVsZXRlQ29tbWVudCA9IGZ1bmN0aW9uIChjb21tZW50TW9kYWwsIGNhc2VKc29uKSB7CgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5maW5kKCcuZGVsZXRlLWNvbW1lbnQnKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBpZCA9IHsKICAgICAgICAgICAgICAgICJpZCI6ICQodGhpcykucGFyZW50KCkuZmluZCgiLmNvbW1lbnRJZCIpLnZhbCgpLAogICAgICAgICAgICAgICAgInZhbGlkYXRlZFNpZ25hbElkIjogJCgiI3ZhbGlkYXRlZFNpZ25hbElkIikudGV4dCgpLAogICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCIgOiBjYXNlSnNvbi5hZGhvY0FsZXJ0SWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogIi9zaWduYWwvYWxlcnRDb21tZW50L2RlbGV0ZUNvbW1lbnQiLAogICAgICAgICAgICAgICAgZGF0YTogaWQsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGVDb21tZW50cyhjb21tZW50TW9kYWwsIGNhc2VKc29uKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGJpbmRVcGRhdGVDb21tZW50ID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pIHsKCgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5maW5kKCcudXBkYXRlLWNvbW1lbnQnKS5jbGljayhmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoIi5nbHlwaGljb24tcGVuY2lsIikucmVtb3ZlQ2xhc3MoImhpZGRlbiIpOwogICAgICAgICAgICB2YXIgY29tbWVudERhdGEgPSB7CiAgICAgICAgICAgICAgICAiY29tbWVudCI6ICQodGhpcykucGFyZW50KCkuZmluZCgiLmNvbW1lbnQtYXJlYSIpLnZhbCgpLAogICAgICAgICAgICAgICAgImlkIjogJCh0aGlzKS5wYXJlbnQoKS5maW5kKCIuY29tbWVudElkIikudmFsKCksCiAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiAkKCIjdmFsaWRhdGVkU2lnbmFsSWQiKS50ZXh0KCksCiAgICAgICAgICAgICAgICAidG9waWNJZCI6ICQoIiN0b3BpY0lkIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjYXNlSnNvbi5leGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCIgOiBjYXNlSnNvbi5hZGhvY0FsZXJ0SWQKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6ICIvc2lnbmFsL2FsZXJ0Q29tbWVudC91cGRhdGVDb21tZW50IiwKICAgICAgICAgICAgICAgIGRhdGE6IGNvbW1lbnREYXRhLAogICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewoKICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUNvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIGxpc3RfY29tbWVudHM6IGxpc3RDb21tZW50cywKICAgICAgICBwb3B1bGF0ZV9jb21tZW50czogcG9wdWxhdGVDb21tZW50cywKICAgICAgICBzYXZlX2NvbW1lbnQ6IGJpbmRTYXZlQ29tbWVudAogICAgfQp9KSgpOwoKCi8vPSByZXF1aXJlIGFwcC9wdnMvY29tbW9uL3J4X2NvbW1vbi5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9hbGVydF91dGlscy5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9saXN0X3V0aWxzLmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvYWN0aXZpdHkvYWN0aXZpdGllcy5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9oYW5kbGViYXJfZXh0LmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvZGF0YVRhYmxlQWN0aW9uQnV0dG9ucy5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2FsZXJ0c19yZXZpZXcvYWxlcnRfcmV2aWV3Ci8vPSByZXF1aXJlIGFwcC9wdnMvYWxlcnRDb21tZW50cy9hbGVydENvbW1lbnRzLmpzCgp2YXIgdXNlckxvY2FsID0gImVuIjsKdmFyIGFwcGxpY2F0aW9uTmFtZSA9ICJBZC1Ib2MgQWxlcnQiOwp2YXIgYXBwbGljYXRpb25MYWJlbCA9ICJBZC1Ib2MgQWxlcnQiOwp2YXIgdGFibGU7CnZhciBkaXIgPSAnJzsKdmFyIGluZGV4ID0gLTE7CnZhciBjb21tZW50TGlzdDsKCiQuZm4uZGF0YVRhYmxlLmV4dC5vcmRlclsnZG9tLXByaW9yaXR5J10gPSBmdW5jdGlvbiAoc2V0dGluZ3MsIGNvbCkgewogICAgdmFyIGpzb24gPSAkLnBhcnNlSlNPTihwcmlvcml0aWVzKTsKICAgIHJldHVybiB0aGlzLmFwaSgpLmNvbHVtbihjb2wsIHtvcmRlcjogJ2luZGV4J30pLm5vZGVzKCkubWFwKGZ1bmN0aW9uICh0ZCwgaSkgewogICAgICAgIHZhciBwcmlvcml0eSA9ICQoJ2EnLCB0ZClbMF0uZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGpzb25baV1bMF0gPT0gcHJpb3JpdHkpCiAgICAgICAgICAgICAgICByZXR1cm4ganNvbltpXVsxXTsKICAgICAgICB9CiAgICB9KTsKfTsKCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgIHZhciBhbGVydERldGFpbHNUYWJsZTsKICAgIGFzc2lnbmVkVG9EYXRhID0gW107CgogICAgdmFyIGNoZWNrZWRJZExpc3QgPSBbXTsKICAgIHZhciBjaGVja2VkUm93TGlzdCA9IFtdOwogICAgc2lnbmFsLmFsZXJ0UmV2aWV3LnNldFNvcnRPcmRlcigpOwoKCiAgICB2YXIgaW5pdEFsZXJ0RGV0YWlsc1RhYmxlID0gZnVuY3Rpb24gKCkgewoKICAgICAgICB2YXIgaXNGaWx0ZXJSZXF1ZXN0ID0gdHJ1ZTsKICAgICAgICB2YXIgZmlsdGVyVmFsdWVzID0gW107CiAgICAgICAgdmFyIHByZWZpeCA9ICJhZGhvY18iOwogICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UpIHsKICAgICAgICAgICAgaWYgKHNpZ25hbC5hbGVydFJldmlldy5pc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZShwcmVmaXgpKSB7CiAgICAgICAgICAgICAgICBmaWx0ZXJWYWx1ZXMgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0ocHJlZml4ICsgImZpbHRlcnNfdmFsdWUiKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRSZXZpZXcucmVtb3ZlRmlsdGVyc0Zyb21TZXNzaW9uU3RvcmFnZShwcmVmaXgpOwogICAgICAgICAgICAgICAgaXNGaWx0ZXJSZXF1ZXN0ID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRhYmxlID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSh7CiAgICAgICAgICAgICJzUGFnaW5hdGlvblR5cGUiOiAiYm9vdHN0cmFwIiwKICAgICAgICAgICAgImxhbmd1YWdlIjogewogICAgICAgICAgICAgICAgInVybCI6ICIuLi9hc3NldHMvaTE4bi9kYXRhVGFibGVzXyIgKyB1c2VyTG9jYWxlICsgIi5qc29uIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicm93Q2FsbGJhY2siOiBmdW5jdGlvbiAocm93LCBkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgLy9CaW5kIEFzc2lnbmVkVG8gU2VsZWN0IEJveAogICAgICAgICAgICAgICAgYXNzaWduZWRUb0RhdGEucHVzaCh7bmFtZTogZGF0YS5hc3NpZ25lZFRvVmFsdWUubmFtZSwgaWQ6IGRhdGEuYXNzaWduZWRUb1ZhbHVlLmlkfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZuRHJhd0NhbGxiYWNrOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzaWduYWwubGlzdF91dGlscy5mbGFnX2hhbmRsZXIoImFkSG9jQWxlcnQiLCAidG9nZ2xlRmxhZyIpOwogICAgICAgICAgICAgICAgJCgiLmFzc2lnbmVkVG9TZWxlY3QiKS5lYWNoKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgICAgICAgICAgICAgc2lnbmFsLnVzZXJfZ3JvdXBfdXRpbHMuYmluZF9hc3NpZ25fdG8oJCh0aGlzKSwgc2VhcmNoVXNlckdyb3VwTGlzdFVybCwgYXNzaWduZWRUb0RhdGFbaV0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRSZXZpZXcuc29ydEljb25IYW5kbGVyKCkKICAgICAgICAgICAgICAgIGNvbEVsbGlwc2lzKCk7CiAgICAgICAgICAgICAgICB3ZWJVaVBvcEluaXQoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZuSW5pdENvbXBsZXRlOiBmdW5jdGlvbiAoc2V0dGluZ3MsIGpzb24pIHsKICAgICAgICAgICAgICAgIGFzc2lnbmVkVG9EYXRhID0gW107CiAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRSZXZpZXcuYmluZEdyaWREeW5hbWljRmlsdGVycyhqc29uLmZpbHRlcnMsIHByZWZpeCwganNvbi5jb25maWdJZCk7CgogICAgICAgICAgICAgICAgdmFyIHRoZURhdGFUYWJsZSA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5EYXRhVGFibGUoKTsKCiAgICAgICAgICAgICAgICAkKCIjY2xvc2VkQ2hlY2tCb3giKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiBGaWx0ZXJzIGZvciBnaXJkIHRvIGJlIGludHJvZHVjZWQuCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWNvbHVtbi1maWx0ZXJzIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSAkKCcueWFkY2YtZmlsdGVyLXdyYXBwZXInKTsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRFbGUgPSAkKCcueWFkY2YtZmlsdGVyJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZS5pcygnOnZpc2libGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICBlbGUuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RWxlLmZpcnN0KCkuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhlRGF0YVRhYmxlLmRyYXcoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJCgnLnlhZGNmLWZpbHRlci13cmFwcGVyJykuaGlkZSgpOwogICAgICAgICAgICAgICAgdGhlRGF0YVRhYmxlLmRyYXcoKTsKICAgICAgICAgICAgICAgIHNpZ25hbC5maWVsZE1hbmFnZW1lbnQuaW5pdCgkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCksICcjYWxlcnRzRGV0YWlsc1RhYmxlJywgNCk7CiAgICAgICAgICAgICAgICBiaW5kQXNzaWduVG9TZWxlY3Rpb24oc2VhcmNoVXNlckdyb3VwTGlzdFVybCwgYXNzaWduVG9Hcm91cFVybCwgdGFibGUpOwogICAgICAgICAgICAgICAgYWRkR3JpZFNob3J0Y3V0cygnI2FsZXJ0c0RldGFpbHNUYWJsZScpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgImFqYXgiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogbGlzdENvbmZpZ1VybCArICcmaXNGaWx0ZXJSZXF1ZXN0PScgKyBpc0ZpbHRlclJlcXVlc3QgKyAnJmZpbHRlcnM9JyArIEpTT04uc3RyaW5naWZ5KGZpbHRlclZhbHVlcyksCiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsCiAgICAgICAgICAgICAgICAiZGF0YSI6IGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICAgICAgZC5kaXNwb3NpdGlvbiA9ICQoJyNkaXNwb3NpdGlvbkZpbHRlcicpLnZhbCgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImRhdGFTcmMiOiAiZGF0YSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImFhU29ydGluZyI6IFtdLAogICAgICAgICAgICAiYkxlbmd0aENoYW5nZSI6IHRydWUsCiAgICAgICAgICAgICJpRGlzcGxheUxlbmd0aCI6IDUwLAogICAgICAgICAgICAiYlByb2Nlc3NpbmciOiB0cnVlLAogICAgICAgICAgICAiY29sUmVvcmRlciI6IHsKICAgICAgICAgICAgICAgICJyZWFsdGltZSI6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJNU0dfTE9BRElORyI6ICcnLAogICAgICAgICAgICAib0xhbmd1YWdlIjogewogICAgICAgICAgICAgICAgInNQcm9jZXNzaW5nIjogJzxkaXYgY2xhc3M9ImdyaWQtbG9hZGluZyI+PGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3NwaW5uZXIuZ2lmIiB3aWR0aD0iMzAiIGFsaWduPSJtaWRkbGUiIC8+PC9kaXY+JywKICAgICAgICAgICAgICAgICJzWmVyb1JlY29yZHMiOiAiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGUiLCAic0VtcHR5VGFibGUiOiAiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhTGVuZ3RoTWVudSI6IFtbNTAsIDEwMCwgMjAwLCAxMDAwLCAtMV0sIFs1MCwgMTAwLCAyMDAsIDEwMDAsICJBbGwiXV0sCiAgICAgICAgICAgIHNlYXJjaGluZzogdHJ1ZSwKICAgICAgICAgICAgImFvQ29sdW1ucyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAic2VsZWN0ZWQiLAogICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgY2xhc3M9ImFsZXJ0LWNoZWNrLWJveCBlZGl0b3ItYWN0aXZlIGNvcHktc2VsZWN0IiBkYXRhLWZpZWxkPSJhbGVydElkIiBkYXRhLWlkPScgKyByb3cuaWQgKyAnIC8+JzsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiIiwKICAgICAgICAgICAgICAgICAgICAib3JkZXJhYmxlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiB0cnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJkcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTIwIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbkJ1dHRvbiA9ICc8ZGl2IHN0eWxlPSJkaXNwbGF5OiBibG9jazsiIGNsYXNzPSJidG4tZ3JvdXAgZHJvcGRvd24gZGF0YVRhYmxlSGlkZUNlbGxDb250ZW50IiBhbGlnbj0iY2VudGVyIj4gXAogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHRhYmluZGV4PSIwIj4gXAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iY3Vyc29yOiBwb2ludGVyO2ZvbnQtc2l6ZTogMTI1JTsiIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLW9wdGlvbi12ZXJ0aWNhbCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgRHJvcGRvd248L3NwYW4+IFwKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPic7CgogICAgICAgICAgICAgICAgICAgICAgICBpZihyb3cubm90ZXMgIT0gJycpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uQnV0dG9uICs9ICAnPGkgY2xhc3M9Im1kaSBtZGktY2hhdCBibHVlLTIgZm9udC0xMyBwb3MtYWIgY29tbWVudCIgdGl0bGU9IicgKyAkLmkxOG4uXygnY29tbWVudEF2YWlsYWJsZScpICsgJyI+PC9pPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkJ1dHRvbiArPSAnPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IG1lbnUtY29zeSIgcm9sZT0ibWVudSI+PGxpIHJvbGU9InByZXNlbnRhdGlvbiI+PGEgdGFiaW5kZXg9IjAiIGNsYXNzPSJyZXZpZXctcm93LWljb24gY29tbWVudC1pY29uIiBkYXRhLWluZm89InJvdyI+PHNwYW4gY2xhc3M9ImZhIGZhLWNvbW1lbnQgbS1yLTEwIiA+PC9zcGFuPicgKyAkLmkxOG4uXygnY29tbWVudHMnKSArICc8L2E+PC9saT4nOwogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25CdXR0b24gKz0gJzwvdWw+PC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbkJ1dHRvbjsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJvcmRlcmFibGUiOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ImRyb3BEb3duIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAicHJpb3JpdHkiLAogICAgICAgICAgICAgICAgICAgICJhVGFyZ2V0cyI6IFsicHJpb3JpdHkiXSwKICAgICAgICAgICAgICAgICAgICAib3JkZXJEYXRhVHlwZSI6ICJkb20tcHJpb3JpdHkiLAogICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNQcmlvcnR5Q2hhbmdlQWxsb3dlZCA9IChpc1Byb2R1Y3RTZWN1cml0eSA9PSAndHJ1ZScgJiYgaXNTYWZldHlMZWFkQWxsb3dlZChhbGxvd2VkUHJvZHVjdHNBc1NhZmV0eUxlYWQsIHJvdy5wcm9kdWN0SWQpKSB8fCBpc1Byb2R1Y3RTZWN1cml0eSA9PSAnZmFsc2UnCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYWwudXRpbHMucmVuZGVyKCdwcmlvcml0eScsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5VmFsdWU6IHJvdy5wcmlvcml0eS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5Q2xhc3M6IHJvdy5wcmlvcml0eS5pY29uQ2xhc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ByaW9yaXR5Q2hhbmdlQWxsb3dlZDogaXNQcmlvcnR5Q2hhbmdlQWxsb3dlZAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAndGV4dC1jZW50ZXIgY29sLW1pbi0zMCBwcmlvcml0eVBhcmVudCcsCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiB0cnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTAwIiwKICAgICAgICAgICAgICAgICAgICBtUmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xFbGVtZW50ID0gJzxkaXYgY2xhc3M9ImNvbC1jb250YWluZXIiPjxkaXYgY2xhc3M9ImNvbC1oZWlnaHQiPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsZW1lbnQgKz0gIjxpbnB1dCB0eXBlPSdoaWRkZW4nIGNsYXNzPSdyb3ctcHJvZHVjdC1qc29uLWNvbnRhaW5lcicgdmFsdWU9JyIgKyByb3cucHJvZHVjdFNlbGVjdGlvbkpzb24gKyAiJy8+IiAsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsZW1lbnQgKz0gIjxhIGhyZWY9Jy9zaWduYWwvYWRIb2NBbGVydC9hbGVydERldGFpbD9pZD0iICsgcm93LmlkICsgIic+IiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGVIVE1MKHJvdy5uYW1lKSArICI8L2E+IjsKICAgICAgICAgICAgICAgICAgICAgICAgY29sRWxlbWVudCArPSAnPGEgdGFiaW5kZXg9IjAiIHRpdGxlPSInICsgJC5pMThuLl8oJ2FwcExhYmVsLnZpZXdBbGwnKSArICciIGNsYXNzPSJpY28tZG90cyB2aWV3LWFsbCIgbW9yZS1kYXRhPSInICsgcm93Lm5hbWUgKyAnIj48aSBjbGFzcz0ibWRpIG1kaS1kb3RzLWhvcml6b250YWwgZm9udC0yMCBibHVlLTEiPiA8L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsZW1lbnQgKz0gJzwvZGl2PjwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xFbGVtZW50OwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiB0cnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJwcm9kdWN0U2VsZWN0aW9uIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTUwIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI8c3BhbiBkYXRhLWZpZWxkID0ncHJvZHVjdE5hbWUnIGRhdGEtaWQ9JyIgKyByb3cucHJvZHVjdFNlbGVjdGlvbiArICInPiIgKyAocm93LnByb2R1Y3RTZWxlY3Rpb24pICsgIjwvc3Bhbj4iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ3Byb2R1Y3RTZWxlY3Rpb24nKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZXZlbnRTZWxlY3Rpb24iLAogICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiY29sLW1pbi0xMDAiLAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnZXZlbnRTZWxlY3Rpb24nKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiaXNzdWVUcmFja2VkIiwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ2lzc3VlVHJhY2tlZCcpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJudW1PZkljc3JzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tNzUiLAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnbnVtT2ZJY3NycycpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJpbml0RGF0YVNyYyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTEwMCIsCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiBzaWduYWwuZmllbGRNYW5hZ2VtZW50LnZpc2libGVDb2x1bW5zKCdpbml0RGF0YVNyYycpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICdzaWduYWxzQW5kVG9waWNzJywKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTUwIGNvbC1tYXgtMjAwIHNpZ25hbEluZm9ybWF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ25hbEFuZFRvcGljcyA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocm93LnNpZ25hbHNBbmRUb3BpY3MsIGZ1bmN0aW9uKGksIG9iail7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gc2lnbmFsRGV0YWlsVXJsICsgJz9pZD0nICsgb2JqWydzaWduYWxJZCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsQW5kVG9waWNzID0gc2lnbmFsQW5kVG9waWNzICsgJzxzcGFuIGNsYXNzPSJjbGljayI+PGEgIGNsYXNzPSJjZWxsLWJyZWFrIiBocmVmPSInICsgdXJsICsgJyI+JyArIGVzY2FwZUhUTUwob2JqWyduYW1lJ10pICsgJzwvYT48L3NwYW4+Jm5ic3A7JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsQW5kVG9waWNzID0gc2lnbmFsQW5kVG9waWNzICsgIiwiCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZihzaWduYWxBbmRUb3BpY3MubGVuZ3RoID4gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGRpdj4nICsgc2lnbmFsQW5kVG9waWNzLnN1YnN0cmluZygwLCBzaWduYWxBbmRUb3BpY3MubGVuZ3RoIC0gMSkgKyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICctJzsKCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ3NpZ25hbHNBbmRUb3BpY3MnKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiY3VycmVudERpc3Bvc2l0aW9uIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25hbC51dGlscy5yZW5kZXIoJ2Rpc3Bvc2l0aW9uJywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZERpc3Bvc2l0aW9uOiBkaXNwb3NpdGlvbkluY29taW5nT3V0Z29pbmdNYXBbcm93LmRpc3Bvc2l0aW9uXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREaXNwb3NpdGlvbjogcm93LmRpc3Bvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VKdXN0aWZpY2F0aW9uOiBmb3JjZUp1c3RpZmljYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkYXRpb25TdGF0ZUFjaGlldmVkOiByb3cuaXNWYWxpZGF0aW9uU3RhdGVBY2hpZXZlZAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnY3VycmVudERpc3Bvc2l0aW9uJyksCiAgICAgICAgICAgICAgICAgICAgImNsYXNzIjogJ2NvbC1tYXgtMjUwIGRpc3Bvc2l0aW9uQWN0aW9uJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZGlzcG9zaXRpb24iLAogICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiY29sLW1heC0yNTAgY3VycmVudERpc3Bvc2l0aW9uIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5kaXNwb3NpdGlvbjsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnZGlzcG9zaXRpb24nKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiYXNzaWduZWRUbyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTEwMCBjb2wtbWF4LTE1MCIsCiAgICAgICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYWwubGlzdF91dGlscy5hc3NpZ25lZF90b19jb21wKHJvdy5pZCwgcm93LmFzc2lnbmVkVG9WYWx1ZSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnYXNzaWduZWRUbycpLAogICAgICAgICAgICAgICAgICAgICJvcmRlcmFibGUiOiBmYWxzZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZGV0ZWN0ZWREYXRlIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTAwIiwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ2RldGVjdGVkRGF0ZScpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJkdWVJbiIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTEwMCBkdWVJbiIsCiAgICAgICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYWwubGlzdF91dGlscy5kdWVfaW5fY29tcChyb3cuZHVlSW4pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ2R1ZUluJykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc2Nyb2xsWDogdHJ1ZSwKICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICJ0YXJnZXRzIjogJ19hbGwnLAogICAgICAgICAgICAgICAgInJlbmRlciI6ICQuZm4uZGF0YVRhYmxlLnJlbmRlci50ZXh0KCkKICAgICAgICAgICAgfV0KICAgICAgICB9KTsKICAgICAgICBuZXcgJC5mbi5kYXRhVGFibGUuRml4ZWRDb2x1bW5zKHRhYmxlLCB7CiAgICAgICAgICAgIGxlZnRDb2x1bW5zOiA0LAogICAgICAgICAgICByaWdodENvbHVtbnM6IDAsCiAgICAgICAgICAgIGhlaWdodE1hdGNoOiAnYXV0bycKICAgICAgICB9KTsKCiAgICAgICAgdGFibGUub24oICd4aHInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGNvbW1lbnRMaXN0ID0gdGFibGUuYWpheC5qc29uKCkuY29tbWVudExpc3Q7CiAgICAgICAgfSk7CgogICAgICAgIGluaXRfZmlsdGVyKHRhYmxlKTsKICAgICAgICByZXR1cm4gdGFibGUKICAgIH07CgogICAgdmFyIGluaXRfZmlsdGVyID0gZnVuY3Rpb24gKGRhdGFfdGFibGUpIHsKCiAgICAgICAgdmFyIGZpbHRlck9wdGlvbnMgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbHVtbl9udW1iZXI6IDMsCiAgICAgICAgICAgICAgICBmaWx0ZXJfdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWxheTogNjAwLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlZmF1bHRfbGFiZWw6ICcnCiAgICAgICAgICAgIH0sICAvL25hbWUKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogNCwKICAgICAgICAgICAgICAgIGZpbHRlcl90eXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlbGF5OiA2MDAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVmYXVsdF9sYWJlbDogJycKICAgICAgICAgICAgfSwgIC8vcHJvZHVjdAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA1LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9ldmVudAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA2LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9pc3N1ZXMgdHJhY2tlZAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA3LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9udW0gaWNzcgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA4LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9pbml0IGRhdGFzb3VyY2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogOSwKICAgICAgICAgICAgICAgIGZpbHRlcl90eXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlbGF5OiA2MDAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVmYXVsdF9sYWJlbDogJycKICAgICAgICAgICAgfSwgLy9zaWduYWwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogMTAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWxheTogNjAwLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlZmF1bHRfbGFiZWw6ICcnCiAgICAgICAgICAgIH0sIC8vZGlzcG9zaXRpb24KICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogMTIsCiAgICAgICAgICAgICAgICBmaWx0ZXJfdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWxheTogNjAwLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlZmF1bHRfbGFiZWw6ICcnCiAgICAgICAgICAgIH0sIC8vZGV0ZWN0ZWQgZGF0ZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiAxMywKICAgICAgICAgICAgICAgIGZpbHRlcl90eXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlbGF5OiA2MDAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVmYXVsdF9sYWJlbDogJycKICAgICAgICAgICAgfSwgLy9kZXRlY3RlZCBkYXRlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbHVtbl9udW1iZXI6IDE0LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9ICAvL2R1ZSBpbgogICAgICAgIF07CiAgICAgICAgeWFkY2YuaW5pdChkYXRhX3RhYmxlLCBmaWx0ZXJPcHRpb25zKTsKICAgIH07CgoKICAgICQoJ2kjY29weVNlbGVjdGlvbicpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBzaG93QWxsU2VsZWN0ZWRDYXNlTnVtYmVycygpCiAgICB9KTsKCiAgICB2YXIgc2hvd0FsbFNlbGVjdGVkQ2FzZU51bWJlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnI2NvcHlDYXNlTnVtYmVyTW9kZWwnKS5tb2RhbCh7CiAgICAgICAgICAgIHNob3c6IHRydWUKICAgICAgICB9KTsKCiAgICAgICAgdmFyIG51bWJlcnMgPSBfLm1hcCgkKCdpbnB1dC5jb3B5LXNlbGVjdDpjaGVja2VkJykucGFyZW50KCkucGFyZW50KCkuZmluZCgndGQ6bnRoLWNoaWxkKDQpJyksIGZ1bmN0aW9uIChpdCkgewogICAgICAgICAgICByZXR1cm4gJChpdCkudGV4dCgpCiAgICAgICAgfSk7CiAgICAgICAgJCgiI2Nhc2VOdW1iZXJzIikudGV4dChudW1iZXJzKTsKICAgIH07CgogICAgdmFyIGluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgc2lnbmFsLmZpZWxkTWFuYWdlbWVudC5wb3B1bGF0ZUNvbHVtbkxpc3QoZ3JpZENvbHVtbnNWaWV3VXJsLCBncmlkQ29sdW1uc1ZpZXdVcGRhdGVVcmwpOwogICAgICAgIGFsZXJ0RGV0YWlsc1RhYmxlID0gaW5pdEFsZXJ0RGV0YWlsc1RhYmxlKCk7CiAgICAgICAgJCgnaSNjb3B5U2VsZWN0aW9uJykuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzaG93QWxsU2VsZWN0ZWRDYXNlTnVtYmVycygpCiAgICAgICAgfSk7CgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdpbnB1dCNzZWxlY3QtYWxsJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKCIuY29weS1zZWxlY3QiKS5wcm9wKCdjaGVja2VkJywgdGhpcy5jaGVja2VkKTsKICAgICAgICB9KTsKICAgICAgICBiaW5kQ29tbWVudE5vdGVzKCk7CiAgICB9OwoKICAgIGluaXQoKTsKCgogICAgJCgnI2V4cG9ydFR5cGVzIGFbaHJlZl0nKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBjbGlja2VkVVJMID0gZS5jdXJyZW50VGFyZ2V0LmhyZWY7CiAgICAgICAgdmFyIGlkcyA9IFtdOwogICAgICAgICQoJ2lucHV0LmNvcHktc2VsZWN0OmNoZWNrZWQnKS5tYXAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZHMucHVzaCgkKHRoaXMpLmF0dHIoJ2RhdGEtaWQnKSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGlzRmlsdGVyUmVxdWVzdCA9IHRydWU7CiAgICAgICAgdmFyIGZpbHRlclZhbHVlcyA9IFtdOwogICAgICAgIHZhciBwcmVmaXggPSAiYWRob2NfIjsKICAgICAgICBpZiAod2luZG93LnNlc3Npb25TdG9yYWdlKSB7CiAgICAgICAgICAgIGlmIChzaWduYWwuYWxlcnRSZXZpZXcuaXNBbGVydFBlcnNpc3RlZEluU2Vzc2lvblN0b3JhZ2UocHJlZml4KSkgewogICAgICAgICAgICAgICAgZmlsdGVyVmFsdWVzID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHByZWZpeCArICJmaWx0ZXJzX3ZhbHVlIikpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2lnbmFsLmFsZXJ0UmV2aWV3LnJlbW92ZUZpbHRlcnNGcm9tU2Vzc2lvblN0b3JhZ2UocHJlZml4KTsKICAgICAgICAgICAgICAgIGlzRmlsdGVyUmVxdWVzdCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciB1cGRhdGVkRXhwb3J0VXJsID0gY2xpY2tlZFVSTCArICcmaXNGaWx0ZXJSZXF1ZXN0PScgKyBpc0ZpbHRlclJlcXVlc3QgKyAnJmZpbHRlcnM9JyArIEpTT04uc3RyaW5naWZ5KGZpbHRlclZhbHVlcykgKyAiJmlkcz0iICsgaWRzICsgIiZjYWxsaW5nU2NyZWVuPSIgKyBjYWxsaW5nU2NyZWVuOwogICAgICAgIHZhciBmaWx0ZXJfcGFyYW1zID0gIiI7CiAgICAgICAgJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSgpLmNvbHVtbnMoKS5ldmVyeSggZnVuY3Rpb24gKCkKICAgICAgICB7CiAgICAgICAgICAgIGlmKHRoaXMuc2VhcmNoKCkgIT09ICIiKSB7CiAgICAgICAgICAgICAgICBmaWx0ZXJfcGFyYW1zID0gZmlsdGVyX3BhcmFtcyArICImIit0aGlzLmRhdGFTcmMoKSArICI9IiArIHRoaXMuc2VhcmNoKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVwZGF0ZWRFeHBvcnRVcmwgKyBmaWx0ZXJfcGFyYW1zOwogICAgICAgIHJldHVybiBmYWxzZQogICAgfSk7CgogICAgJCgiI2NvbW1lbnRzTW9kYWwiKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkgewogICAgICAgICQoJyNjb21tZW50Tm90ZXMnKS52YWwoIiIpOwogICAgICAgICQoJyNjb21tZW50Tm90ZXMnKS52YWwoIiIpOwogICAgICAgICQoIi5jcmVhdGVkQnkiKS50ZXh0KCIiKTsKICAgICAgICAkKCcuYWRkQWRob2NDb21tZW50JykuaHRtbCgiQWRkIik7CiAgICB9KQoKfSk7Cgp2YXIgYmluZENvbW1lbnROb3RlcyA9IGZ1bmN0aW9uICgpIHsKICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIuY29tbWVudC1pY29uIiwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciAkdGhpcyA9IHRoaXM7CiAgICAgICAgdmFyIHNlbGVjdGVkUm93SWRzID0gW107CiAgICAgICAgdmFyIHNlbGVjdGVkUm93Q291bnQgPSAkKCd0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICB2YXIgY29tbWVudE1vZGFsID0gJCgnI2NvbW1lbnRzTW9kYWwnKTsKICAgICAgICBpZiAoc2VsZWN0ZWRSb3dDb3VudCA+IDEgJiYgJCh0aGlzKS5jbG9zZXN0KCd0cicpLmZpbmQoIi5jb3B5LXNlbGVjdCIpLnByb3AoImNoZWNrZWQiKSkgewogICAgICAgICAgICAkKGNvbW1lbnRNb2RhbCkuZmluZCgnZGl2LmJ1bGtPcHRpb25zU2VjdGlvbicpLnNob3coKTsKICAgICAgICAgICAgJChjb21tZW50TW9kYWwpLmZpbmQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gc3Bhbi5jb3VudCcpLmh0bWwoc2VsZWN0ZWRSb3dDb3VudCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJChjb21tZW50TW9kYWwpLmZpbmQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24nKS5oaWRlKCk7CiAgICAgICAgfQoKICAgICAgICAkKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uIGlucHV0W25hbWU9YnVsa09wdGlvbnNdJykudW5iaW5kKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc3dpdGNoICgkKHRoaXMpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICBjYXNlICdhbGxTZWxlY3RlZCc6CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dJZHMgPSBpbml0aWF0ZUJ1bGtSb3dDb21tZW50UHJvY2VzcygpOwogICAgICAgICAgICAgICAgICAgIGJpbmRBZGRDb21tZW50Tm90ZXMoY29tbWVudE1vZGFsLCBzZWxlY3RlZFJvd0lkcywiYnVsayIpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnY3VycmVudCc6CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dJZHMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0lkcy5wdXNoKGluaXRpYXRlU2luZ2xlUm93Q29tbWVudFByb2Nlc3MoJHRoaXMpKTsKICAgICAgICAgICAgICAgICAgICBiaW5kQWRkQ29tbWVudE5vdGVzKGNvbW1lbnRNb2RhbCwgc2VsZWN0ZWRSb3dJZHMsInJvdyIpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgaWYgKCQodGhpcykuZGF0YSgnaW5mbycpID09PSAncm93JykgewogICAgICAgICAgICBzZWxlY3RlZFJvd0lkcy5wdXNoKGluaXRpYXRlU2luZ2xlUm93Q29tbWVudFByb2Nlc3MoJHRoaXMpKTsKICAgICAgICAgICAgYmluZEFkZENvbW1lbnROb3Rlcyhjb21tZW50TW9kYWwsIHNlbGVjdGVkUm93SWRzLCJyb3ciLCR0aGlzKTsKICAgICAgICB9CiAgICAgICAgY29tbWVudE1vZGFsLm1vZGFsKCdzaG93Jyk7CiAgICB9KTsKfTsKCnZhciBpbml0aWF0ZVNpbmdsZVJvd0NvbW1lbnRQcm9jZXNzID0gZnVuY3Rpb24gKCR0aGlzKSB7CiAgICB2YXIgc2VsZWN0ZWRSb3dJbmRleCA9ICQoJHRoaXMpLnBhcmVudHMoJ3RyJykuaW5kZXgoKTsKICAgIHZhciBhZGhvY0FsZXJ0SWQgPSB0YWJsZS5yb3coc2VsZWN0ZWRSb3dJbmRleCkuZGF0YSgpLmlkOwogICAgdmFyIHVwZGF0ZWRDb21tZW50cyA9ICQoJyNjb21tZW50Tm90ZXMnKS52YWwoKTsKICAgICQuYWpheCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6IHsnYWRob2NBbGVydC5pZCc6IGFkaG9jQWxlcnRJZH0sCiAgICAgICAgdXJsOiBmZXRjaENvbW1lbnRVcmwsCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICB2YXIgY29tbWVudE1vZGFsID0gJCgnI2NvbW1lbnRzTW9kYWwnKTsKICAgICAgICAgICAgaWYgKHJlc3VsdC5jb21tZW50KSB7CiAgICAgICAgICAgICAgICBpZih1cGRhdGVkQ29tbWVudHMubGVuZ3RoID49IHJlc3VsdC5jb21tZW50Lmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Tm90ZXMnKS52YWwodXBkYXRlZENvbW1lbnRzKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcjY29tbWVudE5vdGVzJykudmFsKHJlc3VsdC5jb21tZW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgiTGFzdCBNb2RpZmllZCBieSAiICsgcmVzdWx0LmNyZWF0ZWRCeSArICIgb24gIiArIHJlc3VsdC5kYXRlVXBkYXRlZCk7CiAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZEFkaG9jQ29tbWVudCcpLmh0bWwoIlVwZGF0ZSIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIHNlbGVjdGVkUm93SW5kZXgKfTsKCnZhciBpbml0aWF0ZUJ1bGtSb3dDb21tZW50UHJvY2VzcyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBpbmRleFNldCA9IG5ldyBTZXQoKTsKICAgIHZhciBzZWxlY3RlZFJvd0lkcyA9IFtdOwogICAgJC5lYWNoKCQoJ3RhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkJyksIGZ1bmN0aW9uICgpIHsKICAgICAgICBpbmRleFNldC5hZGQoKCQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpKSk7CiAgICB9KTsKCiAgICBpbmRleFNldC5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgIHNlbGVjdGVkUm93SWRzLnB1c2goaW5kZXgpOwogICAgfSk7CiAgICByZXR1cm4gc2VsZWN0ZWRSb3dJZHM7Cn07Cgp2YXIgYmluZEFkZENvbW1lbnROb3RlcyA9IGZ1bmN0aW9uIChjb21tZW50TW9kYWwsIHNlbGVjdGVkUm93SWRzLGRhdGFJbmZvLGN1cnJlbnRSb3cpIHsKICAgIHZhciBzZWxlY3RlZEFkaG9jQWxlcnRJZHMgPSBbXTsKICAgIHNlbGVjdGVkUm93SWRzLmZvckVhY2goZnVuY3Rpb24gKHJvd0lkKSB7CiAgICAgICAgc2VsZWN0ZWRBZGhvY0FsZXJ0SWRzLnB1c2godGFibGUucm93KHJvd0lkKS5kYXRhKCkuaWQpCiAgICB9KTsKICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkQWRob2NDb21tZW50JykudW5iaW5kKCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgJ3NlbGVjdGVkQWRob2NBbGVydElkcyc6IEpTT04uc3RyaW5naWZ5KHNlbGVjdGVkQWRob2NBbGVydElkcyksCiAgICAgICAgICAgICAgICAnY29tbWVudCc6ICQoIiNjb21tZW50Tm90ZXMiKS52YWwoKQogICAgICAgICAgICB9LAogICAgICAgICAgICB1cmw6IHNhdmVDb21tZW50VXJsLAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWVudE1vZGFsID0gJCgnI2NvbW1lbnRzTW9kYWwnKTsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmNvbW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Tm90ZXMnKS52YWwocmVzdWx0LmNvbW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiLmNyZWF0ZWRCeSIpLnRleHQoIkxhc3QgTW9kaWZpZWQgYnkgIiArIHJlc3VsdC5jcmVhdGVkQnkgKyAiIG9uICIgKyByZXN1bHQuZGF0ZVVwZGF0ZWQpOwogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZEFkaG9jQ29tbWVudCcpLmh0bWwoIlVwZGF0ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ3N1Y2Nlc3MnLCAndG9wIHJpZ2h0JywgIlN1Y2Nlc3MiLCAiQ29tbWVudHMgYWRkZWQgc3VjY2Vzc2Z1bGx5LiIsIHthdXRvSGlkZURlbGF5OiAxMDAwMH0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUluZm8gPT09ICJyb3ciKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tbWVudEljb24oY3VycmVudFJvdyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94U2VsZWN0b3IgPSAndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCQoY2hlY2tib3hTZWxlY3RvciksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tbWVudEljb24odGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSkKfTsKCmZ1bmN0aW9uIGJpbmRBc3NpZ25Ub1NlbGVjdGlvbihzZWFyY2hVc2VyR3JvdXBMaXN0VXJsLCBhc3NpZ25Ub0dyb3VwVXJsLCB0YWJsZSkgewogICAgJCgiLmFzc2lnbmVkVG9TZWxlY3QiKS5lYWNoKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgc2lnbmFsLnVzZXJfZ3JvdXBfdXRpbHMuYmluZF9hc3NpZ25fdG8oJCh0aGlzKSwgc2VhcmNoVXNlckdyb3VwTGlzdFVybCwgYXNzaWduZWRUb0RhdGFbaV0pOwogICAgfSk7CiAgICBzaWduYWwudXNlcl9ncm91cF91dGlscy5iaW5kX2Fzc2lnblRvX3NlbGVjdGlvbihhc3NpZ25Ub0dyb3VwVXJsLCB0YWJsZSk7Cn0KCgo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024656" offset="0" length="8192" />
          <PacketInfo time="334024671" offset="8192" length="16384" />
          <PacketInfo time="334024671" offset="24576" length="753" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1014" hostname="10.100.22.24:8181" path="/signal/assets/app/bootstrap-modal-popover/bootstrap-modal-popover-13efefa1c00b94cc73690eb7d64a74c4.js" url="http://10.100.22.24:8181/signal/assets/app/bootstrap-modal-popover/bootstrap-modal-popover-13efefa1c00b94cc73690eb7d64a74c4.js" ip="10.100.22.24" port="8181" connectionId="35" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.629+05:30" startTime="334024421" endTime="334024718">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9ib290c3RyYXAtbW9kYWwtcG9wb3Zlci9ib290c3RyYXAtbW9kYWwtcG9wb3Zlci0xM2VmZWZhMWMwMGI5NGNjNzM2OTBlYjdkNjRhNzRjNC5qcyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1120</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjo1NiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9ib290c3RyYXAtbW9kYWwtcG9wb3Zlci9ib290c3RyYXAtbW9kYWwtcG9wb3Zlci0xM2VmZWZhMWMwMGI5NGNjNzM2OTBlYjdkNjRhNzRjNC5qcyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTEyMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjo1NiBHTVQNCkVUYWc6ICJhcHAvYm9vdHN0cmFwLW1vZGFsLXBvcG92ZXIvYm9vdHN0cmFwLW1vZGFsLXBvcG92ZXItMTNlZmVmYTFjMDBiOTRjYzczNjkwZWI3ZDY0YTc0YzQuanMiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAxMTIwDQpEYXRlOiBNb24sIDE4IE5vdiAyMDE5IDA0OjA4OjM3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>IWZ1bmN0aW9uKGIpe3ZhciBlPWZ1bmN0aW9uKGEsZCl7dGhpcy5vcHRpb25zPWQ7dGhpcy4kYm9keT1iKGRvY3VtZW50LmJvZHkpO3RoaXMuJGVsZW1lbnQ9YihhKS5kZWxlZ2F0ZSgnW2RhdGEtZGlzbWlzcz0ibW9kYWwtcG9wdXAiXScsImNsaWNrLmRpc21pc3MubW9kYWwtcG9wdXAiLGIucHJveHkodGhpcy5oaWRlLHRoaXMpKTt0aGlzLiRkaWFsb2c9dGhpcy4kZWxlbWVudC5maW5kKCIubW9kYWwtZGlhbG9nIik7dGhpcy5vcHRpb25zLnJlbW90ZSYmdGhpcy4kZWxlbWVudC5maW5kKCIucG9wb3Zlci1jb250ZW50IikubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlKTt0aGlzLiRwYXJlbnQ9ZC4kcGFyZW50fTtlLnByb3RvdHlwZT1iLmV4dGVuZCh7fSxiLmZuLm1vZGFsLkNvbnN0cnVjdG9yLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6ZSxnZXRQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuJHBhcmVudCxkPSJib2R5Ij09PXRoaXMub3B0aW9ucy5tb2RhbFBvc2l0aW9uP2Eub2Zmc2V0KCk6CmEucG9zaXRpb24oKTtyZXR1cm4gYi5leHRlbmQoe30sZCx7d2lkdGg6YVswXS5vZmZzZXRXaWR0aCxoZWlnaHQ6YVswXS5vZmZzZXRIZWlnaHR9KX0sc2hvdzpmdW5jdGlvbigpe3ZhciBhPXRoaXMuJGVsZW1lbnQ7YS5jc3Moe3RvcDowLGxlZnQ6MCxkaXNwbGF5OiJibG9jayIsInotaW5kZXgiOjEwNTB9KTt2YXIgZD0iZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudD90aGlzLm9wdGlvbnMucGxhY2VtZW50LmNhbGwodGhpcywkdGlwWzBdLHRoaXMuJGVsZW1lbnRbMF0pOnRoaXMub3B0aW9ucy5wbGFjZW1lbnQsYz10aGlzLmdldFBvc2l0aW9uKCksZj1hWzBdLm9mZnNldFdpZHRoLGU9YVswXS5vZmZzZXRIZWlnaHQsZztzd2l0Y2goZCl7Y2FzZSAiYm90dG9tIjpnPXt0b3A6Yy50b3ArYy5oZWlnaHQsbGVmdDpjLmxlZnQrYy53aWR0aC8yLWYvMn07YnJlYWs7Y2FzZSAidG9wIjpnPXt0b3A6Yy50b3AtZSxsZWZ0OmMubGVmdCtjLndpZHRoLzItZi8yfTticmVhazsKY2FzZSAibGVmdCI6Zz17dG9wOmMudG9wK2MuaGVpZ2h0LzItZS8yLGxlZnQ6Yy5sZWZ0LWZ9O2JyZWFrO2Nhc2UgInJpZ2h0IjpnPXt0b3A6Yy50b3ArYy5oZWlnaHQvMi1lLzIsbGVmdDpjLmxlZnQrYy53aWR0aH19YS5jc3MoZykuYWRkQ2xhc3MoZCkuYWRkQ2xhc3MoImluIik7Yi5mbi5tb2RhbC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUuc2hvdy5jYWxsKHRoaXMsYXJndW1lbnRzKX0sYmFja2Ryb3A6ZnVuY3Rpb24oYSl7dmFyIGQ9dGhpcy4kZWxlbWVudC5oYXNDbGFzcygiZmFkZSIpPyJmYWRlIjoiIjtpZih0aGlzLmlzU2hvd24mJnRoaXMub3B0aW9ucy5iYWNrZHJvcCl7dmFyIGM9Yi5zdXBwb3J0LnRyYW5zaXRpb24mJmQ7dGhpcy4kYmFja2Ryb3A9YignPGRpdiBjbGFzcz0ibW9kYWwtYmFja2Ryb3AgJytkKyciIHN0eWxlPSJiYWNrZ3JvdW5kOm5vbmUiIC8+JykuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7InN0YXRpYyIhPXRoaXMub3B0aW9ucy5iYWNrZHJvcCYmdGhpcy4kYmFja2Ryb3AuY2xpY2soYi5wcm94eSh0aGlzLmhpZGUsCnRoaXMpKTtjJiZ0aGlzLiRiYWNrZHJvcFswXS5vZmZzZXRXaWR0aDt0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygiaW4iKTtjP3RoaXMuJGJhY2tkcm9wLm9uZShiLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsYSk6YSgpfWVsc2UhdGhpcy5pc1Nob3duJiZ0aGlzLiRiYWNrZHJvcD8odGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoImluIiksYi5zdXBwb3J0LnRyYW5zaXRpb24mJnRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoImZhZGUiKT90aGlzLiRiYWNrZHJvcC5vbmUoYi5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLGIucHJveHkodGhpcy5yZW1vdmVCYWNrZHJvcCx0aGlzKSk6dGhpcy5yZW1vdmVCYWNrZHJvcCgpLHRoaXMuJGJvZHkucmVtb3ZlQ2xhc3MoIm1vZGFsLW9wZW4iKSx0aGlzLiRib2R5LnJlbW92ZUF0dHIoInN0eWxlIikpOmEmJmEoKX19KTtiLmZuLm1vZGFsUG9wb3Zlcj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9Yih0aGlzKSxjPSJzdHJpbmciPT0KdHlwZW9mIGE/ZC5kYXRhKCJtb2RhbC1wb3BvdmVyIik6dm9pZCAwLGY9Yi5leHRlbmQoe30sYi5mbi5tb2RhbFBvcG92ZXIuZGVmYXVsdHMsZC5kYXRhKCksIm9iamVjdCI9PXR5cGVvZiBhJiZhKTtmLiRwYXJlbnQ9YyYmYy4kcGFyZW50fHxhLiRwYXJlbnR8fGIoZi50YXJnZXQpO2N8fGQuZGF0YSgibW9kYWwtcG9wb3ZlciIsYz1uZXcgZSh0aGlzLGYpKTtpZigic3RyaW5nIj09dHlwZW9mIGEpY1thXSgpfSl9O2IuZm4ubW9kYWxQb3BvdmVyLkNvbnN0cnVjdG9yPWU7Yi5mbi5tb2RhbFBvcG92ZXIuZGVmYXVsdHM9Yi5leHRlbmQoe30sYi5mbi5tb2RhbC5kZWZhdWx0cyx7cGxhY2VtZW50OiJyaWdodCIsbW9kYWxQb3NpdGlvbjoiYm9keSIsa2V5Ym9hcmQ6ITAsYmFja2Ryb3A6ITB9KTtiKGZ1bmN0aW9uKCl7YigiYm9keSIpLm9uKCJjbGljay5tb2RhbC1wb3BvdmVyLmRhdGEtYXBpIiwnW2RhdGEtdG9nZ2xlPSJtb2RhbC1wb3BvdmVyIl0nLGZ1bmN0aW9uKCl7dmFyIGE9Yih0aGlzKSwKZD1hLmF0dHIoImhyZWYiKSxjPWIoYS5hdHRyKCJkYXRhLXRhcmdldCIpfHxkJiZkLnJlcGxhY2UoLy4qKD89I1teXHNdKyQpLywiIikpLGQ9Yi5leHRlbmQoe3JlbW90ZTohLyMvLnRlc3QoZCkmJmR9LGMuZGF0YSgpLGEuZGF0YSgpKTtkLiRwYXJlbnQ9YTtjLm1vZGFsUG9wb3ZlcihkKS5tb2RhbFBvcG92ZXIoInNob3ciKS5vbmUoImhpZGUiLGZ1bmN0aW9uKCl7YS5mb2N1cygpfSl9KX0pfSh3aW5kb3cualF1ZXJ5KTs=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024718" offset="0" length="1479" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1016" hostname="10.100.22.24:8181" path="/signal/assets/yadcf/jquery.dataTables.yadcf-a13c93c305588bd0340c6a9901cd3492.js" url="http://10.100.22.24:8181/signal/assets/yadcf/jquery.dataTables.yadcf-a13c93c305588bd0340c6a9901cd3492.js" ip="10.100.22.24" port="8181" connectionId="34" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.654+05:30" startTime="334023750" endTime="334024718">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL3lhZGNmL2pxdWVyeS5kYXRhVGFibGVzLnlhZGNmLWExM2M5M2MzMDU1ODhiZDAzNDBjNmE5OTAxY2QzNDkyLmpzIEhUVFAvMS4xDQpIb3N0OiAxMC4xMDAuMjIuMjQ6ODE4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2QNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>32483</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjo1MiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>InlhZGNmL2pxdWVyeS5kYXRhVGFibGVzLnlhZGNmLWExM2M5M2MzMDU1ODhiZDAzNDBjNmE5OTAxY2QzNDkyLmpzIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MzI0ODM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjo1MiBHTVQNCkVUYWc6ICJ5YWRjZi9qcXVlcnkuZGF0YVRhYmxlcy55YWRjZi1hMTNjOTNjMzA1NTg4YmQwMzQwYzZhOTkwMWNkMzQ5Mi5qcyINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ2FjaGUtQ29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDMyNDgzDQpEYXRlOiBNb24sIDE4IE5vdiAyMDE5IDA0OjA4OjM3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024718" offset="0" length="16384" />
          <PacketInfo time="334024812" offset="16384" length="16384" />
          <PacketInfo time="334024828" offset="32768" length="53" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1018" hostname="10.100.22.24:8181" path="/signal/assets/word-icon.png" url="http://10.100.22.24:8181/signal/assets/word-icon.png" ip="10.100.22.24" port="8181" connectionId="29" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.684+05:30" startTime="334024468" endTime="334024812">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvd2VicCxpbWFnZS9hcG5nLGltYWdlLyosKi8qO3E9MC44</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL3dvcmQtaWNvbi5wbmcgSFRUUC8xLjENCkhvc3Q6IDEwLjEwMC4yMi4yNDo4MTgxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzguMC4zOTA0Ljk3IFNhZmFyaS81MzcuMzYNCkFjY2VwdDogaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLGltYWdlLyosKi8qO3E9MC44DQpSZWZlcmVyOiBodHRwOi8vMTAuMTAwLjIyLjI0OjgxODEvc2lnbmFsL2FkSG9jQWxlcnQvaW5kZXgNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQ29va2llOiBTRVNTSU9OPTY4ZmU4YTA2LTI3YmYtNDhiNi1hYmRkLWI0ODVlZTMzYzAzZA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1416</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjowOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IndvcmQtaWNvbi1kNWRhZDMxMTFkYWYwMTUyMGYwM2Q5NzA3MmZhMDI0Ny5wbmci</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2UvcG5nO2NoYXJzZXQ9VVRGLTg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTQxNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjowOCBHTVQNCkVUYWc6ICJ3b3JkLWljb24tZDVkYWQzMTExZGFmMDE1MjBmMDNkOTcwNzJmYTAyNDcucG5nIg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDYWNoZS1Db250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtVHlwZTogaW1hZ2UvcG5nO2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAxNDE2DQpEYXRlOiBNb24sIDE4IE5vdiAyMDE5IDA0OjA4OjM3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAFT0lEQVR4XrVXa2wUVRg9Mzv7brftVra1UEBAoIAWKsaCyMOiEqKoCVrDHxORhKg/sFGh/kETLSn+ITbRX0pEiaGQ+CAxCKlWJaiFEjEGFSoYhT720W132+7O497rN7PLpkuGsBvLSU7ud2d2cs539rv7kIQQMCFJEq5hx44d79fW1m5HgRBEiLwr1nY4lsCmTRufW7Gi8QDpMFyHlpYWKLABmdlON/NFhMgJUUX7vDp3n9bcvu2tNvT0nO3Yt+/dCQCHYAMZ9vi/4hZNLFh4p39iIv1xW9uep2EDZff+wXcMnbGWjr9hGAy6YUAd7UVn1xAYZ+CcgzFBNc9RCAc8jnHMq5Zw79L5tuJZfUyfUYNgsMJ54vg3n+zZ0y5aW3cezjPQWFfyynA8Dk0XUE1qgBqqx4XLYdpz2jOigTStup4xKBw+TIzHUVfZj+VkwEY8l4Db6UZwegWaHlrr7DrRfZBMYLIJxRSfFdIwpzZoCUiSoCS41bksA+DCMudwCEgAkeP0+Qg+/DIKNWDcUFzkxlOiZxVUV1VhzYOrnd1d3Qfb2/eKnTtfO2IZMEWrKsvg9QSIZgIclUEFfo+MeMIA5wJer4KJFKOakQCHz6eCGxqAG4vTaj27f/9H5lBb+yycVH/a3Nz8a2dnZ5+ikoFTv0SRMlLQDIbByDjWNgRQXurD1z9HMZJIY/P6Gpz4MYL4mIqhcBRQY/C6ZeDG4hZf3bUrYyQvJWBv226FxOOmGVkn0TtqvPB5JJzrS6K8BCjxyCQeQe/FEbo2CocEDMWSOH1hFLHYCJbWBaHqBrjg9uIWYSc+OYkQ0a2YwzV/dgn8ASeO/tCPitIy/BthOHcpQbHrcDmB3/6M4EosjfDgAF7fMhOLFs3E599dBOcoVnyygQDRab0FGlGCC5IE9P6ehMoTiCdVy3E6NY7DXQkMJAUWVKWxYe0i9P4RIXEDgjuKFhfIwU2UFU3LDJrBMkb+iWpIqQzgAJc40rpG5EhGB9G8rR6Vt1UgrV6xTgkJFCturZOhqJqA4AKcSTDTiCV1VHg5KgPA1ViKhHQ6ASksni6wbtUSJMd06/UpXcelfgOfdfejGDQtD+Yb0HQj5zpN9WhiDA/XV8KlMPRdjUCnaxPxq3h2axP8Pj+sxASHInHMrvbi8dXVhXZOtEnAHEIBAZ1xDITjqC4T2Nw0E8dO9iE2PIxEcgzrlpTivnsWUvQMEjKJpbVMAl98P4hisK6hPG9vDSHjAtVBF55aE8Jdc8sxb87tmH05jA0NQeiaB888sQIet8eaEYcsgfQhSwKzqrx4bFVVoZ1niTwoOnXCdB11C/x486WV0A2OVJrj0fVL8eQjy6wHUhqDqhqWuCLLkMEpDQ2XB4CjJ4dQDNYsK8s3wB1enDkfxmAcNGwqTN9McAgmwDknZlfzGjc75zh3YQhObylmTBPYuDJUcOcCNglEY9Hh946EZV07Y0XJmQFJaOUutyvzdcwYmElugHNaDQNw+uFycFwZGsdXp8IoBg/UB/INXOw5dMhg3MU4AZwEOebV+LY1LF4OLiQIIRMVEndmO+Gg18MlCyycOxcbGqcV2rn9DPzVc+CF638Tbln/8rY3Wp+HAG56zo/9FEExuP/u0nwDsEeumyLPuX3n+ftCDOQitM75VGLlktJiDMA851PXeaYu1EDxsX97dgQ3Q+PikoITKLpz+pCx7zxXF/6/YMpjFyLXWEEGbqV4gQZuvbhK5LYzYBjGB+1v796KW4RIJHIcQIKo2xro6Oh4EUArMUQMEN2YOqhZ8bBZK7CHnnWoEp1EGVMHTtSzRvT/AHfRlTXQaR7HAAAAAElFTkSuQmCC</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024812" offset="0" length="1697" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1021" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/disposition/disposition-change-ce1c3cf56e69596b0fa3a30cf7fa19fb.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/disposition/disposition-change-ce1c3cf56e69596b0fa3a30cf7fa19fb.js" ip="10.100.22.24" port="8181" connectionId="36" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.708+05:30" startTime="334024468" endTime="334024828">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvZGlzcG9zaXRpb24vZGlzcG9zaXRpb24tY2hhbmdlLWNlMWMzY2Y1NmU2OTU5NmIwZmEzYTMwY2Y3ZmExOWZiLmpzIEhUVFAvMS4xDQpIb3N0OiAxMC4xMDAuMjIuMjQ6ODE4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2QNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>4557</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNzo0NCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9wdnMvZGlzcG9zaXRpb24vZGlzcG9zaXRpb24tY2hhbmdlLWNlMWMzY2Y1NmU2OTU5NmIwZmEzYTMwY2Y3ZmExOWZiLmpzIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NDU1Nw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNzo0NCBHTVQNCkVUYWc6ICJhcHAvcHZzL2Rpc3Bvc2l0aW9uL2Rpc3Bvc2l0aW9uLWNoYW5nZS1jZTFjM2NmNTZlNjk1OTZiMGZhM2EzMGNmN2ZhMTlmYi5qcyINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ2FjaGUtQ29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDQ1NTcNCkRhdGU6IE1vbiwgMTggTm92IDIwMTkgMDQ6MDg6MzcgR01UDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dmFyIHNlbGVjdGVkRGlzcG9zaXRpb24sc2VsZWN0ZWRTaWduYWw7CiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7JCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIgI2VkaXQtYm94IikuaGlkZSgpOyQoIiNkaXNwb3NpdGlvblNpZ25hbFBvcG92ZXIgI25ldy1zaWduYWwtYm94IikuaGlkZSgpOyQoZG9jdW1lbnQpLm9uKCJjbGljayIsIi5jaGFuZ2VEaXNwb3NpdGlvbiIsc2V0RGlzcG9zaXRpb25UcmlnZ2VyQnV0dG9uKTskKGRvY3VtZW50KS5vbigiY2xpY2siLCIuc2VsZWN0U2lnbmFsIixzZXRTaWduYWxTZWxlY3RUcmlnZ2VyQnV0dG9uKTskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIpLm9uKCJoaWRlLmJzLm1vZGFsIixmdW5jdGlvbigpe3NlbGVjdGVkU2lnbmFsPXZvaWQgMDskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIpLnJlbW92ZUNsYXNzKCJsZXZlbDIiKTtjbGVhckFuZEhpZGVOZXdTaWduYWxCb3goKTtjbGVhckFuZEhpZGVEaXNwb3NpdGlvbkp1c3RpZmljYXRpb25FZGl0Qm94KCl9KTskKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyIikub24oImhpZGUuYnMubW9kYWwiLApmdW5jdGlvbigpe3NlbGVjdGVkU2lnbmFsPXNlbGVjdGVkRGlzcG9zaXRpb249dm9pZCAwO2NsZWFyQW5kSGlkZU5ld1NpZ25hbEJveCgpO2NsZWFyQW5kSGlkZURpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvbkVkaXRCb3goKX0pOyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIikub24oInNob3duLmJzLm1vZGFsIixmdW5jdGlvbigpeyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIC5wb3BvdmVyLWNvbnRlbnQiKS5zY3JvbGxUb3AoMCk7JCgiYTp2aXNpYmxlOmZpcnN0Iix0aGlzKS5mb2N1cygpfSk7JCgiI2Rpc3Bvc2l0aW9uU2lnbmFsUG9wb3ZlciIpLm9uKCJzaG93bi5icy5tb2RhbCIsZnVuY3Rpb24oKXskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIpLmhpZGUoKTskKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyIC5wb3BvdmVyLWNvbnRlbnQiKS5zY3JvbGxUb3AoMCk7JCgiYTp2aXNpYmxlOmZpcnN0Iix0aGlzKS5mb2N1cygpfSk7CiQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIC5zZWxlY3RKdXN0aWZpY2F0aW9uIikudW5iaW5kKCJjbGljayIpLmNsaWNrKGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTtpbml0Q2hhbmdlRGlzcG9zaXRpb24oJCh0aGlzKS5odG1sKCkpO2Rpc3Bvc2l0aW9uRWRpdFBhZGRpbmcoKX0pOyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyICNhZGROZXdKdXN0aWZpY2F0aW9uLCAjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciAuZWRpdEljb24iKS5vbigiY2xpY2siLGZ1bmN0aW9uKGEpeyQoYS50YXJnZXQpLmhhc0NsYXNzKCJlZGl0SWNvbiIpJiYoJCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIgLmVkaXRlZEp1c3RpZmljYXRpb24iKS52YWwoJCh0aGlzKS5wYXJlbnQoKS5zaWJsaW5ncygiLnNlbGVjdEp1c3RpZmljYXRpb24iKS5odG1sKCkpLGRpc3Bvc2l0aW9uRWRpdFBhZGRpbmcoKSk7JCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIgI2FkZE5ld0p1c3RpZmljYXRpb24iKS5oaWRlKCk7CiQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyICNlZGl0LWJveCIpLnNob3coKTtkaXNwb3NpdGlvbkVkaXRQYWRkaW5nKCl9KTskKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyICNhZGROZXdTaWduYWwiKS5vbigiY2xpY2siLGZ1bmN0aW9uKCl7JCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIiKS5tb2RhbFBvcG92ZXIoImhpZGUiKTskKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyICNuZXctc2lnbmFsLWJveCIpLnNob3coKTskKCIjbmV3U2lnbmFsTmFtZSIpLmZvY3VzKCk7JCgiI2Rpc3Bvc2l0aW9uU2lnbmFsUG9wb3ZlciAjYWRkTmV3U2lnbmFsIikuaGlkZSgpfSk7JCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIgI2NhbmNlbEp1c3RpZmljYXRpb24iKS5vbigiY2xpY2siLGZ1bmN0aW9uKCl7Y2xlYXJBbmRIaWRlRGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uRWRpdEJveCgpfSk7JCgiI2Rpc3Bvc2l0aW9uU2lnbmFsUG9wb3ZlciAjY2FuY2VsU2lnbmFsIikub24oImNsaWNrIiwKZnVuY3Rpb24oKXskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIpLm1vZGFsUG9wb3ZlcigiaGlkZSIpO2NsZWFyQW5kSGlkZU5ld1NpZ25hbEJveCgpfSk7JCgiI2Rpc3Bvc2l0aW9uU2lnbmFsUG9wb3ZlciAjY3JlYXRlU2lnbmFsIikub24oImNsaWNrIixmdW5jdGlvbigpe3ZhciBhPSQoIiNkaXNwb3NpdGlvblNpZ25hbFBvcG92ZXIgI25ld1NpZ25hbE5hbWUiKS52YWwoKTthJiYoInVuZGVmaW5lZCIhPT10eXBlb2YgYXZhaWxhYmxlU2lnbmFsTmFtZUxpc3QmJi0xIT09JC5pbkFycmF5KGEsYXZhaWxhYmxlU2lnbmFsTmFtZUxpc3QpPyQuTm90aWZpY2F0aW9uLm5vdGlmeSgiZXJyb3IiLCJ0b3AgcmlnaHQiLCJGYWlsZWQiLCQuaTE4bi5fKCJzaWduYWxFeGlzdHNFcnJvciIpLHthdXRvSGlkZURlbGF5OjFFNH0pOjI1NTw9YS5sZW5ndGg/JC5Ob3RpZmljYXRpb24ubm90aWZ5KCJlcnJvciIsInRvcCByaWdodCIsIkZhaWxlZCIsJC5pMThuLl8oInNpZ25hbE1heFNpemVFeGNlZWRFcnJvciIpLAp7YXV0b0hpZGVEZWxheToxRTR9KTokKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyICNuZXdTaWduYWxKdXN0aWZpY2F0aW9uIikuY2xpY2soKSl9KTskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciAjY29uZmlybUp1c3RpZmljYXRpb24iKS5vbigiY2xpY2siLGZ1bmN0aW9uKCl7aW5pdENoYW5nZURpc3Bvc2l0aW9uKCQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIC5lZGl0ZWRKdXN0aWZpY2F0aW9uIikudmFsKCkpfSl9KTsKdmFyIGNsZWFyQW5kSGlkZURpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvbkVkaXRCb3g9ZnVuY3Rpb24oKXskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciAjZWRpdC1ib3giKS5oaWRlKCk7JCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIgLmVkaXRlZEp1c3RpZmljYXRpb24iKS52YWwoIiIpOyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyICNhZGROZXdKdXN0aWZpY2F0aW9uIikuc2hvdygpO2Rpc3Bvc2l0aW9uRWRpdFBhZGRpbmcoKX0sY2xlYXJBbmRIaWRlTmV3U2lnbmFsQm94PWZ1bmN0aW9uKCl7JCgiI2Rpc3Bvc2l0aW9uU2lnbmFsUG9wb3ZlciAjbmV3LXNpZ25hbC1ib3giKS5oaWRlKCk7JCgiI2Rpc3Bvc2l0aW9uU2lnbmFsUG9wb3ZlciAjbmV3U2lnbmFsTmFtZSIpLnZhbCgiIik7c2hvd0hpZGVBZGROZXdTaWduYWwoKX0sc2V0RGlzcG9zaXRpb25UcmlnZ2VyQnV0dG9uPWZ1bmN0aW9uKGEpe3NlbGVjdGVkRGlzcG9zaXRpb249CiQoYS50YXJnZXQpO2E9JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5kYXRhKCJ2YWxpZGF0ZWQtY29uZmlybWVkIik7Zm9yY2VKdXN0aWZpY2F0aW9ufHxhP3NldERpc3Bvc2l0aW9uUG9wT3ZlclRpdGxlKCk6aW5pdENoYW5nZURpc3Bvc2l0aW9uKCl9LHNldERpc3Bvc2l0aW9uUG9wT3ZlclRpdGxlPWZ1bmN0aW9uKCl7c2hvd0hpZGVBZGROZXdTaWduYWwoKTt2YXIgYT0kKHNlbGVjdGVkRGlzcG9zaXRpb24pLmNsb3Nlc3QoInVsIikuZGF0YSgiY3VycmVudC1kaXNwb3NpdGlvbiIpLGI9JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5hdHRyKCJ0aXRsZSIpLGE9InVuZGVmaW5lZCI9PT10eXBlb2YgYT8iQWxlcnQgRGlzcG9zaXRpb24gQ2hhbmdlIHRvICIrYjoiQ2hhbmdlICIrYSsiIHRvICIrYjskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciAucG9wb3Zlci10aXRsZSIpLmh0bWwoYSk7JCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIiKS5yZW1vdmVDbGFzcygibGVmdCIpfSwKc2V0U2lnbmFsU2VsZWN0VHJpZ2dlckJ1dHRvbj1mdW5jdGlvbihhKXtzZWxlY3RlZFNpZ25hbD0kKGEudGFyZ2V0KTskKCIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIpLmFkZENsYXNzKCJsZXZlbDIiKS5yZW1vdmVDbGFzcygiYm90dG9tIik7Zm9yY2VKdXN0aWZpY2F0aW9uPyJuZXdTaWduYWxKdXN0aWZpY2F0aW9uIiE9PSQoc2VsZWN0ZWRTaWduYWwpLmF0dHIoImlkIikmJmNsZWFyQW5kSGlkZU5ld1NpZ25hbEJveCgpOmluaXRDaGFuZ2VEaXNwb3NpdGlvbigpfSxpbml0Q2hhbmdlRGlzcG9zaXRpb249ZnVuY3Rpb24oYSl7aWYoJChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5kYXRhKCJidWxrLWRpc3AtdXBkYXRlIikpYmluZEFsZXJ0TGV2ZWxEaXNwb3NpdGlvbihhKTtlbHNlIGlmKCQoc2VsZWN0ZWREaXNwb3NpdGlvbikucGFyZW50KCkuZGF0YSgiYXV0aC1yZXF1aXJlZCIpKWluaXRpYXRlQXV0aEZsb3coYSk7ZWxzZXt2YXIgYixkOyQoIiNkZXRhaWxlZC12aWV3LWNoZWNrYm94IikuaXMoIjpjaGVja2VkIik/CihkPSQoInRhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSAuY29weS1zZWxlY3Q6Y2hlY2tlZCIpLmxlbmd0aCxiPSJ0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgdGJvZHkuZGV0YWlsc1RhYmxlQm9keSIpOihkPSQoInRhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkIikubGVuZ3RoLGI9InRhYmxlLkRURkNfQ2xvbmVkIHRib2R5Iik7dmFyIGM9JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCk7aXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KGMpJiYoYy89Mik7MTxkJiYkKGIrIiA+IHRyOm50aCgiK2MrIikgLmNvcHktc2VsZWN0IikucHJvcCgiY2hlY2tlZCIpP2Rpc3Bvc2l0aW9uQnVsa1VwZGF0ZShkLGEpOihiPXBvcHVsYXRlRGlzcG9zaXRpb25DaGFuZ2VEYXRhKGMsITEpLGNoYW5nZURpc3Bvc2l0aW9uKGEsYiwhMSkpfX0sYmluZEFsZXJ0TGV2ZWxEaXNwb3NpdGlvbj1mdW5jdGlvbihhKXthPXtqdXN0aWZpY2F0aW9uVGV4dDphLCJ0YXJnZXREaXNwb3NpdGlvbi5pZCI6JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5kYXRhKCJkaXNwb3NpdGlvbi1pZCIpfTsKYXBwbGljYXRpb25MYWJlbD09PUFMRVJUX0NPTkZJR19UWVBFLkVWREFTX0FMRVJUJiYoYVsiY29uZmlnLmlkIl09Y29uZmlnSWQpO2FwcGxpY2F0aW9uTGFiZWwhPT1BTEVSVF9DT05GSUdfVFlQRS5MSVRFUkFUVVJFX1NFQVJDSF9BTEVSVCYmKGFbImV4ZWNDb25maWcuaWQiXT1leGVjdXRlZENvbmZpZ0lkKTt2YXIgYj1bXTskLmFqYXgoe3R5cGU6IlBPU1QiLHVybDpjaGFuZ2VBbGVydExldmVsRGlzcG9zaXRpb25VcmwsZGF0YTphLGJlZm9yZVNlbmQ6ZnVuY3Rpb24oKXskKCIjYnVsa0Rpc3Bvc2l0aW9uUG9wb3ZlciIpLm1vZGFsUG9wb3ZlcigiaGlkZSIpOyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIikubW9kYWxQb3BvdmVyKCJoaWRlIik7JCgidGFibGUjYWxlcnRzRGV0YWlsc1RhYmxlIHRkLmRpc3Bvc2l0aW9uQWN0aW9uIikuZWFjaChmdW5jdGlvbigpeyQodGhpcykuZmluZCgidWwiKS5kYXRhKCJpcy1yZXZpZXdlZCIpfHwoYi5wdXNoKCQodGhpcykpLAokKHRoaXMpLmh0bWwoIjxpIGlkPSdwcmlvcml0eUNoYW5nZVByb2Nlc3NpbmcnIGNsYXNzPSdtZGkgbWRpLXNwaW4gbWRpLWxvYWRpbmcnPjwvaT4iKSl9KX0sc3VjY2VzczpmdW5jdGlvbihhKXtpZihhLnN0YXR1cyl7dmFyIGM9JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKSxlPXNpZ25hbC51dGlscy5yZW5kZXIoImRpc3Bvc2l0aW9uIix7YWxsb3dlZERpc3Bvc2l0aW9uOmRpc3Bvc2l0aW9uSW5jb21pbmdPdXRnb2luZ01hcFskKGMpLmF0dHIoInRpdGxlIildLGN1cnJlbnREaXNwb3NpdGlvbjokKGMpLmF0dHIoInRpdGxlIiksZm9yY2VKdXN0aWZpY2F0aW9uOmZvcmNlSnVzdGlmaWNhdGlvbixpc1Jldmlld2VkOiExLGlzVmFsaWRhdGlvblN0YXRlQWNoaWV2ZWQ6JChjKS5kYXRhKCJ2YWxpZGF0ZWQtY29uZmlybWVkIil9KTtiLmZvckVhY2goZnVuY3Rpb24oYSl7JChhKS5odG1sKGUpOyQoYSkucGFyZW50KCkuZmluZCgidGQuY3VycmVudERpc3Bvc2l0aW9uIikuaHRtbCgkKGMpLmF0dHIoInRpdGxlIikpfSk7CiQoIi5kYXRhVGFibGUtdG9wLWRpc3Bvc2l0aW9uIDppbnB1dCIpLmVhY2goZnVuY3Rpb24oKXskKHRoaXMpLmRhdGEoImNsb3NlZCIpfHwoJCh0aGlzKS5uZXh0KCkucmVtb3ZlKCksJCh0aGlzKS5yZW1vdmUoKSl9KTtjaGFuZ2VEaXNwb3NpdGlvbkZpbHRlcnMoYyk7dGFibGUuY29sdW1ucy5hZGp1c3QoKS5maXhlZENvbHVtbnMoKS5yZWxheW91dCgpOyQuTm90aWZpY2F0aW9uLm5vdGlmeSgic3VjY2VzcyIsInRvcCByaWdodCIsIlN1Y2Nlc3MiLGEubWVzc2FnZSx7YXV0b0hpZGVEZWxheToyRTR9KX1lbHNlICQuTm90aWZpY2F0aW9uLm5vdGlmeSgiZXJyb3IiLCJ0b3AgcmlnaHQiLCJFcnJvciIsYS5tZXNzYWdlLHthdXRvSGlkZURlbGF5OjJFNH0pLHRhYmxlLmFqYXgucmVsb2FkKCl9fSl9LGNoYW5nZURpc3Bvc2l0aW9uPWZ1bmN0aW9uKGEsYixkKXtmb3JjZUp1c3RpZmljYXRpb24mJihiLmp1c3RpZmljYXRpb249YSk7JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5kYXRhKCJ2YWxpZGF0ZWQtY29uZmlybWVkIikmJgpzZWxlY3RlZFNpZ25hbCYmKCJuZXdTaWduYWxKdXN0aWZpY2F0aW9uIj09PSQoc2VsZWN0ZWRTaWduYWwpLmF0dHIoImlkIik/KGIudmFsaWRhdGVkU2lnbmFsTmFtZT0kKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyICNuZXdTaWduYWxOYW1lIikudmFsKCksYXZhaWxhYmxlU2lnbmFsTmFtZUxpc3QucHVzaCgkKCIjbmV3U2lnbmFsTmFtZSIpLnZhbCgpKSxhZGROZXdTaWduYWw9JzxsaT4gPGEgdGFiaW5kZXg9IjAiIGRhdGEtdGFyZ2V0PSIjZGlzcG9zaXRpb25KdXN0aWZpY2F0aW9uUG9wb3ZlciIgcm9sZT0iYnV0dG9uIiBjbGFzcz0ic2VsZWN0U2lnbmFsIHRleHQiIGRhdGEtdG9nZ2xlPSJtb2RhbC1wb3BvdmVyIiBkYXRhLXBsYWNlbWVudD0ibGVmdCIgdGl0bGU9IicrJCgiI25ld1NpZ25hbE5hbWUiKS52YWwoKSsnIj4gJyskKCIjbmV3U2lnbmFsTmFtZSIpLnZhbCgpKyI8L2E+PC9saT4iLCQoIiNzaWduYWwtbGlzdCIpLnByZXBlbmQoYWRkTmV3U2lnbmFsKSk6Yi52YWxpZGF0ZWRTaWduYWxOYW1lPQokKHNlbGVjdGVkU2lnbmFsKS5odG1sKCkudHJpbSgpLGE9JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5jbG9zZXN0KCJ0ciIpLGIucHJvZHVjdEpzb249SlNPTi5zdHJpbmdpZnkoZ2V0UHJvZHVjdEpzb24oYXBwbGljYXRpb25OYW1lLGEpKSxiLnByb2R1Y3RKc29ufHwoYi5wcm9kdWN0SnNvbj1KU09OLnN0cmluZ2lmeShnZXRQcm9kdWN0SnNvbigpKSkpO2JbInRhcmdldERpc3Bvc2l0aW9uLmlkIl09JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5kYXRhKCJkaXNwb3NpdGlvbi1pZCIpO2IuaW5jb21pbmdEaXNwb3NpdGlvbj0kKHNlbGVjdGVkRGlzcG9zaXRpb24pLmNsb3Nlc3QoInVsIikuZGF0YSgiY3VycmVudC1kaXNwb3NpdGlvbiIpO3ZhciBjPSQoc2VsZWN0ZWREaXNwb3NpdGlvbikuY2xvc2VzdCgidGQiKSxlOyQuYWpheCh7dXJsOmNoYW5nZURpc3Bvc2l0aW9uVXJsLHR5cGU6IlBPU1QiLGRhdGE6YixkYXRhVHlwZToianNvbiIsYmVmb3JlU2VuZDpmdW5jdGlvbigpeyQoYykuaXMoInRkIil8fAooYz0kKHNlbGVjdGVkRGlzcG9zaXRpb24pLmNsb3Nlc3QoInNwYW4uZGlzcG9zaXRpb24iKSk7ZT0kKGMpLmh0bWwoKTtkPyQuZWFjaCgkKCJ0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCIpLGZ1bmN0aW9uKCl7JCgidGFibGUjYWxlcnRzRGV0YWlsc1RhYmxlIHRyOm50aC1jaGlsZCgiKygkKHRoaXMpLmNsb3Nlc3QoInRyIikuaW5kZXgoKSsxKSsiKSB0ZC5kaXNwb3NpdGlvbkFjdGlvbiIpLmh0bWwoIjxpIGlkPSdwcmlvcml0eUNoYW5nZVByb2Nlc3NpbmcnIGNsYXNzPSdtZGkgbWRpLXNwaW4gbWRpLWxvYWRpbmcnPjwvaT4iKX0pOiQoYykuaHRtbCgiPGkgaWQ9J3ByaW9yaXR5Q2hhbmdlUHJvY2Vzc2luZycgY2xhc3M9J21kaSBtZGktc3BpbiBtZGktbG9hZGluZyc+PC9pPiIpfSxzdWNjZXNzOmZ1bmN0aW9uKGEpe2lmKGEuc3RhdHVzKXt2YXIgaD1uZXcgU2V0O2QmJiQuZWFjaCgkKCJ0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCIpLApmdW5jdGlvbigpe2guYWRkKCQodGhpcykuY2xvc2VzdCgidHIiKS5pbmRleCgpKX0pO2guc2l6ZXx8LTE8JChjKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCkmJmguYWRkKCQoYykuY2xvc2VzdCgidHIiKS5pbmRleCgpKTt2YXIgZj0kKHNlbGVjdGVkRGlzcG9zaXRpb24pLnBhcmVudCgpLGc9ITE7InVuZGVmaW5lZCIhPXR5cGVvZiByZXZpZXdDb21wbGV0ZWREaXNwb3N0aW9uTGlzdCYmLTE8JC5pbkFycmF5KCQoZikuYXR0cigidGl0bGUiKSxyZXZpZXdDb21wbGV0ZWREaXNwb3N0aW9uTGlzdCkmJihnPSEwKTt2YXIgcT1zaWduYWwudXRpbHMucmVuZGVyKCJkaXNwb3NpdGlvbiIse2FsbG93ZWREaXNwb3NpdGlvbjpkaXNwb3NpdGlvbkluY29taW5nT3V0Z29pbmdNYXBbJChmKS5hdHRyKCJ0aXRsZSIpXSxjdXJyZW50RGlzcG9zaXRpb246JChmKS5hdHRyKCJ0aXRsZSIpLGZvcmNlSnVzdGlmaWNhdGlvbjpmb3JjZUp1c3RpZmljYXRpb24saXNSZXZpZXdlZDpnLGlzVmFsaWRhdGlvblN0YXRlQWNoaWV2ZWQ6JChmKS5kYXRhKCJ2YWxpZGF0ZWQtY29uZmlybWVkIil9KTsKMT09JChmKS5kYXRhKCJkaXNwb3NpdGlvbi1jbG9zZWQiKSYmJChjKS5jbG9zZXN0KCJ0ciIpLmZpbmQoInRkLmR1ZUluIikuaHRtbCgiLSIpO2guc2l6ZSYmISQoIiNzaWduYWxJZFBhcnRuZXIiKS52YWwoKT9oLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9JCgidGFibGUjYWxlcnRzRGV0YWlsc1RhYmxlIHRib2R5IHRyOm50aC1jaGlsZCgiKyhhKzEpKyIpIik7YXBwbGljYXRpb25MYWJlbD09PUFMRVJUX0NPTkZJR19UWVBFLlNUQVRJU1RJQ0FMX0NPTVBBUklTT04mJihiPSQoInRhYmxlI3N0YXRzVGFibGUgdGJvZHkgdHI6bnRoLWNoaWxkKCIrKGErMSkrIikiKSk7Yi5maW5kKCJ0ZC5jdXJyZW50RGlzcG9zaXRpb24iKS5odG1sKCQoZikuYXR0cigidGl0bGUiKSk7Yi5maW5kKCJ0ZC5kaXNwb3NpdGlvbkFjdGlvbiIpLmh0bWwocSl9KTooJChjKS5odG1sKHEpLCQoYykuaXMoInNwYW4uZGlzcG9zaXRpb24iKT8kKGMpLmNsb3Nlc3QoImRpdiIpLnNpYmxpbmdzKCJkaXYuY3VycmVudERpc3Bvc2l0aW9uIikuZmluZCgiaDUiKS5odG1sKCQoZikuYXR0cigidGl0bGUiKSk6CiQoYykuc2libGluZ3MoInRkLmN1cnJlbnREaXNwb3NpdGlvbiIpLmh0bWwoJChmKS5hdHRyKCJ0aXRsZSIpKSk7dmFyIG09JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5hdHRyKCJ0aXRsZSIpO2lmKG0mJjA+PSQoJy5kYXRhVGFibGUtdG9wLWRpc3Bvc2l0aW9uIDppbnB1dFt2YWx1ZT0iJyttKyciXScpLnNpemUoKSl7dmFyIG49W10saz1bXTskKCIuZHluYW1pYy1maWx0ZXJzIikuZWFjaChmdW5jdGlvbihhKXskKHRoaXMpLmlzKCI6Y2hlY2tlZCIpJiZrLnB1c2goJCh0aGlzKS52YWwoKSk7bi5wdXNoKCQodGhpcykuaXMoIjpjaGVja2VkIikpfSk7InRydWUiPT0kKHNlbGVjdGVkRGlzcG9zaXRpb24pLnBhcmVudCgpLmF0dHIoImRhdGEtZGlzcG9zaXRpb24tY2xvc2VkIil8fCJ0cnVlIj09JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5wYXJlbnQoKS5hdHRyKCJkYXRhLWlzLXJldmlld2VkIik/KGc9ITAsbi5wdXNoKCExKSk6KGc9ITEsbi5wdXNoKCEwKSxrLnB1c2gobSkpOwp2YXIgbD0iIjthcHBsaWNhdGlvbk5hbWU9PT1BTEVSVF9DT05GSUdfVFlQRS5TSU5HTEVfQ0FTRV9BTEVSVD9sPUFMRVJUU19QUkVGSVguU0NBOmFwcGxpY2F0aW9uTmFtZT09PUFMRVJUX0NPTkZJR19UWVBFLkFHR1JFR0FURV9DQVNFX0FMRVJUP2w9QUxFUlRTX1BSRUZJWC5BR0c6YXBwbGljYXRpb25OYW1lPT09QUxFUlRfQ09ORklHX1RZUEUuRVZEQVNfQUxFUlQmJihsPUFMRVJUU19QUkVGSVguRVYpO3Nlc3Npb25TdG9yYWdlLnNldEl0ZW0obCsiZmlsdGVyc19zdG9yZSIsSlNPTi5zdHJpbmdpZnkobikpO3Nlc3Npb25TdG9yYWdlLnNldEl0ZW0obCsiZmlsdGVyc192YWx1ZSIsSlNPTi5zdHJpbmdpZnkoaykpO2c9ZmV0Y2hEeW5hbWljRGlzcG9zaXRpb25GaWx0ZXJIdG1sKG0sZyk7JCgiLmRhdGFUYWJsZS10b3AtZGlzcG9zaXRpb24iKS5hcHBlbmQoJChnKSk7YXBwbGljYXRpb25OYW1lPT1BTEVSVF9DT05GSUdfVFlQRS5MSVRFUkFUVVJFX1NFQVJDSF9BTEVSVD91cmw9bGlzdENvbmZpZ1VybCsKIj9maWx0ZXJzPSIray5qb2luKCIsIik6InVuZGVmaW5lZCIhPT10eXBlb2YgbGlzdENvbmZpZ1VybCYmKHVybD1saXN0Q29uZmlnVXJsKyImaXNGaWx0ZXJSZXF1ZXN0PXRydWUmZmlsdGVycz0iK0pTT04uc3RyaW5naWZ5KGspLHRhYmxlLmFqYXgudXJsKHVybCkubG9hZCgpKX0idW5kZWZpbmVkIiE9PXR5cGVvZiB0YWJsZSYmKGEuZGF0YSYmImZhbHNlIiE9PWEuZGF0YS5hdHRhY2hlZFNpZ25hbERhdGF8fCQoInRhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSB0Ym9keSB0cjpmaXJzdCB0ZC5jdXJyZW50RGlzcG9zaXRpb24iKS5sZW5ndGgpJiYoIkFkLUhvYyBBbGVydCI9PT1hcHBsaWNhdGlvbk5hbWU/KGFzc2lnbmVkVG9EYXRhPVtdLHRhYmxlLmFqYXgucmVsb2FkKCkpOnRhYmxlLmNvbHVtbnMuYWRqdXN0KCkuZHJhdygpLCQoIi5zZWxlY3QtYWxsLWNoZWNrIGlucHV0I3NlbGVjdC1hbGwiKS5wcm9wKCJjaGVja2VkIiwhMSkpOyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIikubW9kYWxQb3BvdmVyKCJoaWRlIik7CiQoIiNkaXNwb3NpdGlvblNpZ25hbFBvcG92ZXIiKS5tb2RhbFBvcG92ZXIoImhpZGUiKTthLmRhdGEmJiJmYWxzZSIhPT1hLmRhdGEuYXR0YWNoZWRTaWduYWxEYXRhPygidW5kZWZpbmVkIiE9PXR5cGVvZiBhdmFpbGFibGVTaWduYWxOYW1lTGlzdCYmLTE9PT0kLmluQXJyYXkoYi52YWxpZGF0ZWRTaWduYWxOYW1lLGF2YWlsYWJsZVNpZ25hbE5hbWVMaXN0KSYmYXZhaWxhYmxlU2lnbmFsTmFtZUxpc3QucHVzaChiLnZhbGlkYXRlZFNpZ25hbE5hbWUpLCQuTm90aWZpY2F0aW9uLm5vdGlmeSgic3VjY2VzcyIsInRvcCByaWdodCIsIlN1Y2Nlc3MiLCJBZGRlZCB0byBzaWduYWwgc3VjY2Vzc2Z1bGx5LiIse2F1dG9IaWRlRGVsYXk6MUU0fSkpOigkLk5vdGlmaWNhdGlvbi5ub3RpZnkoInN1Y2Nlc3MiLCJ0b3AgcmlnaHQiLCJTdWNjZXNzIiwiRGlzcG9zaXRpb24gY2hhbmdlZCBzdWNjZXNzZnVsbHkuIix7YXV0b0hpZGVEZWxheToxRTR9KSwidW5kZWZpbmVkIiE9PXR5cGVvZiB0YWJsZSYmCiJ1bmRlZmluZWQiIT09dHlwZW9mIHRhYmxlLmFqYXgmJnRhYmxlLmFqYXgucmVsb2FkKCkpO2FwcGxpY2F0aW9uTGFiZWw9PUFQUExJQ0FUSU9OX0xBQkVMLkNBU0VfREVUQUlMJiYkKCIjY2FzZUhpc3RvcnlNb2RhbFRhYmxlIikuRGF0YVRhYmxlKCkuYWpheC5yZWxvYWQoKTthcHBsaWNhdGlvbkxhYmVsPT1BUFBMSUNBVElPTl9MQUJFTC5FVkVOVF9ERVRBSUwmJigkKCIjY3VycmVudEFsZXJ0SGlzdG9yeU1vZGFsVGFibGUiKS5EYXRhVGFibGUoKS5hamF4LnJlbG9hZCgpLCQoIiNldmRhc0hpc3RvcnlNb2RhbFRhYmxlIikuRGF0YVRhYmxlKCkuYWpheC5yZWxvYWQoKSk7YXBwbGljYXRpb25MYWJlbD09PUFMRVJUX0NPTkZJR19UWVBFLlNJR05BTF9NQU5BR0VNRU5UJiZ1cGRhdGVTaWduYWxIaXN0b3J5KCl9ZWxzZSBjJiYkKGMpLmh0bWwoZSksJCgiI2Rpc3Bvc2l0aW9uSnVzdGlmaWNhdGlvblBvcG92ZXIiKS5tb2RhbFBvcG92ZXIoImhpZGUiKSwkKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyIikubW9kYWxQb3BvdmVyKCJoaWRlIiksCiQuTm90aWZpY2F0aW9uLm5vdGlmeSgiZXJyb3IiLCJ0b3AgcmlnaHQiLCJGYWlsZWQiLGEubWVzc2FnZSx7YXV0b0hpZGVEZWxheToxRTR9KX0sZXJyb3I6ZnVuY3Rpb24oKXtjJiYkKGMpLmh0bWwoZSl9fSl9LHBvcHVsYXRlRGlzcG9zaXRpb25DaGFuZ2VEYXRhPWZ1bmN0aW9uKGEsYil7dmFyIGQ9e30sYz0kKCIjc2lnbmFsSWRQYXJ0bmVyIikudmFsKCk7aWYoYil7dmFyIGU9bmV3IFNldCxwPVtdOyQuZWFjaCgkKCJ0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCIpLGZ1bmN0aW9uKCl7ZS5hZGQoJCh0aGlzKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCkpfSk7ZS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3AucHVzaChwb3B1bGF0ZURpc3Bvc2l0aW9uRGF0YUZyb21HcmlkKGEpKX0pO2Quc2VsZWN0ZWRSb3dzPUpTT04uc3RyaW5naWZ5KHApfWVsc2UgZC5zZWxlY3RlZFJvd3M9LTE8YSYmIWM/SlNPTi5zdHJpbmdpZnkoW3BvcHVsYXRlRGlzcG9zaXRpb25EYXRhRnJvbUdyaWQoYSldKToKSlNPTi5zdHJpbmdpZnkoW3BvcHVsYXRlRGlzcG9zaXRpb25EYXRhRnJvbU90aGVyKGMpXSk7cmV0dXJuIGR9LHBvcHVsYXRlRGlzcG9zaXRpb25EYXRhRnJvbUdyaWQ9ZnVuY3Rpb24oYSl7dmFyIGI9e307YT10YWJsZS5yb3dzKGEpLmRhdGEoKVswXTtiWyJjb25maWdPYmouaWQiXT1hLmFsZXJ0Q29uZmlnSWQ7YlsiZXhlY3V0ZWRDb25maWdPYmouaWQiXT1hLmV4ZWNDb25maWdJZDtiWyJhbGVydC5pZCJdPWEuaWQ7cmV0dXJuIGJ9LHBvcHVsYXRlRGlzcG9zaXRpb25EYXRhRnJvbU90aGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXt9O2JbInNpZ25hbC5pZCJdPWE7YlsiY29uZmlnT2JqLmlkIl09JCgiI2NvbmZpZ0lkIikuaHRtbCgpO2JbImV4ZWN1dGVkQ29uZmlnT2JqLmlkIl09JCgiI2V4ZWNDb25maWdJZCIpLnZhbCgpO2JbImFsZXJ0LmlkIl09JCgiI2FsZXJ0SWQiKS52YWwoKTtyZXR1cm4gYn0sZmV0Y2hEeW5hbWljRGlzcG9zaXRpb25GaWx0ZXJIdG1sPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/Cic8ZGl2IGNsYXNzPSJjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IGNoZWNrYm94LWlubGluZSBtLWwtMyBjaGVja2JveC1wb3MtYWJzIj48aW5wdXQgaWQ9ImZpbHRlcicrJCgiLmR5bmFtaWMtZmlsdGVycyIpLnNpemUoKSsnIiB0eXBlPSJjaGVja2JveCIgY2xhc3M9ImR5bmFtaWMtZmlsdGVycyIgbmFtZT0icmVsYXRlZFJlc3VsdHMiIHZhbHVlPSInK2ErJyIgLz4gPGxhYmVsIGNsYXNzPSJtLXItMzAiIGZvcj0iZmlsdGVyJyskKCIuZHluYW1pYy1maWx0ZXJzIikuc2l6ZSgpKyciPicrYSsiPC9sYWJlbD48L2Rpdj4iOic8ZGl2IGNsYXNzPSJjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IGNoZWNrYm94LWlubGluZSBtLWwtMyBjaGVja2JveC1wb3MtYWJzIj48aW5wdXQgaWQ9ImZpbHRlcicrJCgiLmR5bmFtaWMtZmlsdGVycyIpLnNpemUoKSsnIiB0eXBlPSJjaGVja2JveCIgY2xhc3M9ImR5bmFtaWMtZmlsdGVycyIgbmFtZT0icmVsYXRlZFJlc3VsdHMiIGNoZWNrZWQ9ImNoZWNrZWQiIHZhbHVlPSInKwphKyciIC8+IDxsYWJlbCBjbGFzcz0ibS1yLTMwIiBmb3I9ImZpbHRlcicrJCgiLmR5bmFtaWMtZmlsdGVycyIpLnNpemUoKSsnIj4nK2ErIjwvbGFiZWw+PC9kaXY+In07ZnVuY3Rpb24gZGlzcG9zaXRpb25FZGl0UGFkZGluZygpe3ZhciBhPSQoIi5wb3BvdmVyLmp1c3RpZmljYXRpb24gdWwudGV4dC1saXN0ID4gbGk6bGFzdC1jaGlsZCIpLmhlaWdodCgpKzEwKyJweCI7JCgiLnBvcG92ZXIuanVzdGlmaWNhdGlvbiB1bC50ZXh0LWxpc3QiKS5jc3MoInBhZGRpbmctYm90dG9tIixhKTskKCIuZWRpdGVkSnVzdGlmaWNhdGlvbiIpLmZvY3VzKCl9CmZ1bmN0aW9uIGNoYW5nZURpc3Bvc2l0aW9uRmlsdGVycyhhKXsoYT0kKGEpLmF0dHIoInRpdGxlIikpJiYwPj0kKCcuZGF0YVRhYmxlLXRvcC1kaXNwb3NpdGlvbiA6aW5wdXRbdmFsdWU9IicrYSsnIl0nKS5zaXplKCkmJihhPWZldGNoRHluYW1pY0Rpc3Bvc2l0aW9uRmlsdGVySHRtbChhLCExKSwkKCIuZGF0YVRhYmxlLXRvcC1kaXNwb3NpdGlvbiIpLmFwcGVuZCgkKGEpKSk7dmFyIGI9W10sZD1bXTskKCIuZHluYW1pYy1maWx0ZXJzIikuZWFjaChmdW5jdGlvbihhKXskKHRoaXMpLmlzKCI6Y2hlY2tlZCIpJiZkLnB1c2goJCh0aGlzKS52YWwoKSk7Yi5wdXNoKCQodGhpcykuaXMoIjpjaGVja2VkIikpfSk7YT0iIjthcHBsaWNhdGlvbk5hbWU9PT1BTEVSVF9DT05GSUdfVFlQRS5TSU5HTEVfQ0FTRV9BTEVSVD9hPUFMRVJUU19QUkVGSVguU0NBOmFwcGxpY2F0aW9uTmFtZT09PUFMRVJUX0NPTkZJR19UWVBFLkFHR1JFR0FURV9DQVNFX0FMRVJUP2E9QUxFUlRTX1BSRUZJWC5BR0c6CmFwcGxpY2F0aW9uTmFtZT09PUFMRVJUX0NPTkZJR19UWVBFLkVWREFTX0FMRVJUJiYoYT1BTEVSVFNfUFJFRklYLkVWKTtzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGErImZpbHRlcnNfc3RvcmUiLEpTT04uc3RyaW5naWZ5KGIpKTtzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGErImZpbHRlcnNfdmFsdWUiLEpTT04uc3RyaW5naWZ5KGQpKX0KdmFyIGZldGNoTmV3bHlBdHRhY2hlZFNpZ25hbERhdGE9ZnVuY3Rpb24oYSl7dmFyIGI9IiI7JC5lYWNoKGEsZnVuY3Rpb24oYSxjKXtiPWIrJzxzcGFuIGNsYXNzPSJjbGljayI+PGEgaHJlZj0iJysoc2lnbmFsRGV0YWlsVXJsKyI/aWQ9IitjLnNpZ25hbElkKSsnIj4nK2MubmFtZSsiPC9hPjwvc3Bhbj4mbmJzcDsiO2IrPSIsIn0pO3JldHVybiAxPGIubGVuZ3RoPyI8ZGl2PiIrYi5zdWJzdHJpbmcoMCxiLmxlbmd0aC0xKSsiPC9kaXY+IjoiLSJ9LGRpc3Bvc2l0aW9uQnVsa1VwZGF0ZT1mdW5jdGlvbihhLGIpe3ZhciBkO3N3aXRjaChhcHBsaWNhdGlvbk5hbWUpe2Nhc2UgIlNpbmdsZSBDYXNlIEFsZXJ0IjpkPSJDYXNlIjticmVhaztjYXNlICJBZ2dyZWdhdGUgQ2FzZSBBbGVydCI6ZD0iUEVDIjticmVhaztjYXNlICJFVkRBUyBBbGVydCI6ZD0iUEVDIjticmVhaztjYXNlICJBZC1Ib2MgQWxlcnQiOmQ9Ik9ic2VydmF0aW9uIjticmVhaztjYXNlICJMaXRlcmF0dXJlIFNlYXJjaCBBbGVydCI6ZD0KIkFydGljbGUifWJvb3Rib3guZGlhbG9nKHt0aXRsZToiQXBwbHkgVG8gQWxsIixtZXNzYWdlOnNpZ25hbC51dGlscy5yZW5kZXIoImJ1bGtfb3BlcmF0aW9uX29wdGlvbnMiLHt0b3RhbFNlbGVjdGVkUmVjb3JkczphLGFsZXJ0VHlwZTpkfSksYnV0dG9uczp7b2s6e2xhYmVsOiJPayIsY2xhc3NOYW1lOiJidG4gYnRuLXByaW1hcnkiLGNhbGxiYWNrOmZ1bmN0aW9uKCl7c3dpdGNoKCQoImlucHV0W25hbWU9YnVsa09wdGlvbnNdOmNoZWNrZWQiKS52YWwoKSl7Y2FzZSAiY3VycmVudCI6dmFyIGE9cG9wdWxhdGVEaXNwb3NpdGlvbkNoYW5nZURhdGEoJChzZWxlY3RlZERpc3Bvc2l0aW9uKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCksITEpO2NoYW5nZURpc3Bvc2l0aW9uKGIsYSwhMSk7YnJlYWs7Y2FzZSAiYWxsU2VsZWN0ZWQiOmNoZWNrSWZBbGxTZWxlY3RlZFJvd3NJblNhbWVEaXNwb3NpdGlvblN0YXRlKCk/KGE9cG9wdWxhdGVEaXNwb3NpdGlvbkNoYW5nZURhdGEoJChzZWxlY3RlZERpc3Bvc2l0aW9uKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCksCiEwKSxjaGFuZ2VEaXNwb3NpdGlvbihiLGEsITApKTokLk5vdGlmaWNhdGlvbi5ub3RpZnkoImVycm9yIiwidG9wIHJpZ2h0IiwiRXJyb3IiLCJBbGwgc2VsZWN0ZWQgc2FmZXR5IG9ic2VydmF0aW9ucyBtdXN0IGJlIGluIHNhbWUgZGlzcG9zaXRpb24gZm9yIHBlcmZvcm1pbmcgdGhlIGJ1bGsgdXBkYXRlLiIse2F1dG9IaWRlRGVsYXk6MUU0fSl9fX0sY2FuY2VsOntsYWJlbDoiQ2FuY2VsIixjbGFzc05hbWU6ImJ0biBidG4tZGVmYXVsdCJ9fX0pfSxjaGVja0lmQWxsU2VsZWN0ZWRSb3dzSW5TYW1lRGlzcG9zaXRpb25TdGF0ZT1mdW5jdGlvbigpe3ZhciBhPSQoc2VsZWN0ZWREaXNwb3NpdGlvbikuY2xvc2VzdCgidWwiKS5kYXRhKCJjdXJyZW50LWRpc3Bvc2l0aW9uIiksYj1uZXcgU2V0OyQuZWFjaCgkKCIuY29weS1zZWxlY3Q6Y2hlY2tlZCIpLGZ1bmN0aW9uKCl7Yi5hZGQoJCh0aGlzKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCkpfSk7dmFyIGQ9ITA7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2QmJgooZD1hPT09JCgidGFibGUjYWxlcnRzRGV0YWlsc1RhYmxlIHRyOm50aC1jaGlsZCgiKyhiKzEpKyIpIGRpdi5kaXNwb3NpdGlvbiB1bCIpLmRhdGEoImN1cnJlbnQtZGlzcG9zaXRpb24iKSl9KTtyZXR1cm4gZH0saW5pdGlhdGVBdXRoRmxvdz1mdW5jdGlvbihhKXtib290Ym94LmRpYWxvZyh7dGl0bGU6IlVzZXIgYXV0aGVudGljYXRpb24iLG1lc3NhZ2U6c2lnbmFsLnV0aWxzLnJlbmRlcigidXNlckF1dGgiLHt9KSxidXR0b25zOntvazp7bGFiZWw6IkNvbmZpcm0iLGNsYXNzTmFtZToiYnRuIGJ0bi1wcmltYXJ5IixjYWxsYmFjazpmdW5jdGlvbigpe3ZhciBiPSQoIiN1c2VybmFtZSIpLnZhbCgpLGQ9JCgiI3Bhc3N3b3JkIikudmFsKCk7aWYoYiYmZCl7aWYoYj09bG9nZ2VkSW5Vc2VyKXtpZihhdXRoZW50aWNhdGVVc2VyKGIsZCkpeyQoIiNkZXRhaWxlZC12aWV3LWNoZWNrYm94IikuaXMoIjpjaGVja2VkIik/KGQ9JCgidGFibGUjYWxlcnRzRGV0YWlsc1RhYmxlIC5jb3B5LXNlbGVjdDpjaGVja2VkIikubGVuZ3RoLApiPSJ0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgdGJvZHkuZGV0YWlsc1RhYmxlQm9keSIpOihkPSQoInRhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkIikubGVuZ3RoLGI9InRhYmxlLkRURkNfQ2xvbmVkIHRib2R5Iik7dmFyIGM9JChzZWxlY3RlZERpc3Bvc2l0aW9uKS5jbG9zZXN0KCJ0ciIpLmluZGV4KCk7aXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KGMpJiYoYy89Mik7MTxkJiYkKGIrIiA+IHRyOm50aCgiK2MrIikgLmNvcHktc2VsZWN0IikucHJvcCgiY2hlY2tlZCIpP2Rpc3Bvc2l0aW9uQnVsa1VwZGF0ZShkLGEpOihiPXBvcHVsYXRlRGlzcG9zaXRpb25DaGFuZ2VEYXRhKGMsITEpLGNoYW5nZURpc3Bvc2l0aW9uKGEsYiwhMSkpO3JldHVybiEwfSQoIiNhdXRoQ2hlY2siKS5hZGRDbGFzcygic2hvdyIpO3JldHVybiExfSQuTm90aWZpY2F0aW9uLm5vdGlmeSgiZXJyb3IiLCJ0b3AgcmlnaHQiLCJFcnJvciIsIlBsZWFzZSBzZWxlY3QgdGhlIGxvZ2dlZCBpbiBVc2VyLiIsCnthdXRvSGlkZURlbGF5OjFFNH0pfWVsc2UgcmV0dXJuIGJ8fCQoIiN1c2VyTmFtZUZpZWxkIikuYWRkQ2xhc3MoInNob3ciKSxkfHwkKCIjcGFzc3dvcmRGaWVsZCIpLmFkZENsYXNzKCJzaG93IiksITF9fSxjYW5jZWw6e2xhYmVsOiJDYW5jZWwiLGNsYXNzTmFtZToiYnRuIGJ0bi1kZWZhdWx0IixjYWxsYmFjazpmdW5jdGlvbigpeyQoIiNkaXNwb3NpdGlvbkp1c3RpZmljYXRpb25Qb3BvdmVyIikubW9kYWxQb3BvdmVyKCJoaWRlIil9fX19KX0sYXV0aGVudGljYXRlVXNlcj1mdW5jdGlvbihhLGIpe3ZhciBkPSExOyQuYWpheCh7dHlwZToiUE9TVCIsdXJsOmF1dGhVcmwsZGF0YTp7dXNlck5hbWU6YSxwYXNzd29yZDpifSxhc3luYzohMSxzdWNjZXNzOmZ1bmN0aW9uKGEpe2EuYXV0aG9yaXplZCYmKGQ9ITApfX0pO3JldHVybiBkfSxzaG93SGlkZUFkZE5ld1NpZ25hbD1mdW5jdGlvbigpeyJ1bmRlZmluZWQiIT09dHlwZW9mIGFwcGxpY2F0aW9uTmFtZSYmYXBwbGljYXRpb25OYW1lPT09CkFMRVJUX0NPTkZJR19UWVBFLkxJVEVSQVRVUkVfU0VBUkNIX0FMRVJUPyQoIiNkaXNwb3NpdGlvblNpZ25hbFBvcG92ZXIgI2FkZE5ld1NpZ25hbCIpLmhpZGUoKTokKCIjZGlzcG9zaXRpb25TaWduYWxQb3BvdmVyICNhZGROZXdTaWduYWwiKS5zaG93KCl9LGlzQWJzdHJhY3RWaWV3T3JDYXNlVmlldz1mdW5jdGlvbihhKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIGlzQ2FzZURldGFpbFZpZXcmJiJ0cnVlIj09aXNDYXNlRGV0YWlsVmlldyYmMCE9YXx8MDwkKCIjZGV0YWlsZWQtdmlldy1jaGVja2JveCIpLmxlbmd0aCYmMT09JCgiI2RldGFpbGVkLXZpZXctY2hlY2tib3giKS5wcm9wKCJjaGVja2VkIikmJjAhPWE/ITA6ITF9LHVwZGF0ZVNpZ25hbEhpc3Rvcnk9ZnVuY3Rpb24oKXskLmFqYXgoe3VybDpyZWZyZXNoU2lnbmFsSGlzdG9yeSxzdWNjZXNzOmZ1bmN0aW9uKGEpe2Euc3RhdHVzPygkKCIjc2lnbmFsSGlzdG9yeSIpLmh0bWwoYS5kYXRhKSxzZXRDcmVhdGVkRGF0ZSgpKToKJC5Ob3RpZmljYXRpb24ubm90aWZ5KCJlcnJvciIsInRvcCByaWdodCIsIkVycm9yIixhLm1lc3NhZ2Use2F1dG9IaWRlRGVsYXk6MkU0fSl9fSl9Ow==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024812" offset="0" length="4903" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1023" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/priority/priority-change-3d9810e00e597207421690a267653b85.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/priority/priority-change-3d9810e00e597207421690a267653b85.js" ip="10.100.22.24" port="8181" connectionId="37" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.732+05:30" startTime="334024468" endTime="334024828">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvcHJpb3JpdHkvcHJpb3JpdHktY2hhbmdlLTNkOTgxMGUwMGU1OTcyMDc0MjE2OTBhMjY3NjUzYjg1LmpzIEhUVFAvMS4xDQpIb3N0OiAxMC4xMDAuMjIuMjQ6ODE4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2QNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>2413</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNzoxMiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImFwcC9wdnMvcHJpb3JpdHkvcHJpb3JpdHktY2hhbmdlLTNkOTgxMGUwMGU1OTcyMDc0MjE2OTBhMjY3NjUzYjg1LmpzIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjQxMw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNzoxMiBHTVQNCkVUYWc6ICJhcHAvcHZzL3ByaW9yaXR5L3ByaW9yaXR5LWNoYW5nZS0zZDk4MTBlMDBlNTk3MjA3NDIxNjkwYTI2NzY1M2I4NS5qcyINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ2FjaGUtQ29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDI0MTMNCkRhdGU6IE1vbiwgMTggTm92IDIwMTkgMDQ6MDg6MzcgR01UDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334024828" offset="0" length="2753" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1026" hostname="10.100.22.24:8181" path="/signal/assets/pdf-icon.jpg" url="http://10.100.22.24:8181/signal/assets/pdf-icon.jpg" ip="10.100.22.24" port="8181" connectionId="34" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.756+05:30" startTime="334024875" endTime="334025171">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvd2VicCxpbWFnZS9hcG5nLGltYWdlLyosKi8qO3E9MC44</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL3BkZi1pY29uLmpwZyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiBpbWFnZS93ZWJwLGltYWdlL2FwbmcsaW1hZ2UvKiwqLyo7cT0wLjgNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>878</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjowOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>InBkZi1pY29uLWE2ZTdkN2Q5YjljNDdmYjZjZmQ1NjExYTkxNGIyZGI1LmpwZyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2UvanBlZztjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ODc4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjowOCBHTVQNCkVUYWc6ICJwZGYtaWNvbi1hNmU3ZDdkOWI5YzQ3ZmI2Y2ZkNTYxMWE5MTRiMmRiNS5qcGciDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1UeXBlOiBpbWFnZS9qcGVnO2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiA4NzgNCkRhdGU6IE1vbiwgMTggTm92IDIwMTkgMDQ6MDg6MzggR01UDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBwgHBgkIBwgGCgkLDRYPDQwMDRsUFRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys/RD84QzQ5OjcBCgoKDQwNGg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3NzU3NP/AABEIACAAIAMBEQACEQEDEQH/xAAYAAEAAwEAAAAAAAAAAAAAAAAGAgMFB//EAC0QAAEDAgUBBgcBAAAAAAAAAAECAwQFEQAGEhMhMSIyQVFhwRUjcXKxstEU/8QAGgEAAgIDAAAAAAAAAAAAAAAAAwQABQECBv/EACwRAAEDAgQFAgcBAAAAAAAAAAEAAgMRIQQSMUEFE1FhcZHRMkKSobHw8SL/2gAMAwEAAhEDEQA/AHdQzhPj1lVPZZpZKpGw0XCoXJVpF7fzCzpyH5VeQcLjkg5xJsKn0rZQVW8xB0NmHRi6t0I0f6XQQCUdq1hZI3UcdeemJzZOgWowODoXZ3Up0He2utj27rJZz9OXXWqU5DjAqlJYW4h50WJUEmwVY8eoxoMSc+WibfwOMYYzh5sCduldiU/p0lYjx0yV6txtJS4TySQOD7H36tjRc2sabkaBMq3xNU6tNvh4PJDa0aULBuCAUHx874C7DtLs1SrWLi80cHIDWkUpvp6qELJrDMcNs1WvISiQp0WLV9YUDe+3ci6Um3TgcYggA0J+3so/iz3mro26U+bT6u5vqjE7JtPy/mehqYkzCy49q+atOrWiygOEjg8YX5AjmZTRWY4tNisFNVoqBtXQ2O+yU1OI3sPrQ00jS2ojSkC1hh5wsVy4KVYysKqP3D96/wBjiKINmdUSq1yTGdce1RWAhjZSVrS8o6tQA8rJwpLlkeWnYW86+yu8HzcPA2Ros41NbDKLUv1qVW1mCY6yunT6bNalbCtxzT2e6e0PQ/k4y2dx/wAPaaoOJwETGGaKQFuw38eR+F0LDSqkTzFLmF5MKM5ts3XvGy0quTcchPKbHwNz54BLnJo3RPYR+HYC6T4trV/T5r4VtHVSqTBTHZW8o9VrMdd1qPUnjBImtjblCBiZ5MTIZH/zsrJ9RivQ5DbanytbakpGyvkkfTGznAgoAF1//9k=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334025171" offset="0" length="1158" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="1028" hostname="10.100.22.24:8181" path="/signal/assets/excel.gif" url="http://10.100.22.24:8181/signal/assets/excel.gif" ip="10.100.22.24" port="8181" connectionId="33" origin="HTML" frame="1" startDateTime="2019-11-18T09:43:51.779+05:30" startTime="334024828" endTime="334025187">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC45NyBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvd2VicCxpbWFnZS9hcG5nLGltYWdlLyosKi8qO3E9MC44</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj02OGZlOGEwNi0yN2JmLTQ4YjYtYWJkZC1iNDg1ZWUzM2MwM2Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2V4Y2VsLmdpZiBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OC4wLjM5MDQuOTcgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiBpbWFnZS93ZWJwLGltYWdlL2FwbmcsaW1hZ2UvKiwqLyo7cT0wLjgNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjQ6ODE4MS9zaWduYWwvYWRIb2NBbGVydC9pbmRleA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNkDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NjhmZThhMDYtMjdiZi00OGI2LWFiZGQtYjQ4NWVlMzNjMDNk</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1603</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMiBOb3YgMjAxOSAwNDowNjowOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImV4Y2VsLWE0MGNlNzhjZGQ4NmNhYzgwMDQxNjNiZjczNjgwMmRhLmdpZiI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2UvZ2lmO2NoYXJzZXQ9VVRGLTg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTYwMw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOCBOb3YgMjAxOSAwNDowODozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMiBOb3YgMjAxOSAwNDowNjowOCBHTVQNCkVUYWc6ICJleGNlbC1hNDBjZTc4Y2RkODZjYWM4MDA0MTYzYmY3MzY4MDJkYS5naWYiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1UeXBlOiBpbWFnZS9naWY7Y2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDE2MDMNCkRhdGU6IE1vbiwgMTggTm92IDIwMTkgMDQ6MDg6MzggR01UDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0lGODlhIAAgAPcAAAAAAPv8//r7/vf5/qy93sLL3ejv/e7z/fL2/vz9/9zn+9/p++Ps/PD1/u/0/fP3/mad82uf8XGi8Hmm7ZWz5KW73qm+4c3e+dHg+dPi+tDe9dXj+tfk+tjl+tzo+9/q/OTu/+Hr/ODq++Tt/Ofv/Onw/Ovy/erx/O3z/fD1/YGr6oeu6I6y5Y6r1ZOv2Ju44qC636rC5K7E5LnO7Mnc+cPU7s/g+tnm+trn+t/q++Ls++Xu/OTt+/P3/fn7/mqKtoem0Yqp04yq1I+t1pKv15Sx2ZOw2JWy2Zay2Zez2pm125y33Zy43Zu23J653p+63qK84KS+4aO836fA46a/4qvE5a7G563F5qzE5bHJ6LXK573S7palurPE3Jinu56twau5zKq4y6m3yq+90PH2/ff6/nSGnLPL6ZyrvqGww6a1yLG/0a+9z627zfX5/qOzxTBIYDJKYjdOZj1Ua0pgd19ziPP4/fr8/v3+//v9/Onx6tvq3ANoA9rp2tno2djn2N/s397r3uHt4eTv5Obw5uny6ejx6O317evz6+/27/H38fT59PP48/b69vX59fb59vj6+P7//v3+/fz9/B13HEyWSjSHMWOZYFmkVGisY1mCVt3q3EaTP0iHQW6wZ+Pu4i9RK2SqW12aVnS2bHu7coXBe5zHlLLWqqfQnXWyYoq1e5C8gZW3inagZXuma4CqcIWvdU6MNF6TSGqWV2aOVHGbXo2qgSlMGTdcJVaMPEtyOTBSHUZsMmGHTEFlK1Z6QFyARvr7+f////7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAgACAAAAj+AAEIHEiwoMGDCAWuWbhmDJuHbdqAARNGjBg1GBMWXCOso8ePeIThwZMggRozCFepgvXKVatas2j16gXs1y9dukaOLPkGRJ2Dqk6dQoXKlFFWKlm2zLkzQYCeHuYYDNoxkqQ8wSA1WqQo0aFWumbM2BkgDQgPGuQUhHVqmKSrWR9x9YoIrE6SAb6c1VADDsFXqIZ5ypRJ1CNGmhJrKlSLV1OnX7bM0CLDgl+BrlBNqnSKFClZmjxhssSHUOMzWbJYuVIFTZ3XdOjMudzKFFZOqEaF6jS69KBZvkZacXrHR4EuFZJLuVzLVLBGjiyZCoWJV+lPgoCPrOLUR5kobh7+kHEA4/IsVtAZjV4lqxKuS5cAycKFJUaMKVSiQIHxAEGKA+UJRMsqXGGSCiaUlNIeLrZsMh9JVAQgQBllONEDAg6g8MJlvaiiHigggkLJKAvuMV9JUQjgnRtLINDAASZsKBAwsNBViCGD2BIiKH3ksksU+sHgBBNNKEHGASicQMFlv7xyCCJ6EDLIJ4AEssceffzho4RPlDGAGz0kkeEJJSwp0C+uIGKIlFQGsskefvzxRyy3+OADE1/2QEYRKJhgwA4sXKaLSy/BNIssiOaSSyx0OrFEkUkcUYQLJpRgwAiBCoSTLrx06sunuIS6y6i3fJmEeCn0WQIJIzCwwmX+BX1BIRUDDOAlnuH1l4IDRAzxAwk7MJCDCrAS9IUbbgQ5ZJEPIFHED0gO4cYPI+ggggfEHvSFHT3w90APPRiZQhHTJtnCtCFcq8AExQ6EBgJkOEEGGQ2kgIQDBxAxbQtCBDHtBx7g0AG7B6HhgAOPKhFpEUSYIO0PO/Dg7w8Bd7CBBO0KhAYKKChhwscnEFFCCef+wEAIQEx7AwcbZIDxQV6QmcTIlg6xww5C/LtAyj+wnIENEWQMgBckkFCEEb22wO8PTDftNAY2AC20FyPwUPXJ1uawgAcBr8xBBhlAfQENEAjNRQhoh6D11h4ocIPXLYs9Ntlmf3AcATBQwMIj3nuvsIIKKkwwgQQSRADB4WbXIZscccDh+OOQRw65RpRXHhAAOw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="334025187" offset="0" length="1880" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
</HTTPSnapshot>